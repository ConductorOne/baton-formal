// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: core/v1/sessions.proto

package corev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SessionObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Duration      *durationpb.Duration   `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
	SessionStatus string                 `protobuf:"bytes,5,opt,name=session_status,json=sessionStatus,proto3" json:"session_status,omitempty"`
	Network       *Network               `protobuf:"bytes,6,opt,name=network,proto3" json:"network,omitempty"`
	Sidecar       *SidecarLog            `protobuf:"bytes,7,opt,name=sidecar,proto3" json:"sidecar,omitempty"`
	User          *UserLog               `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty"`
	Resource      *ResourceLog           `protobuf:"bytes,9,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *SessionObject) Reset() {
	*x = SessionObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_sessions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionObject) ProtoMessage() {}

func (x *SessionObject) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_sessions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionObject.ProtoReflect.Descriptor instead.
func (*SessionObject) Descriptor() ([]byte, []int) {
	return file_core_v1_sessions_proto_rawDescGZIP(), []int{0}
}

func (x *SessionObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SessionObject) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SessionObject) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *SessionObject) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *SessionObject) GetSessionStatus() string {
	if x != nil {
		return x.SessionStatus
	}
	return ""
}

func (x *SessionObject) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *SessionObject) GetSidecar() *SidecarLog {
	if x != nil {
		return x.Sidecar
	}
	return nil
}

func (x *SessionObject) GetUser() *UserLog {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *SessionObject) GetResource() *ResourceLog {
	if x != nil {
		return x.Resource
	}
	return nil
}

type ListSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Query  string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	SortBy string `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	// string start_timestamp = 4 [(buf.validate.field).string.min_len = 1];
	// string end_timestamp = 5 [(buf.validate.field).string.min_len = 1];
	StartTimestamp         string   `protobuf:"bytes,4,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp           string   `protobuf:"bytes,5,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	Cursor                 string   `protobuf:"bytes,6,opt,name=cursor,proto3" json:"cursor,omitempty"`
	HistogramInterval      string   `protobuf:"bytes,7,opt,name=histogram_interval,json=histogramInterval,proto3" json:"histogram_interval,omitempty"`
	HistogramGroupByFields []string `protobuf:"bytes,8,rep,name=histogram_group_by_fields,json=histogramGroupByFields,proto3" json:"histogram_group_by_fields,omitempty"`
}

func (x *ListSessionsRequest) Reset() {
	*x = ListSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_sessions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSessionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsRequest) ProtoMessage() {}

func (x *ListSessionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_sessions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsRequest.ProtoReflect.Descriptor instead.
func (*ListSessionsRequest) Descriptor() ([]byte, []int) {
	return file_core_v1_sessions_proto_rawDescGZIP(), []int{1}
}

func (x *ListSessionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListSessionsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListSessionsRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListSessionsRequest) GetStartTimestamp() string {
	if x != nil {
		return x.StartTimestamp
	}
	return ""
}

func (x *ListSessionsRequest) GetEndTimestamp() string {
	if x != nil {
		return x.EndTimestamp
	}
	return ""
}

func (x *ListSessionsRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListSessionsRequest) GetHistogramInterval() string {
	if x != nil {
		return x.HistogramInterval
	}
	return ""
}

func (x *ListSessionsRequest) GetHistogramGroupByFields() []string {
	if x != nil {
		return x.HistogramGroupByFields
	}
	return nil
}

type ListSessionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions     []*SessionObject                   `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	Aggregations *ListSessionsResponse_Aggregations `protobuf:"bytes,2,opt,name=aggregations,proto3" json:"aggregations,omitempty"`
	NumHits      int64                              `protobuf:"varint,3,opt,name=num_hits,json=numHits,proto3" json:"num_hits,omitempty"`
	ListMetadata *ListMetadata                      `protobuf:"bytes,4,opt,name=list_metadata,json=listMetadata,proto3" json:"list_metadata,omitempty"`
}

func (x *ListSessionsResponse) Reset() {
	*x = ListSessionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_sessions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSessionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsResponse) ProtoMessage() {}

func (x *ListSessionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_sessions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsResponse.ProtoReflect.Descriptor instead.
func (*ListSessionsResponse) Descriptor() ([]byte, []int) {
	return file_core_v1_sessions_proto_rawDescGZIP(), []int{2}
}

func (x *ListSessionsResponse) GetSessions() []*SessionObject {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *ListSessionsResponse) GetAggregations() *ListSessionsResponse_Aggregations {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

func (x *ListSessionsResponse) GetNumHits() int64 {
	if x != nil {
		return x.NumHits
	}
	return 0
}

func (x *ListSessionsResponse) GetListMetadata() *ListMetadata {
	if x != nil {
		return x.ListMetadata
	}
	return nil
}

type GetSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetSessionRequest) Reset() {
	*x = GetSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_sessions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionRequest) ProtoMessage() {}

func (x *GetSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_sessions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionRequest.ProtoReflect.Descriptor instead.
func (*GetSessionRequest) Descriptor() ([]byte, []int) {
	return file_core_v1_sessions_proto_rawDescGZIP(), []int{3}
}

func (x *GetSessionRequest) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type GetSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetSessionResponse) Reset() {
	*x = GetSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_sessions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSessionResponse) ProtoMessage() {}

func (x *GetSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_sessions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSessionResponse.ProtoReflect.Descriptor instead.
func (*GetSessionResponse) Descriptor() ([]byte, []int) {
	return file_core_v1_sessions_proto_rawDescGZIP(), []int{4}
}

func (x *GetSessionResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type CancelSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelSessionRequest) Reset() {
	*x = CancelSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_sessions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSessionRequest) ProtoMessage() {}

func (x *CancelSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_sessions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSessionRequest.ProtoReflect.Descriptor instead.
func (*CancelSessionRequest) Descriptor() ([]byte, []int) {
	return file_core_v1_sessions_proto_rawDescGZIP(), []int{5}
}

type CancelSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelSessionResponse) Reset() {
	*x = CancelSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_sessions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSessionResponse) ProtoMessage() {}

func (x *CancelSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_sessions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSessionResponse.ProtoReflect.Descriptor instead.
func (*CancelSessionResponse) Descriptor() ([]byte, []int) {
	return file_core_v1_sessions_proto_rawDescGZIP(), []int{6}
}

type ListSessionsResponse_Aggregations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogsOverTime                     []*ListSessionsResponse_DateBucket `protobuf:"bytes,1,rep,name=logs_over_time,json=logsOverTime,proto3" json:"logs_over_time,omitempty"`
	SessionTypes                     []*ListSessionsResponse_Bucket     `protobuf:"bytes,2,rep,name=session_types,json=sessionTypes,proto3" json:"session_types,omitempty"`
	SessionIds                       []*ListSessionsResponse_Bucket     `protobuf:"bytes,3,rep,name=session_ids,json=sessionIds,proto3" json:"session_ids,omitempty"`
	SessionClientIpAddresses         []*ListSessionsResponse_Bucket     `protobuf:"bytes,4,rep,name=session_client_ip_addresses,json=sessionClientIpAddresses,proto3" json:"session_client_ip_addresses,omitempty"`
	SessionServerIpAddresses         []*ListSessionsResponse_Bucket     `protobuf:"bytes,5,rep,name=session_server_ip_addresses,json=sessionServerIpAddresses,proto3" json:"session_server_ip_addresses,omitempty"`
	QueryFingerprints                []*ListSessionsResponse_Bucket     `protobuf:"bytes,6,rep,name=query_fingerprints,json=queryFingerprints,proto3" json:"query_fingerprints,omitempty"`
	QueryReceived                    []*ListSessionsResponse_Bucket     `protobuf:"bytes,7,rep,name=query_received,json=queryReceived,proto3" json:"query_received,omitempty"`
	QuerySent                        []*ListSessionsResponse_Bucket     `protobuf:"bytes,8,rep,name=query_sent,json=querySent,proto3" json:"query_sent,omitempty"`
	ResourceIds                      []*ListSessionsResponse_Bucket     `protobuf:"bytes,9,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids,omitempty"`
	ResourceNames                    []*ListSessionsResponse_Bucket     `protobuf:"bytes,10,rep,name=resource_names,json=resourceNames,proto3" json:"resource_names,omitempty"`
	ResourceTypes                    []*ListSessionsResponse_Bucket     `protobuf:"bytes,11,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty"`
	ResourceHostnames                []*ListSessionsResponse_Bucket     `protobuf:"bytes,12,rep,name=resource_hostnames,json=resourceHostnames,proto3" json:"resource_hostnames,omitempty"`
	ResoruceTechnologies             []*ListSessionsResponse_Bucket     `protobuf:"bytes,13,rep,name=resoruce_technologies,json=resoruceTechnologies,proto3" json:"resoruce_technologies,omitempty"`
	SidecarNames                     []*ListSessionsResponse_Bucket     `protobuf:"bytes,14,rep,name=sidecar_names,json=sidecarNames,proto3" json:"sidecar_names,omitempty"`
	SidecarIds                       []*ListSessionsResponse_Bucket     `protobuf:"bytes,15,rep,name=sidecar_ids,json=sidecarIds,proto3" json:"sidecar_ids,omitempty"`
	SidecarTechnologies              []*ListSessionsResponse_Bucket     `protobuf:"bytes,16,rep,name=sidecar_technologies,json=sidecarTechnologies,proto3" json:"sidecar_technologies,omitempty"`
	UserTypes                        []*ListSessionsResponse_Bucket     `protobuf:"bytes,17,rep,name=user_types,json=userTypes,proto3" json:"user_types,omitempty"`
	UserSubTypes                     []*ListSessionsResponse_Bucket     `protobuf:"bytes,18,rep,name=user_sub_types,json=userSubTypes,proto3" json:"user_sub_types,omitempty"`
	UserEmails                       []*ListSessionsResponse_Bucket     `protobuf:"bytes,19,rep,name=user_emails,json=userEmails,proto3" json:"user_emails,omitempty"`
	UserUsernames                    []*ListSessionsResponse_Bucket     `protobuf:"bytes,20,rep,name=user_usernames,json=userUsernames,proto3" json:"user_usernames,omitempty"`
	UserIds                          []*ListSessionsResponse_Bucket     `protobuf:"bytes,21,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	EndUserTypes                     []*ListSessionsResponse_Bucket     `protobuf:"bytes,22,rep,name=end_user_types,json=endUserTypes,proto3" json:"end_user_types,omitempty"`
	EndUserNames                     []*ListSessionsResponse_Bucket     `protobuf:"bytes,23,rep,name=end_user_names,json=endUserNames,proto3" json:"end_user_names,omitempty"`
	EndUserEmails                    []*ListSessionsResponse_Bucket     `protobuf:"bytes,24,rep,name=end_user_emails,json=endUserEmails,proto3" json:"end_user_emails,omitempty"`
	TriggeredPolicyIds               []*ListSessionsResponse_Bucket     `protobuf:"bytes,25,rep,name=triggered_policy_ids,json=triggeredPolicyIds,proto3" json:"triggered_policy_ids,omitempty"`
	TriggeredPolicyNames             []*ListSessionsResponse_Bucket     `protobuf:"bytes,26,rep,name=triggered_policy_names,json=triggeredPolicyNames,proto3" json:"triggered_policy_names,omitempty"`
	TriggeredPolicyStatuses          []*ListSessionsResponse_Bucket     `protobuf:"bytes,27,rep,name=triggered_policy_statuses,json=triggeredPolicyStatuses,proto3" json:"triggered_policy_statuses,omitempty"`
	TriggeredPolicyTypes             []*ListSessionsResponse_Bucket     `protobuf:"bytes,28,rep,name=triggered_policy_types,json=triggeredPolicyTypes,proto3" json:"triggered_policy_types,omitempty"`
	ResponseDataVolumes              []*ListSessionsResponse_Bucket     `protobuf:"bytes,29,rep,name=response_data_volumes,json=responseDataVolumes,proto3" json:"response_data_volumes,omitempty"`
	ResponseReturnedColumnNames      []*ListSessionsResponse_Bucket     `protobuf:"bytes,30,rep,name=response_returned_column_names,json=responseReturnedColumnNames,proto3" json:"response_returned_column_names,omitempty"`
	ResponseReturnedColumnDataLabels []*ListSessionsResponse_Bucket     `protobuf:"bytes,31,rep,name=response_returned_column_data_labels,json=responseReturnedColumnDataLabels,proto3" json:"response_returned_column_data_labels,omitempty"`
	ResponseRowsSent                 []*ListSessionsResponse_Bucket     `protobuf:"bytes,32,rep,name=response_rows_sent,json=responseRowsSent,proto3" json:"response_rows_sent,omitempty"`
	ResponseRowsReceived             []*ListSessionsResponse_Bucket     `protobuf:"bytes,33,rep,name=response_rows_received,json=responseRowsReceived,proto3" json:"response_rows_received,omitempty"`
}

func (x *ListSessionsResponse_Aggregations) Reset() {
	*x = ListSessionsResponse_Aggregations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_sessions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSessionsResponse_Aggregations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsResponse_Aggregations) ProtoMessage() {}

func (x *ListSessionsResponse_Aggregations) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_sessions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsResponse_Aggregations.ProtoReflect.Descriptor instead.
func (*ListSessionsResponse_Aggregations) Descriptor() ([]byte, []int) {
	return file_core_v1_sessions_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ListSessionsResponse_Aggregations) GetLogsOverTime() []*ListSessionsResponse_DateBucket {
	if x != nil {
		return x.LogsOverTime
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetSessionTypes() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.SessionTypes
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetSessionIds() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.SessionIds
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetSessionClientIpAddresses() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.SessionClientIpAddresses
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetSessionServerIpAddresses() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.SessionServerIpAddresses
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetQueryFingerprints() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.QueryFingerprints
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetQueryReceived() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.QueryReceived
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetQuerySent() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.QuerySent
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetResourceIds() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetResourceNames() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.ResourceNames
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetResourceTypes() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.ResourceTypes
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetResourceHostnames() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.ResourceHostnames
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetResoruceTechnologies() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.ResoruceTechnologies
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetSidecarNames() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.SidecarNames
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetSidecarIds() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.SidecarIds
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetSidecarTechnologies() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.SidecarTechnologies
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetUserTypes() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.UserTypes
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetUserSubTypes() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.UserSubTypes
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetUserEmails() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.UserEmails
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetUserUsernames() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.UserUsernames
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetUserIds() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetEndUserTypes() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.EndUserTypes
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetEndUserNames() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.EndUserNames
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetEndUserEmails() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.EndUserEmails
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetTriggeredPolicyIds() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.TriggeredPolicyIds
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetTriggeredPolicyNames() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.TriggeredPolicyNames
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetTriggeredPolicyStatuses() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.TriggeredPolicyStatuses
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetTriggeredPolicyTypes() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.TriggeredPolicyTypes
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetResponseDataVolumes() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.ResponseDataVolumes
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetResponseReturnedColumnNames() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.ResponseReturnedColumnNames
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetResponseReturnedColumnDataLabels() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.ResponseReturnedColumnDataLabels
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetResponseRowsSent() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.ResponseRowsSent
	}
	return nil
}

func (x *ListSessionsResponse_Aggregations) GetResponseRowsReceived() []*ListSessionsResponse_Bucket {
	if x != nil {
		return x.ResponseRowsReceived
	}
	return nil
}

type ListSessionsResponse_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ListSessionsResponse_Bucket) Reset() {
	*x = ListSessionsResponse_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_sessions_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSessionsResponse_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsResponse_Bucket) ProtoMessage() {}

func (x *ListSessionsResponse_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_sessions_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsResponse_Bucket.ProtoReflect.Descriptor instead.
func (*ListSessionsResponse_Bucket) Descriptor() ([]byte, []int) {
	return file_core_v1_sessions_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ListSessionsResponse_Bucket) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ListSessionsResponse_Bucket) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ListSessionsResponse_GroupByBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                                `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Count   int32                                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Buckets []*ListSessionsResponse_GroupByBucket `protobuf:"bytes,3,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *ListSessionsResponse_GroupByBucket) Reset() {
	*x = ListSessionsResponse_GroupByBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_sessions_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSessionsResponse_GroupByBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsResponse_GroupByBucket) ProtoMessage() {}

func (x *ListSessionsResponse_GroupByBucket) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_sessions_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsResponse_GroupByBucket.ProtoReflect.Descriptor instead.
func (*ListSessionsResponse_GroupByBucket) Descriptor() ([]byte, []int) {
	return file_core_v1_sessions_proto_rawDescGZIP(), []int{2, 2}
}

func (x *ListSessionsResponse_GroupByBucket) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ListSessionsResponse_GroupByBucket) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListSessionsResponse_GroupByBucket) GetBuckets() []*ListSessionsResponse_GroupByBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type ListSessionsResponse_DateBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datetime string                                `protobuf:"bytes,1,opt,name=datetime,proto3" json:"datetime,omitempty"`
	Count    int32                                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Buckets  []*ListSessionsResponse_GroupByBucket `protobuf:"bytes,3,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *ListSessionsResponse_DateBucket) Reset() {
	*x = ListSessionsResponse_DateBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_sessions_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSessionsResponse_DateBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionsResponse_DateBucket) ProtoMessage() {}

func (x *ListSessionsResponse_DateBucket) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_sessions_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionsResponse_DateBucket.ProtoReflect.Descriptor instead.
func (*ListSessionsResponse_DateBucket) Descriptor() ([]byte, []int) {
	return file_core_v1_sessions_proto_rawDescGZIP(), []int{2, 3}
}

func (x *ListSessionsResponse_DateBucket) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *ListSessionsResponse_DateBucket) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListSessionsResponse_DateBucket) GetBuckets() []*ListSessionsResponse_GroupByBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

var File_core_v1_sessions_proto protoreflect.FileDescriptor

var file_core_v1_sessions_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbc, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xba, 0x48, 0x15, 0x72, 0x13, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2d, 0x0a, 0x07, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x4c, 0x6f, 0x67, 0x52,
	0x07, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0xc3, 0x02, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xba, 0x48, 0x08, 0x1a, 0x06, 0x18, 0xa0,
	0x8d, 0x06, 0x20, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x12, 0x2d, 0x0a, 0x12, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x45, 0x0a, 0x19, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x03, 0x52, 0x16,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xf6, 0x19, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x48, 0x69, 0x74, 0x73, 0x12, 0x3a,
	0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xc8, 0x15, 0x0a, 0x0c, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x6c,
	0x6f, 0x67, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x63, 0x0a,
	0x1b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x18, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x63, 0x0a, 0x1b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x18, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x47,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x53, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x72, 0x75,
	0x63, 0x65, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x14, 0x72, 0x65, 0x73,
	0x6f, 0x72, 0x75, 0x63, 0x65, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65,
	0x73, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b,
	0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0a, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x49, 0x64, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5f, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x13, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x3f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x0c, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4a,
	0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x65, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x65, 0x6e,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x18, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x12, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x73,
	0x12, 0x5a, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x14, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x60, 0x0a, 0x19,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x17, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x5a,
	0x0a, 0x16, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x14, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x1e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x1b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x74, 0x0a, 0x24, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x16, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x14, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x1a, 0x30, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x7e, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x45, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x85, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22,
	0x2f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x80, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x4a, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x90, 0x02, 0x01, 0x12, 0x50, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x40, 0x5a, 0x3e, 0x62, 0x75, 0x66, 0x2e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
	0x31, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_core_v1_sessions_proto_rawDescOnce sync.Once
	file_core_v1_sessions_proto_rawDescData = file_core_v1_sessions_proto_rawDesc
)

func file_core_v1_sessions_proto_rawDescGZIP() []byte {
	file_core_v1_sessions_proto_rawDescOnce.Do(func() {
		file_core_v1_sessions_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_v1_sessions_proto_rawDescData)
	})
	return file_core_v1_sessions_proto_rawDescData
}

var file_core_v1_sessions_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_core_v1_sessions_proto_goTypes = []interface{}{
	(*SessionObject)(nil),                      // 0: core.v1.SessionObject
	(*ListSessionsRequest)(nil),                // 1: core.v1.ListSessionsRequest
	(*ListSessionsResponse)(nil),               // 2: core.v1.ListSessionsResponse
	(*GetSessionRequest)(nil),                  // 3: core.v1.GetSessionRequest
	(*GetSessionResponse)(nil),                 // 4: core.v1.GetSessionResponse
	(*CancelSessionRequest)(nil),               // 5: core.v1.CancelSessionRequest
	(*CancelSessionResponse)(nil),              // 6: core.v1.CancelSessionResponse
	(*ListSessionsResponse_Aggregations)(nil),  // 7: core.v1.ListSessionsResponse.Aggregations
	(*ListSessionsResponse_Bucket)(nil),        // 8: core.v1.ListSessionsResponse.Bucket
	(*ListSessionsResponse_GroupByBucket)(nil), // 9: core.v1.ListSessionsResponse.GroupByBucket
	(*ListSessionsResponse_DateBucket)(nil),    // 10: core.v1.ListSessionsResponse.DateBucket
	(*timestamppb.Timestamp)(nil),              // 11: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                // 12: google.protobuf.Duration
	(*Network)(nil),                            // 13: core.v1.Network
	(*SidecarLog)(nil),                         // 14: core.v1.SidecarLog
	(*UserLog)(nil),                            // 15: core.v1.UserLog
	(*ResourceLog)(nil),                        // 16: core.v1.ResourceLog
	(*ListMetadata)(nil),                       // 17: core.v1.ListMetadata
}
var file_core_v1_sessions_proto_depIdxs = []int32{
	11, // 0: core.v1.SessionObject.start_time:type_name -> google.protobuf.Timestamp
	11, // 1: core.v1.SessionObject.end_time:type_name -> google.protobuf.Timestamp
	12, // 2: core.v1.SessionObject.duration:type_name -> google.protobuf.Duration
	13, // 3: core.v1.SessionObject.network:type_name -> core.v1.Network
	14, // 4: core.v1.SessionObject.sidecar:type_name -> core.v1.SidecarLog
	15, // 5: core.v1.SessionObject.user:type_name -> core.v1.UserLog
	16, // 6: core.v1.SessionObject.resource:type_name -> core.v1.ResourceLog
	0,  // 7: core.v1.ListSessionsResponse.sessions:type_name -> core.v1.SessionObject
	7,  // 8: core.v1.ListSessionsResponse.aggregations:type_name -> core.v1.ListSessionsResponse.Aggregations
	17, // 9: core.v1.ListSessionsResponse.list_metadata:type_name -> core.v1.ListMetadata
	10, // 10: core.v1.ListSessionsResponse.Aggregations.logs_over_time:type_name -> core.v1.ListSessionsResponse.DateBucket
	8,  // 11: core.v1.ListSessionsResponse.Aggregations.session_types:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 12: core.v1.ListSessionsResponse.Aggregations.session_ids:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 13: core.v1.ListSessionsResponse.Aggregations.session_client_ip_addresses:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 14: core.v1.ListSessionsResponse.Aggregations.session_server_ip_addresses:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 15: core.v1.ListSessionsResponse.Aggregations.query_fingerprints:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 16: core.v1.ListSessionsResponse.Aggregations.query_received:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 17: core.v1.ListSessionsResponse.Aggregations.query_sent:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 18: core.v1.ListSessionsResponse.Aggregations.resource_ids:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 19: core.v1.ListSessionsResponse.Aggregations.resource_names:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 20: core.v1.ListSessionsResponse.Aggregations.resource_types:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 21: core.v1.ListSessionsResponse.Aggregations.resource_hostnames:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 22: core.v1.ListSessionsResponse.Aggregations.resoruce_technologies:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 23: core.v1.ListSessionsResponse.Aggregations.sidecar_names:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 24: core.v1.ListSessionsResponse.Aggregations.sidecar_ids:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 25: core.v1.ListSessionsResponse.Aggregations.sidecar_technologies:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 26: core.v1.ListSessionsResponse.Aggregations.user_types:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 27: core.v1.ListSessionsResponse.Aggregations.user_sub_types:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 28: core.v1.ListSessionsResponse.Aggregations.user_emails:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 29: core.v1.ListSessionsResponse.Aggregations.user_usernames:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 30: core.v1.ListSessionsResponse.Aggregations.user_ids:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 31: core.v1.ListSessionsResponse.Aggregations.end_user_types:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 32: core.v1.ListSessionsResponse.Aggregations.end_user_names:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 33: core.v1.ListSessionsResponse.Aggregations.end_user_emails:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 34: core.v1.ListSessionsResponse.Aggregations.triggered_policy_ids:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 35: core.v1.ListSessionsResponse.Aggregations.triggered_policy_names:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 36: core.v1.ListSessionsResponse.Aggregations.triggered_policy_statuses:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 37: core.v1.ListSessionsResponse.Aggregations.triggered_policy_types:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 38: core.v1.ListSessionsResponse.Aggregations.response_data_volumes:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 39: core.v1.ListSessionsResponse.Aggregations.response_returned_column_names:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 40: core.v1.ListSessionsResponse.Aggregations.response_returned_column_data_labels:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 41: core.v1.ListSessionsResponse.Aggregations.response_rows_sent:type_name -> core.v1.ListSessionsResponse.Bucket
	8,  // 42: core.v1.ListSessionsResponse.Aggregations.response_rows_received:type_name -> core.v1.ListSessionsResponse.Bucket
	9,  // 43: core.v1.ListSessionsResponse.GroupByBucket.buckets:type_name -> core.v1.ListSessionsResponse.GroupByBucket
	9,  // 44: core.v1.ListSessionsResponse.DateBucket.buckets:type_name -> core.v1.ListSessionsResponse.GroupByBucket
	1,  // 45: core.v1.SessionService.ListSessions:input_type -> core.v1.ListSessionsRequest
	3,  // 46: core.v1.SessionService.GetSession:input_type -> core.v1.GetSessionRequest
	5,  // 47: core.v1.SessionService.CancelSession:input_type -> core.v1.CancelSessionRequest
	2,  // 48: core.v1.SessionService.ListSessions:output_type -> core.v1.ListSessionsResponse
	4,  // 49: core.v1.SessionService.GetSession:output_type -> core.v1.GetSessionResponse
	6,  // 50: core.v1.SessionService.CancelSession:output_type -> core.v1.CancelSessionResponse
	48, // [48:51] is the sub-list for method output_type
	45, // [45:48] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_core_v1_sessions_proto_init() }
func file_core_v1_sessions_proto_init() {
	if File_core_v1_sessions_proto != nil {
		return
	}
	file_core_v1_audit_proto_init()
	file_core_v1_list_metadata_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_core_v1_sessions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_sessions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_sessions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSessionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_sessions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_sessions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_sessions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_sessions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_sessions_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSessionsResponse_Aggregations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_sessions_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSessionsResponse_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_sessions_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSessionsResponse_GroupByBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_sessions_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSessionsResponse_DateBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_v1_sessions_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_core_v1_sessions_proto_goTypes,
		DependencyIndexes: file_core_v1_sessions_proto_depIdxs,
		MessageInfos:      file_core_v1_sessions_proto_msgTypes,
	}.Build()
	File_core_v1_sessions_proto = out.File
	file_core_v1_sessions_proto_rawDesc = nil
	file_core_v1_sessions_proto_goTypes = nil
	file_core_v1_sessions_proto_depIdxs = nil
}
