// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: core/v1/audit.proto

package corev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicyType int32

const (
	PolicyType_POLICY_TYPE_UNSPECIFIED PolicyType = 0
	PolicyType_POLICY_TYPE_FILTER      PolicyType = 1
	PolicyType_POLICY_TYPE_DECRYPT     PolicyType = 2
	PolicyType_POLICY_TYPE_MASK        PolicyType = 3
	PolicyType_POLICY_TYPE_BLOCK       PolicyType = 4
	PolicyType_POLICY_TYPE_ALLOW       PolicyType = 5
)

// Enum value maps for PolicyType.
var (
	PolicyType_name = map[int32]string{
		0: "POLICY_TYPE_UNSPECIFIED",
		1: "POLICY_TYPE_FILTER",
		2: "POLICY_TYPE_DECRYPT",
		3: "POLICY_TYPE_MASK",
		4: "POLICY_TYPE_BLOCK",
		5: "POLICY_TYPE_ALLOW",
	}
	PolicyType_value = map[string]int32{
		"POLICY_TYPE_UNSPECIFIED": 0,
		"POLICY_TYPE_FILTER":      1,
		"POLICY_TYPE_DECRYPT":     2,
		"POLICY_TYPE_MASK":        3,
		"POLICY_TYPE_BLOCK":       4,
		"POLICY_TYPE_ALLOW":       5,
	}
)

func (x PolicyType) Enum() *PolicyType {
	p := new(PolicyType)
	*p = x
	return p
}

func (x PolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_core_v1_audit_proto_enumTypes[0].Descriptor()
}

func (PolicyType) Type() protoreflect.EnumType {
	return &file_core_v1_audit_proto_enumTypes[0]
}

func (x PolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyType.Descriptor instead.
func (PolicyType) EnumDescriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{0}
}

type HardwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelName             string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	ModelIdentifier       string `protobuf:"bytes,2,opt,name=model_identifier,json=modelIdentifier,proto3" json:"model_identifier,omitempty"`
	ModelNumber           string `protobuf:"bytes,3,opt,name=model_number,json=modelNumber,proto3" json:"model_number,omitempty"`
	SystemFirmwareVersion string `protobuf:"bytes,4,opt,name=system_firmware_version,json=systemFirmwareVersion,proto3" json:"system_firmware_version,omitempty"`
	OsLoaderVersion       string `protobuf:"bytes,5,opt,name=os_loader_version,json=osLoaderVersion,proto3" json:"os_loader_version,omitempty"`
	SerialNumber          string `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	HardwareUuid          string `protobuf:"bytes,7,opt,name=hardware_uuid,json=hardwareUuid,proto3" json:"hardware_uuid,omitempty"`
	ProvisioningUdid      string `protobuf:"bytes,8,opt,name=provisioning_udid,json=provisioningUdid,proto3" json:"provisioning_udid,omitempty"`
	ActivationLockStatus  string `protobuf:"bytes,9,opt,name=activation_lock_status,json=activationLockStatus,proto3" json:"activation_lock_status,omitempty"`
}

func (x *HardwareInfo) Reset() {
	*x = HardwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareInfo) ProtoMessage() {}

func (x *HardwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareInfo.ProtoReflect.Descriptor instead.
func (*HardwareInfo) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{0}
}

func (x *HardwareInfo) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *HardwareInfo) GetModelIdentifier() string {
	if x != nil {
		return x.ModelIdentifier
	}
	return ""
}

func (x *HardwareInfo) GetModelNumber() string {
	if x != nil {
		return x.ModelNumber
	}
	return ""
}

func (x *HardwareInfo) GetSystemFirmwareVersion() string {
	if x != nil {
		return x.SystemFirmwareVersion
	}
	return ""
}

func (x *HardwareInfo) GetOsLoaderVersion() string {
	if x != nil {
		return x.OsLoaderVersion
	}
	return ""
}

func (x *HardwareInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *HardwareInfo) GetHardwareUuid() string {
	if x != nil {
		return x.HardwareUuid
	}
	return ""
}

func (x *HardwareInfo) GetProvisioningUdid() string {
	if x != nil {
		return x.ProvisioningUdid
	}
	return ""
}

func (x *HardwareInfo) GetActivationLockStatus() string {
	if x != nil {
		return x.ActivationLockStatus
	}
	return ""
}

type SoftwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemVersion             string `protobuf:"bytes,1,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	KernelVersion             string `protobuf:"bytes,2,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	BootVolume                string `protobuf:"bytes,3,opt,name=boot_volume,json=bootVolume,proto3" json:"boot_volume,omitempty"`
	BootMode                  string `protobuf:"bytes,4,opt,name=boot_mode,json=bootMode,proto3" json:"boot_mode,omitempty"`
	ComputerName              string `protobuf:"bytes,5,opt,name=computer_name,json=computerName,proto3" json:"computer_name,omitempty"`
	UserName                  string `protobuf:"bytes,6,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	SecureVirtualMemory       string `protobuf:"bytes,7,opt,name=secure_virtual_memory,json=secureVirtualMemory,proto3" json:"secure_virtual_memory,omitempty"`
	SystemIntegrityProtection string `protobuf:"bytes,8,opt,name=system_integrity_protection,json=systemIntegrityProtection,proto3" json:"system_integrity_protection,omitempty"`
	TimeSinceBoot             string `protobuf:"bytes,9,opt,name=time_since_boot,json=timeSinceBoot,proto3" json:"time_since_boot,omitempty"`
}

func (x *SoftwareInfo) Reset() {
	*x = SoftwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareInfo) ProtoMessage() {}

func (x *SoftwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareInfo.ProtoReflect.Descriptor instead.
func (*SoftwareInfo) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{1}
}

func (x *SoftwareInfo) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *SoftwareInfo) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *SoftwareInfo) GetBootVolume() string {
	if x != nil {
		return x.BootVolume
	}
	return ""
}

func (x *SoftwareInfo) GetBootMode() string {
	if x != nil {
		return x.BootMode
	}
	return ""
}

func (x *SoftwareInfo) GetComputerName() string {
	if x != nil {
		return x.ComputerName
	}
	return ""
}

func (x *SoftwareInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *SoftwareInfo) GetSecureVirtualMemory() string {
	if x != nil {
		return x.SecureVirtualMemory
	}
	return ""
}

func (x *SoftwareInfo) GetSystemIntegrityProtection() string {
	if x != nil {
		return x.SystemIntegrityProtection
	}
	return ""
}

func (x *SoftwareInfo) GetTimeSinceBoot() string {
	if x != nil {
		return x.TimeSinceBoot
	}
	return ""
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Software *SoftwareInfo `protobuf:"bytes,1,opt,name=software,proto3" json:"software,omitempty"`
	Hardware *HardwareInfo `protobuf:"bytes,2,opt,name=hardware,proto3" json:"hardware,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceInfo) GetSoftware() *SoftwareInfo {
	if x != nil {
		return x.Software
	}
	return nil
}

func (x *DeviceInfo) GetHardware() *HardwareInfo {
	if x != nil {
		return x.Hardware
	}
	return nil
}

type RowLevelMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatastoreId            string                 `protobuf:"bytes,1,opt,name=datastore_id,json=datastoreId,proto3" json:"datastore_id,omitempty"`
	DatastoreName          string                 `protobuf:"bytes,2,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
	EndUserId              string                 `protobuf:"bytes,3,opt,name=end_user_id,json=endUserId,proto3" json:"end_user_id,omitempty"`
	EndUserDbUsername      string                 `protobuf:"bytes,4,opt,name=end_user_db_username,json=endUserDbUsername,proto3" json:"end_user_db_username,omitempty"`
	UserId                 string                 `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DbUser                 string                 `protobuf:"bytes,6,opt,name=db_user,json=dbUser,proto3" json:"db_user,omitempty"`
	DbName                 string                 `protobuf:"bytes,7,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	SchemaName             string                 `protobuf:"bytes,8,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	TableName              string                 `protobuf:"bytes,9,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Path                   string                 `protobuf:"bytes,10,opt,name=path,proto3" json:"path,omitempty"`
	HashedRowLevelValue    string                 `protobuf:"bytes,11,opt,name=hashed_row_level_value,json=hashedRowLevelValue,proto3" json:"hashed_row_level_value,omitempty"`
	ClearTextRowLevelValue string                 `protobuf:"bytes,12,opt,name=clear_text_row_level_value,json=clearTextRowLevelValue,proto3" json:"clear_text_row_level_value,omitempty"`
	Ts                     *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=ts,proto3" json:"ts,omitempty"`
	Counter                int64                  `protobuf:"varint,14,opt,name=counter,proto3" json:"counter,omitempty"`
	ReturnedRows           int64                  `protobuf:"varint,15,opt,name=returned_rows,json=returnedRows,proto3" json:"returned_rows,omitempty"`
	Timebucket             *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=timebucket,proto3" json:"timebucket,omitempty"`
}

func (x *RowLevelMetric) Reset() {
	*x = RowLevelMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowLevelMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowLevelMetric) ProtoMessage() {}

func (x *RowLevelMetric) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowLevelMetric.ProtoReflect.Descriptor instead.
func (*RowLevelMetric) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{3}
}

func (x *RowLevelMetric) GetDatastoreId() string {
	if x != nil {
		return x.DatastoreId
	}
	return ""
}

func (x *RowLevelMetric) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

func (x *RowLevelMetric) GetEndUserId() string {
	if x != nil {
		return x.EndUserId
	}
	return ""
}

func (x *RowLevelMetric) GetEndUserDbUsername() string {
	if x != nil {
		return x.EndUserDbUsername
	}
	return ""
}

func (x *RowLevelMetric) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RowLevelMetric) GetDbUser() string {
	if x != nil {
		return x.DbUser
	}
	return ""
}

func (x *RowLevelMetric) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *RowLevelMetric) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *RowLevelMetric) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *RowLevelMetric) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RowLevelMetric) GetHashedRowLevelValue() string {
	if x != nil {
		return x.HashedRowLevelValue
	}
	return ""
}

func (x *RowLevelMetric) GetClearTextRowLevelValue() string {
	if x != nil {
		return x.ClearTextRowLevelValue
	}
	return ""
}

func (x *RowLevelMetric) GetTs() *timestamppb.Timestamp {
	if x != nil {
		return x.Ts
	}
	return nil
}

func (x *RowLevelMetric) GetCounter() int64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

func (x *RowLevelMetric) GetReturnedRows() int64 {
	if x != nil {
		return x.ReturnedRows
	}
	return 0
}

func (x *RowLevelMetric) GetTimebucket() *timestamppb.Timestamp {
	if x != nil {
		return x.Timebucket
	}
	return nil
}

type TriggeredPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId       string     `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Owners         []string   `protobuf:"bytes,2,rep,name=owners,proto3" json:"owners,omitempty"`
	Notify         string     `protobuf:"bytes,3,opt,name=notify,proto3" json:"notify,omitempty"`
	PolicyType     PolicyType `protobuf:"varint,4,opt,name=policy_type,json=policyType,proto3,enum=core.v1.PolicyType" json:"policy_type,omitempty"`
	Reason         string     `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	ContextualData string     `protobuf:"bytes,6,opt,name=contextual_data,json=contextualData,proto3" json:"contextual_data,omitempty"`
	PolicyStatus   string     `protobuf:"bytes,7,opt,name=policy_status,json=policyStatus,proto3" json:"policy_status,omitempty"`
}

func (x *TriggeredPolicy) Reset() {
	*x = TriggeredPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggeredPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggeredPolicy) ProtoMessage() {}

func (x *TriggeredPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggeredPolicy.ProtoReflect.Descriptor instead.
func (*TriggeredPolicy) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{4}
}

func (x *TriggeredPolicy) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *TriggeredPolicy) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *TriggeredPolicy) GetNotify() string {
	if x != nil {
		return x.Notify
	}
	return ""
}

func (x *TriggeredPolicy) GetPolicyType() PolicyType {
	if x != nil {
		return x.PolicyType
	}
	return PolicyType_POLICY_TYPE_UNSPECIFIED
}

func (x *TriggeredPolicy) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *TriggeredPolicy) GetContextualData() string {
	if x != nil {
		return x.ContextualData
	}
	return ""
}

func (x *TriggeredPolicy) GetPolicyStatus() string {
	if x != nil {
		return x.PolicyStatus
	}
	return ""
}

type TriggeredFilterPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval string `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	Limit    int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Count    int64  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TriggeredFilterPolicy) Reset() {
	*x = TriggeredFilterPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggeredFilterPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggeredFilterPolicy) ProtoMessage() {}

func (x *TriggeredFilterPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggeredFilterPolicy.ProtoReflect.Descriptor instead.
func (*TriggeredFilterPolicy) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{5}
}

func (x *TriggeredFilterPolicy) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

func (x *TriggeredFilterPolicy) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TriggeredFilterPolicy) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TriggeredDecryptionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnPath string `protobuf:"bytes,1,opt,name=column_path,json=columnPath,proto3" json:"column_path,omitempty"`
}

func (x *TriggeredDecryptionPolicy) Reset() {
	*x = TriggeredDecryptionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggeredDecryptionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggeredDecryptionPolicy) ProtoMessage() {}

func (x *TriggeredDecryptionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggeredDecryptionPolicy.ProtoReflect.Descriptor instead.
func (*TriggeredDecryptionPolicy) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{6}
}

func (x *TriggeredDecryptionPolicy) GetColumnPath() string {
	if x != nil {
		return x.ColumnPath
	}
	return ""
}

type TriggeredMaskingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnPath  string `protobuf:"bytes,1,opt,name=column_path,json=columnPath,proto3" json:"column_path,omitempty"`
	MaskingType string `protobuf:"bytes,2,opt,name=masking_type,json=maskingType,proto3" json:"masking_type,omitempty"`
	Typesafe    bool   `protobuf:"varint,3,opt,name=typesafe,proto3" json:"typesafe,omitempty"`
}

func (x *TriggeredMaskingPolicy) Reset() {
	*x = TriggeredMaskingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggeredMaskingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggeredMaskingPolicy) ProtoMessage() {}

func (x *TriggeredMaskingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggeredMaskingPolicy.ProtoReflect.Descriptor instead.
func (*TriggeredMaskingPolicy) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{7}
}

func (x *TriggeredMaskingPolicy) GetColumnPath() string {
	if x != nil {
		return x.ColumnPath
	}
	return ""
}

func (x *TriggeredMaskingPolicy) GetMaskingType() string {
	if x != nil {
		return x.MaskingType
	}
	return ""
}

func (x *TriggeredMaskingPolicy) GetTypesafe() bool {
	if x != nil {
		return x.Typesafe
	}
	return false
}

type TriggeredBlockPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectType              string   `protobuf:"bytes,1,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	Path                    string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	ObjectPaths             []string `protobuf:"bytes,3,rep,name=object_paths,json=objectPaths,proto3" json:"object_paths,omitempty"`
	Multiple                bool     `protobuf:"varint,4,opt,name=multiple,proto3" json:"multiple,omitempty"`
	Action                  string   `protobuf:"bytes,5,opt,name=action,proto3" json:"action,omitempty"`
	DatastoreIsDefaultBlock bool     `protobuf:"varint,6,opt,name=datastore_is_default_block,json=datastoreIsDefaultBlock,proto3" json:"datastore_is_default_block,omitempty"`
}

func (x *TriggeredBlockPolicy) Reset() {
	*x = TriggeredBlockPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggeredBlockPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggeredBlockPolicy) ProtoMessage() {}

func (x *TriggeredBlockPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggeredBlockPolicy.ProtoReflect.Descriptor instead.
func (*TriggeredBlockPolicy) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{8}
}

func (x *TriggeredBlockPolicy) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *TriggeredBlockPolicy) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TriggeredBlockPolicy) GetObjectPaths() []string {
	if x != nil {
		return x.ObjectPaths
	}
	return nil
}

func (x *TriggeredBlockPolicy) GetMultiple() bool {
	if x != nil {
		return x.Multiple
	}
	return false
}

func (x *TriggeredBlockPolicy) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *TriggeredBlockPolicy) GetDatastoreIsDefaultBlock() bool {
	if x != nil {
		return x.DatastoreIsDefaultBlock
	}
	return false
}

type TiggeredAllowPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectType string `protobuf:"bytes,1,opt,name=object_type,json=objectType,proto3" json:"object_type,omitempty"`
	Path       string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *TiggeredAllowPolicy) Reset() {
	*x = TiggeredAllowPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TiggeredAllowPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TiggeredAllowPolicy) ProtoMessage() {}

func (x *TiggeredAllowPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TiggeredAllowPolicy.ProtoReflect.Descriptor instead.
func (*TiggeredAllowPolicy) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{9}
}

func (x *TiggeredAllowPolicy) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *TiggeredAllowPolicy) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Severity string `protobuf:"bytes,1,opt,name=severity,proto3" json:"severity,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Details  string `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{10}
}

func (x *Error) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTime                      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SidecarProcessingTime          *durationpb.Duration   `protobuf:"bytes,3,opt,name=sidecar_processing_time,json=sidecarProcessingTime,proto3" json:"sidecar_processing_time,omitempty"`
	DataStoreStartTime             *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=data_store_start_time,json=dataStoreStartTime,proto3" json:"data_store_start_time,omitempty"`
	DataStoreEndTime               *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=data_store_end_time,json=dataStoreEndTime,proto3" json:"data_store_end_time,omitempty"`
	DataStoreProcessingTime        *durationpb.Duration   `protobuf:"bytes,6,opt,name=data_store_processing_time,json=dataStoreProcessingTime,proto3" json:"data_store_processing_time,omitempty"`
	Query                          string                 `protobuf:"bytes,7,opt,name=query,proto3" json:"query,omitempty"`
	Success                        bool                   `protobuf:"varint,8,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage                   string                 `protobuf:"bytes,9,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	StamentType                    string                 `protobuf:"bytes,10,opt,name=stament_type,json=stamentType,proto3" json:"stament_type,omitempty"`
	ReturnedTables                 []string               `protobuf:"bytes,11,rep,name=returned_tables,json=returnedTables,proto3" json:"returned_tables,omitempty"`
	ReturnedColumns                []*Column              `protobuf:"bytes,12,rep,name=returned_columns,json=returnedColumns,proto3" json:"returned_columns,omitempty"`
	DataVolume                     uint64                 `protobuf:"varint,13,opt,name=data_volume,json=dataVolume,proto3" json:"data_volume,omitempty"`
	EndUserId                      string                 `protobuf:"bytes,14,opt,name=end_user_id,json=endUserId,proto3" json:"end_user_id,omitempty"`
	EndUserDbUserName              string                 `protobuf:"bytes,15,opt,name=end_user_db_user_name,json=endUserDbUserName,proto3" json:"end_user_db_user_name,omitempty"`
	EndUserExternalIds             []string               `protobuf:"bytes,16,rep,name=end_user_external_ids,json=endUserExternalIds,proto3" json:"end_user_external_ids,omitempty"`
	PolicyAction                   string                 `protobuf:"bytes,17,opt,name=policy_action,json=policyAction,proto3" json:"policy_action,omitempty"`
	ReturnedRowsCount              int64                  `protobuf:"varint,18,opt,name=returned_rows_count,json=returnedRowsCount,proto3" json:"returned_rows_count,omitempty"`
	ReturnedRowsCountByServer      int64                  `protobuf:"varint,19,opt,name=returned_rows_count_by_server,json=returnedRowsCountByServer,proto3" json:"returned_rows_count_by_server,omitempty"`
	ReturnedRowsCountToUser        int64                  `protobuf:"varint,20,opt,name=returned_rows_count_to_user,json=returnedRowsCountToUser,proto3" json:"returned_rows_count_to_user,omitempty"`
	FilteredRowsCount              int64                  `protobuf:"varint,21,opt,name=filtered_rows_count,json=filteredRowsCount,proto3" json:"filtered_rows_count,omitempty"`
	TriggeredPolicies              []*TriggeredPolicy     `protobuf:"bytes,22,rep,name=triggered_policies,json=triggeredPolicies,proto3" json:"triggered_policies,omitempty"`
	TenantId                       string                 `protobuf:"bytes,23,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	RowLevelMetrics                []*RowLevelMetric      `protobuf:"bytes,24,rep,name=row_level_metrics,json=rowLevelMetrics,proto3" json:"row_level_metrics,omitempty"`
	TenantIdColumnName             string                 `protobuf:"bytes,25,opt,name=tenant_id_column_name,json=tenantIdColumnName,proto3" json:"tenant_id_column_name,omitempty"`
	TenantMismatch                 []string               `protobuf:"bytes,26,rep,name=tenant_mismatch,json=tenantMismatch,proto3" json:"tenant_mismatch,omitempty"`
	BucketName                     string                 `protobuf:"bytes,27,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	S3Action                       string                 `protobuf:"bytes,28,opt,name=s3_action,json=s3Action,proto3" json:"s3_action,omitempty"`
	ReturnedObjects                []*S3Object            `protobuf:"bytes,29,rep,name=returned_objects,json=returnedObjects,proto3" json:"returned_objects,omitempty"`
	SshAwsConnectionType           string                 `protobuf:"bytes,30,opt,name=ssh_aws_connection_type,json=sshAwsConnectionType,proto3" json:"ssh_aws_connection_type,omitempty"`
	SshAwsArn                      string                 `protobuf:"bytes,31,opt,name=ssh_aws_arn,json=sshAwsArn,proto3" json:"ssh_aws_arn,omitempty"`
	EndUserGroups                  []string               `protobuf:"bytes,32,rep,name=end_user_groups,json=endUserGroups,proto3" json:"end_user_groups,omitempty"`
	UserGroups                     []string               `protobuf:"bytes,33,rep,name=user_groups,json=userGroups,proto3" json:"user_groups,omitempty"`
	Groups                         []string               `protobuf:"bytes,34,rep,name=groups,proto3" json:"groups,omitempty"`
	Fingerprint                    string                 `protobuf:"bytes,35,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	DataDomains                    []*Domain              `protobuf:"bytes,36,rep,name=data_domains,json=dataDomains,proto3" json:"data_domains,omitempty"`
	RequestBody                    string                 `protobuf:"bytes,37,opt,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
	ResponseBody                   string                 `protobuf:"bytes,38,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
	RequestBodyEncrypted           bool                   `protobuf:"varint,39,opt,name=request_body_encrypted,json=requestBodyEncrypted,proto3" json:"request_body_encrypted,omitempty"`
	ResponseBodyEncrypted          bool                   `protobuf:"varint,40,opt,name=response_body_encrypted,json=responseBodyEncrypted,proto3" json:"response_body_encrypted,omitempty"`
	RequestBodyPostPoliciesAction  string                 `protobuf:"bytes,41,opt,name=request_body_post_policies_action,json=requestBodyPostPoliciesAction,proto3" json:"request_body_post_policies_action,omitempty"`
	ResponseBodyPostPoliciesAction string                 `protobuf:"bytes,42,opt,name=response_body_post_policies_action,json=responseBodyPostPoliciesAction,proto3" json:"response_body_post_policies_action,omitempty"`
}

func (x *LogRequest) Reset() {
	*x = LogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogRequest) ProtoMessage() {}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogRequest.ProtoReflect.Descriptor instead.
func (*LogRequest) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{11}
}

func (x *LogRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *LogRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *LogRequest) GetSidecarProcessingTime() *durationpb.Duration {
	if x != nil {
		return x.SidecarProcessingTime
	}
	return nil
}

func (x *LogRequest) GetDataStoreStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DataStoreStartTime
	}
	return nil
}

func (x *LogRequest) GetDataStoreEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DataStoreEndTime
	}
	return nil
}

func (x *LogRequest) GetDataStoreProcessingTime() *durationpb.Duration {
	if x != nil {
		return x.DataStoreProcessingTime
	}
	return nil
}

func (x *LogRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *LogRequest) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *LogRequest) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *LogRequest) GetStamentType() string {
	if x != nil {
		return x.StamentType
	}
	return ""
}

func (x *LogRequest) GetReturnedTables() []string {
	if x != nil {
		return x.ReturnedTables
	}
	return nil
}

func (x *LogRequest) GetReturnedColumns() []*Column {
	if x != nil {
		return x.ReturnedColumns
	}
	return nil
}

func (x *LogRequest) GetDataVolume() uint64 {
	if x != nil {
		return x.DataVolume
	}
	return 0
}

func (x *LogRequest) GetEndUserId() string {
	if x != nil {
		return x.EndUserId
	}
	return ""
}

func (x *LogRequest) GetEndUserDbUserName() string {
	if x != nil {
		return x.EndUserDbUserName
	}
	return ""
}

func (x *LogRequest) GetEndUserExternalIds() []string {
	if x != nil {
		return x.EndUserExternalIds
	}
	return nil
}

func (x *LogRequest) GetPolicyAction() string {
	if x != nil {
		return x.PolicyAction
	}
	return ""
}

func (x *LogRequest) GetReturnedRowsCount() int64 {
	if x != nil {
		return x.ReturnedRowsCount
	}
	return 0
}

func (x *LogRequest) GetReturnedRowsCountByServer() int64 {
	if x != nil {
		return x.ReturnedRowsCountByServer
	}
	return 0
}

func (x *LogRequest) GetReturnedRowsCountToUser() int64 {
	if x != nil {
		return x.ReturnedRowsCountToUser
	}
	return 0
}

func (x *LogRequest) GetFilteredRowsCount() int64 {
	if x != nil {
		return x.FilteredRowsCount
	}
	return 0
}

func (x *LogRequest) GetTriggeredPolicies() []*TriggeredPolicy {
	if x != nil {
		return x.TriggeredPolicies
	}
	return nil
}

func (x *LogRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *LogRequest) GetRowLevelMetrics() []*RowLevelMetric {
	if x != nil {
		return x.RowLevelMetrics
	}
	return nil
}

func (x *LogRequest) GetTenantIdColumnName() string {
	if x != nil {
		return x.TenantIdColumnName
	}
	return ""
}

func (x *LogRequest) GetTenantMismatch() []string {
	if x != nil {
		return x.TenantMismatch
	}
	return nil
}

func (x *LogRequest) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *LogRequest) GetS3Action() string {
	if x != nil {
		return x.S3Action
	}
	return ""
}

func (x *LogRequest) GetReturnedObjects() []*S3Object {
	if x != nil {
		return x.ReturnedObjects
	}
	return nil
}

func (x *LogRequest) GetSshAwsConnectionType() string {
	if x != nil {
		return x.SshAwsConnectionType
	}
	return ""
}

func (x *LogRequest) GetSshAwsArn() string {
	if x != nil {
		return x.SshAwsArn
	}
	return ""
}

func (x *LogRequest) GetEndUserGroups() []string {
	if x != nil {
		return x.EndUserGroups
	}
	return nil
}

func (x *LogRequest) GetUserGroups() []string {
	if x != nil {
		return x.UserGroups
	}
	return nil
}

func (x *LogRequest) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *LogRequest) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *LogRequest) GetDataDomains() []*Domain {
	if x != nil {
		return x.DataDomains
	}
	return nil
}

func (x *LogRequest) GetRequestBody() string {
	if x != nil {
		return x.RequestBody
	}
	return ""
}

func (x *LogRequest) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *LogRequest) GetRequestBodyEncrypted() bool {
	if x != nil {
		return x.RequestBodyEncrypted
	}
	return false
}

func (x *LogRequest) GetResponseBodyEncrypted() bool {
	if x != nil {
		return x.ResponseBodyEncrypted
	}
	return false
}

func (x *LogRequest) GetRequestBodyPostPoliciesAction() string {
	if x != nil {
		return x.RequestBodyPostPoliciesAction
	}
	return ""
}

func (x *LogRequest) GetResponseBodyPostPoliciesAction() string {
	if x != nil {
		return x.ResponseBodyPostPoliciesAction
	}
	return ""
}

type Session struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartTime               int64    `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	DatastoreId             string   `protobuf:"bytes,3,opt,name=datastore_id,json=datastoreId,proto3" json:"datastore_id,omitempty"`
	DatastoreName           string   `protobuf:"bytes,4,opt,name=datastore_name,json=datastoreName,proto3" json:"datastore_name,omitempty"`
	DatastoreTechnology     string   `protobuf:"bytes,5,opt,name=datastore_technology,json=datastoreTechnology,proto3" json:"datastore_technology,omitempty"`
	DatastoreDeploymentType string   `protobuf:"bytes,6,opt,name=datastore_deployment_type,json=datastoreDeploymentType,proto3" json:"datastore_deployment_type,omitempty"`
	ServerIpAddress         string   `protobuf:"bytes,7,opt,name=server_ip_address,json=serverIpAddress,proto3" json:"server_ip_address,omitempty"`
	ClientIpAddress         string   `protobuf:"bytes,8,opt,name=client_ip_address,json=clientIpAddress,proto3" json:"client_ip_address,omitempty"`
	UserId                  string   `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserType                string   `protobuf:"bytes,10,opt,name=user_type,json=userType,proto3" json:"user_type,omitempty"`
	DbUser                  string   `protobuf:"bytes,11,opt,name=db_user,json=dbUser,proto3" json:"db_user,omitempty"`
	DbName                  string   `protobuf:"bytes,12,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	ApplicationName         string   `protobuf:"bytes,13,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	Schemas                 []string `protobuf:"bytes,14,rep,name=schemas,proto3" json:"schemas,omitempty"`
	NativeRoleId            string   `protobuf:"bytes,15,opt,name=native_role_id,json=nativeRoleId,proto3" json:"native_role_id,omitempty"`
	NativeRoleAssignment    string   `protobuf:"bytes,16,opt,name=native_role_assignment,json=nativeRoleAssignment,proto3" json:"native_role_assignment,omitempty"`
	SidecarId               string   `protobuf:"bytes,17,opt,name=sidecar_id,json=sidecarId,proto3" json:"sidecar_id,omitempty"`
	SidecarName             string   `protobuf:"bytes,18,opt,name=sidecar_name,json=sidecarName,proto3" json:"sidecar_name,omitempty"`
	SidecarTechnology       string   `protobuf:"bytes,19,opt,name=sidecar_technology,json=sidecarTechnology,proto3" json:"sidecar_technology,omitempty"`
	AwsAccountId            string   `protobuf:"bytes,20,opt,name=aws_account_id,json=awsAccountId,proto3" json:"aws_account_id,omitempty"`
	AwsRegion               string   `protobuf:"bytes,21,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	AwsEc2InstanceId        string   `protobuf:"bytes,22,opt,name=aws_ec2_instance_id,json=awsEc2InstanceId,proto3" json:"aws_ec2_instance_id,omitempty"`
	AwsEcsClusterName       string   `protobuf:"bytes,23,opt,name=aws_ecs_cluster_name,json=awsEcsClusterName,proto3" json:"aws_ecs_cluster_name,omitempty"`
	AwsEcsClusterArn        string   `protobuf:"bytes,24,opt,name=aws_ecs_cluster_arn,json=awsEcsClusterArn,proto3" json:"aws_ecs_cluster_arn,omitempty"`
	AwsEcsServiceName       string   `protobuf:"bytes,25,opt,name=aws_ecs_service_name,json=awsEcsServiceName,proto3" json:"aws_ecs_service_name,omitempty"`
	AwsEcsServiceArn        string   `protobuf:"bytes,26,opt,name=aws_ecs_service_arn,json=awsEcsServiceArn,proto3" json:"aws_ecs_service_arn,omitempty"`
	AwsEcsTaskId            string   `protobuf:"bytes,27,opt,name=aws_ecs_task_id,json=awsEcsTaskId,proto3" json:"aws_ecs_task_id,omitempty"`
	AwsEcsTaskArn           string   `protobuf:"bytes,28,opt,name=aws_ecs_task_arn,json=awsEcsTaskArn,proto3" json:"aws_ecs_task_arn,omitempty"`
	ContainerName           string   `protobuf:"bytes,29,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
}

func (x *Session) Reset() {
	*x = Session{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{12}
}

func (x *Session) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Session) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Session) GetDatastoreId() string {
	if x != nil {
		return x.DatastoreId
	}
	return ""
}

func (x *Session) GetDatastoreName() string {
	if x != nil {
		return x.DatastoreName
	}
	return ""
}

func (x *Session) GetDatastoreTechnology() string {
	if x != nil {
		return x.DatastoreTechnology
	}
	return ""
}

func (x *Session) GetDatastoreDeploymentType() string {
	if x != nil {
		return x.DatastoreDeploymentType
	}
	return ""
}

func (x *Session) GetServerIpAddress() string {
	if x != nil {
		return x.ServerIpAddress
	}
	return ""
}

func (x *Session) GetClientIpAddress() string {
	if x != nil {
		return x.ClientIpAddress
	}
	return ""
}

func (x *Session) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Session) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *Session) GetDbUser() string {
	if x != nil {
		return x.DbUser
	}
	return ""
}

func (x *Session) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *Session) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *Session) GetSchemas() []string {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *Session) GetNativeRoleId() string {
	if x != nil {
		return x.NativeRoleId
	}
	return ""
}

func (x *Session) GetNativeRoleAssignment() string {
	if x != nil {
		return x.NativeRoleAssignment
	}
	return ""
}

func (x *Session) GetSidecarId() string {
	if x != nil {
		return x.SidecarId
	}
	return ""
}

func (x *Session) GetSidecarName() string {
	if x != nil {
		return x.SidecarName
	}
	return ""
}

func (x *Session) GetSidecarTechnology() string {
	if x != nil {
		return x.SidecarTechnology
	}
	return ""
}

func (x *Session) GetAwsAccountId() string {
	if x != nil {
		return x.AwsAccountId
	}
	return ""
}

func (x *Session) GetAwsRegion() string {
	if x != nil {
		return x.AwsRegion
	}
	return ""
}

func (x *Session) GetAwsEc2InstanceId() string {
	if x != nil {
		return x.AwsEc2InstanceId
	}
	return ""
}

func (x *Session) GetAwsEcsClusterName() string {
	if x != nil {
		return x.AwsEcsClusterName
	}
	return ""
}

func (x *Session) GetAwsEcsClusterArn() string {
	if x != nil {
		return x.AwsEcsClusterArn
	}
	return ""
}

func (x *Session) GetAwsEcsServiceName() string {
	if x != nil {
		return x.AwsEcsServiceName
	}
	return ""
}

func (x *Session) GetAwsEcsServiceArn() string {
	if x != nil {
		return x.AwsEcsServiceArn
	}
	return ""
}

func (x *Session) GetAwsEcsTaskId() string {
	if x != nil {
		return x.AwsEcsTaskId
	}
	return ""
}

func (x *Session) GetAwsEcsTaskArn() string {
	if x != nil {
		return x.AwsEcsTaskArn
	}
	return ""
}

func (x *Session) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

type FormalLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DatastoreId string                 `protobuf:"bytes,2,opt,name=datastore_id,json=datastoreId,proto3" json:"datastore_id,omitempty"`
	Session     *Session               `protobuf:"bytes,3,opt,name=session,proto3" json:"session,omitempty"`
	Request     *LogRequest            `protobuf:"bytes,4,opt,name=request,proto3" json:"request,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Total       int64                  `protobuf:"varint,7,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *FormalLog) Reset() {
	*x = FormalLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormalLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormalLog) ProtoMessage() {}

func (x *FormalLog) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormalLog.ProtoReflect.Descriptor instead.
func (*FormalLog) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{13}
}

func (x *FormalLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FormalLog) GetDatastoreId() string {
	if x != nil {
		return x.DatastoreId
	}
	return ""
}

func (x *FormalLog) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *FormalLog) GetRequest() *LogRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *FormalLog) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FormalLog) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *FormalLog) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TenantLogsInfra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri            string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Password       string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Username       string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	MetricsRolePwd string `protobuf:"bytes,4,opt,name=metrics_role_pwd,json=metricsRolePwd,proto3" json:"metrics_role_pwd,omitempty"`
}

func (x *TenantLogsInfra) Reset() {
	*x = TenantLogsInfra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantLogsInfra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantLogsInfra) ProtoMessage() {}

func (x *TenantLogsInfra) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantLogsInfra.ProtoReflect.Descriptor instead.
func (*TenantLogsInfra) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{14}
}

func (x *TenantLogsInfra) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *TenantLogsInfra) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TenantLogsInfra) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TenantLogsInfra) GetMetricsRolePwd() string {
	if x != nil {
		return x.MetricsRolePwd
	}
	return ""
}

type LogStorageS3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S3FirehoseStreamArn string `protobuf:"bytes,1,opt,name=s3_firehose_stream_arn,json=s3FirehoseStreamArn,proto3" json:"s3_firehose_stream_arn,omitempty"`
}

func (x *LogStorageS3) Reset() {
	*x = LogStorageS3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogStorageS3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogStorageS3) ProtoMessage() {}

func (x *LogStorageS3) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogStorageS3.ProtoReflect.Descriptor instead.
func (*LogStorageS3) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{15}
}

func (x *LogStorageS3) GetS3FirehoseStreamArn() string {
	if x != nil {
		return x.S3FirehoseStreamArn
	}
	return ""
}

type CsvOrParquetColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColIndex int32  `protobuf:"varint,1,opt,name=col_index,json=colIndex,proto3" json:"col_index,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DataType string `protobuf:"bytes,3,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
}

func (x *CsvOrParquetColumn) Reset() {
	*x = CsvOrParquetColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvOrParquetColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvOrParquetColumn) ProtoMessage() {}

func (x *CsvOrParquetColumn) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvOrParquetColumn.ProtoReflect.Descriptor instead.
func (*CsvOrParquetColumn) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{16}
}

func (x *CsvOrParquetColumn) GetColIndex() int32 {
	if x != nil {
		return x.ColIndex
	}
	return 0
}

func (x *CsvOrParquetColumn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CsvOrParquetColumn) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FacesCount   int32  `protobuf:"varint,2,opt,name=faces_count,json=facesCount,proto3" json:"faces_count,omitempty"`
	Width        int32  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height       int32  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Type         string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	PolicyAction string `protobuf:"bytes,6,opt,name=policy_action,json=policyAction,proto3" json:"policy_action,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{17}
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Image) GetFacesCount() int32 {
	if x != nil {
		return x.FacesCount
	}
	return 0
}

func (x *Image) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Image) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Image) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Image) GetPolicyAction() string {
	if x != nil {
		return x.PolicyAction
	}
	return ""
}

type S3Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ContentType   string                `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentLength int64                 `protobuf:"varint,3,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	Columns       []*CsvOrParquetColumn `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	Image         *Image                `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *S3Object) Reset() {
	*x = S3Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Object) ProtoMessage() {}

func (x *S3Object) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Object.ProtoReflect.Descriptor instead.
func (*S3Object) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{18}
}

func (x *S3Object) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *S3Object) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *S3Object) GetContentLength() int64 {
	if x != nil {
		return x.ContentLength
	}
	return 0
}

func (x *S3Object) GetColumns() []*CsvOrParquetColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *S3Object) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

type GetAggregationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GetAggregationRequest) Reset() {
	*x = GetAggregationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationRequest) ProtoMessage() {}

func (x *GetAggregationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationRequest.ProtoReflect.Descriptor instead.
func (*GetAggregationRequest) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{19}
}

func (x *GetAggregationRequest) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type GetAggregationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetAggregationResponse) Reset() {
	*x = GetAggregationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregationResponse) ProtoMessage() {}

func (x *GetAggregationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregationResponse.ProtoReflect.Descriptor instead.
func (*GetAggregationResponse) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{20}
}

func (x *GetAggregationResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type ListLogsV3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit                  int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Query                  string   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	SortBy                 string   `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	StartTimestamp         string   `protobuf:"bytes,4,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp           string   `protobuf:"bytes,5,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	Cursor                 string   `protobuf:"bytes,6,opt,name=cursor,proto3" json:"cursor,omitempty"`
	HistogramInterval      string   `protobuf:"bytes,7,opt,name=histogram_interval,json=histogramInterval,proto3" json:"histogram_interval,omitempty"`
	HistogramGroupByFields []string `protobuf:"bytes,8,rep,name=histogram_group_by_fields,json=histogramGroupByFields,proto3" json:"histogram_group_by_fields,omitempty"`
}

func (x *ListLogsV3Request) Reset() {
	*x = ListLogsV3Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogsV3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogsV3Request) ProtoMessage() {}

func (x *ListLogsV3Request) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogsV3Request.ProtoReflect.Descriptor instead.
func (*ListLogsV3Request) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{21}
}

func (x *ListLogsV3Request) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListLogsV3Request) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListLogsV3Request) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListLogsV3Request) GetStartTimestamp() string {
	if x != nil {
		return x.StartTimestamp
	}
	return ""
}

func (x *ListLogsV3Request) GetEndTimestamp() string {
	if x != nil {
		return x.EndTimestamp
	}
	return ""
}

func (x *ListLogsV3Request) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *ListLogsV3Request) GetHistogramInterval() string {
	if x != nil {
		return x.HistogramInterval
	}
	return ""
}

func (x *ListLogsV3Request) GetHistogramGroupByFields() []string {
	if x != nil {
		return x.HistogramGroupByFields
	}
	return nil
}

type ListLogsV3Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs         []*Log                           `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	NumHits      int64                            `protobuf:"varint,2,opt,name=num_hits,json=numHits,proto3" json:"num_hits,omitempty"`
	Aggregations *ListLogsV3Response_Aggregations `protobuf:"bytes,3,opt,name=aggregations,proto3" json:"aggregations,omitempty"`
	ListMetadata *ListMetadata                    `protobuf:"bytes,4,opt,name=list_metadata,json=listMetadata,proto3" json:"list_metadata,omitempty"`
}

func (x *ListLogsV3Response) Reset() {
	*x = ListLogsV3Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogsV3Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogsV3Response) ProtoMessage() {}

func (x *ListLogsV3Response) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogsV3Response.ProtoReflect.Descriptor instead.
func (*ListLogsV3Response) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{22}
}

func (x *ListLogsV3Response) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ListLogsV3Response) GetNumHits() int64 {
	if x != nil {
		return x.NumHits
	}
	return 0
}

func (x *ListLogsV3Response) GetAggregations() *ListLogsV3Response_Aggregations {
	if x != nil {
		return x.Aggregations
	}
	return nil
}

func (x *ListLogsV3Response) GetListMetadata() *ListMetadata {
	if x != nil {
		return x.ListMetadata
	}
	return nil
}

type GetGroupByAggregationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query          string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	StartTimestamp string   `protobuf:"bytes,2,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	EndTimestamp   string   `protobuf:"bytes,3,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
	GroupByFields  []string `protobuf:"bytes,4,rep,name=group_by_fields,json=groupByFields,proto3" json:"group_by_fields,omitempty"`
}

func (x *GetGroupByAggregationRequest) Reset() {
	*x = GetGroupByAggregationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupByAggregationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupByAggregationRequest) ProtoMessage() {}

func (x *GetGroupByAggregationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupByAggregationRequest.ProtoReflect.Descriptor instead.
func (*GetGroupByAggregationRequest) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{23}
}

func (x *GetGroupByAggregationRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetGroupByAggregationRequest) GetStartTimestamp() string {
	if x != nil {
		return x.StartTimestamp
	}
	return ""
}

func (x *GetGroupByAggregationRequest) GetEndTimestamp() string {
	if x != nil {
		return x.EndTimestamp
	}
	return ""
}

func (x *GetGroupByAggregationRequest) GetGroupByFields() []string {
	if x != nil {
		return x.GroupByFields
	}
	return nil
}

type GetGroupByAggregationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*GetGroupByAggregationResponse_Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *GetGroupByAggregationResponse) Reset() {
	*x = GetGroupByAggregationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupByAggregationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupByAggregationResponse) ProtoMessage() {}

func (x *GetGroupByAggregationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupByAggregationResponse.ProtoReflect.Descriptor instead.
func (*GetGroupByAggregationResponse) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{24}
}

func (x *GetGroupByAggregationResponse) GetBuckets() []*GetGroupByAggregationResponse_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type SshSessionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data        []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	MessageType string                 `protobuf:"bytes,3,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
}

func (x *SshSessionData) Reset() {
	*x = SshSessionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SshSessionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshSessionData) ProtoMessage() {}

func (x *SshSessionData) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshSessionData.ProtoReflect.Descriptor instead.
func (*SshSessionData) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{25}
}

func (x *SshSessionData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SshSessionData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SshSessionData) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{26}
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Application) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

// coppied form backend/apis/logs/logs/v1/logs.proto
type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp         string                 `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SendAt            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=send_at,json=sendAt,proto3" json:"send_at,omitempty"`
	ReceivedAt        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`
	Session           *SessionLog            `protobuf:"bytes,5,opt,name=session,proto3" json:"session,omitempty"`
	Sidecar           *SidecarLog            `protobuf:"bytes,6,opt,name=sidecar,proto3" json:"sidecar,omitempty"`
	User              *UserLog               `protobuf:"bytes,7,opt,name=user,proto3" json:"user,omitempty"`
	Resource          *ResourceLog           `protobuf:"bytes,8,opt,name=resource,proto3" json:"resource,omitempty"`
	Request           *RequestLog            `protobuf:"bytes,9,opt,name=request,proto3" json:"request,omitempty"`
	Response          *ResponseLog           `protobuf:"bytes,10,opt,name=response,proto3" json:"response,omitempty"`
	Stream            *StreamLog             `protobuf:"bytes,11,opt,name=stream,proto3" json:"stream,omitempty"`
	EventType         string                 `protobuf:"bytes,12,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	TriggeredPolicies []*PolicyLog           `protobuf:"bytes,13,rep,name=triggered_policies,json=triggeredPolicies,proto3" json:"triggered_policies,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{27}
}

func (x *Log) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Log) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Log) GetSendAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SendAt
	}
	return nil
}

func (x *Log) GetReceivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedAt
	}
	return nil
}

func (x *Log) GetSession() *SessionLog {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *Log) GetSidecar() *SidecarLog {
	if x != nil {
		return x.Sidecar
	}
	return nil
}

func (x *Log) GetUser() *UserLog {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Log) GetResource() *ResourceLog {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *Log) GetRequest() *RequestLog {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Log) GetResponse() *ResponseLog {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Log) GetStream() *StreamLog {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *Log) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *Log) GetTriggeredPolicies() []*PolicyLog {
	if x != nil {
		return x.TriggeredPolicies
	}
	return nil
}

type PolicyLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type           string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Status         string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Reason         string   `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Notify         string   `protobuf:"bytes,5,opt,name=notify,proto3" json:"notify,omitempty"`
	Owners         []string `protobuf:"bytes,6,rep,name=owners,proto3" json:"owners,omitempty"`
	ContextualData string   `protobuf:"bytes,7,opt,name=contextual_data,json=contextualData,proto3" json:"contextual_data,omitempty"`
	Name           string   `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Description    string   `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PolicyLog) Reset() {
	*x = PolicyLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyLog) ProtoMessage() {}

func (x *PolicyLog) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyLog.ProtoReflect.Descriptor instead.
func (*PolicyLog) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{28}
}

func (x *PolicyLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PolicyLog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PolicyLog) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PolicyLog) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PolicyLog) GetNotify() string {
	if x != nil {
		return x.Notify
	}
	return ""
}

func (x *PolicyLog) GetOwners() []string {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *PolicyLog) GetContextualData() string {
	if x != nil {
		return x.ContextualData
	}
	return ""
}

func (x *PolicyLog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicyLog) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type StreamLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time *TimeInfo          `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Ssh  *StreamLog_SshData `protobuf:"bytes,2,opt,name=ssh,proto3" json:"ssh,omitempty"`
}

func (x *StreamLog) Reset() {
	*x = StreamLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLog) ProtoMessage() {}

func (x *StreamLog) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLog.ProtoReflect.Descriptor instead.
func (*StreamLog) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{29}
}

func (x *StreamLog) GetTime() *TimeInfo {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StreamLog) GetSsh() *StreamLog_SshData {
	if x != nil {
		return x.Ssh
	}
	return nil
}

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientIpAddress string `protobuf:"bytes,1,opt,name=client_ip_address,json=clientIpAddress,proto3" json:"client_ip_address,omitempty"`
	ServerIpAddress string `protobuf:"bytes,2,opt,name=server_ip_address,json=serverIpAddress,proto3" json:"server_ip_address,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{30}
}

func (x *Network) GetClientIpAddress() string {
	if x != nil {
		return x.ClientIpAddress
	}
	return ""
}

func (x *Network) GetServerIpAddress() string {
	if x != nil {
		return x.ServerIpAddress
	}
	return ""
}

type PolicySuspensionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId      string                           `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	UserId         string                           `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PolicyId       string                           `protobuf:"bytes,3,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Reason         string                           `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	Duration       *timestamppb.Timestamp           `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty"`
	CreatedAt      *timestamppb.Timestamp           `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp           `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Approval       *PolicySuspensionRequestApproval `protobuf:"bytes,10,opt,name=approval,proto3" json:"approval,omitempty"`
	SuspensionType string                           `protobuf:"bytes,11,opt,name=suspension_type,json=suspensionType,proto3" json:"suspension_type,omitempty"`
	LogId          string                           `protobuf:"bytes,12,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	Query          string                           `protobuf:"bytes,13,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *PolicySuspensionRequest) Reset() {
	*x = PolicySuspensionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySuspensionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySuspensionRequest) ProtoMessage() {}

func (x *PolicySuspensionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySuspensionRequest.ProtoReflect.Descriptor instead.
func (*PolicySuspensionRequest) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{31}
}

func (x *PolicySuspensionRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *PolicySuspensionRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PolicySuspensionRequest) GetPolicyId() string {
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *PolicySuspensionRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PolicySuspensionRequest) GetDuration() *timestamppb.Timestamp {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *PolicySuspensionRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PolicySuspensionRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PolicySuspensionRequest) GetApproval() *PolicySuspensionRequestApproval {
	if x != nil {
		return x.Approval
	}
	return nil
}

func (x *PolicySuspensionRequest) GetSuspensionType() string {
	if x != nil {
		return x.SuspensionType
	}
	return ""
}

func (x *PolicySuspensionRequest) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *PolicySuspensionRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type PolicySuspensionRequestApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApproverId string                 `protobuf:"bytes,1,opt,name=approver_id,json=approverId,proto3" json:"approver_id,omitempty"`
	Reason     string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *PolicySuspensionRequestApproval) Reset() {
	*x = PolicySuspensionRequestApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicySuspensionRequestApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicySuspensionRequestApproval) ProtoMessage() {}

func (x *PolicySuspensionRequestApproval) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicySuspensionRequestApproval.ProtoReflect.Descriptor instead.
func (*PolicySuspensionRequestApproval) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{32}
}

func (x *PolicySuspensionRequestApproval) GetApproverId() string {
	if x != nil {
		return x.ApproverId
	}
	return ""
}

func (x *PolicySuspensionRequestApproval) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PolicySuspensionRequestApproval) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type SuspendedPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy            *PolicyLog               `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	SuspensionRequest *PolicySuspensionRequest `protobuf:"bytes,2,opt,name=suspension_request,json=suspensionRequest,proto3" json:"suspension_request,omitempty"`
	IdentityType      string                   `protobuf:"bytes,3,opt,name=identity_type,json=identityType,proto3" json:"identity_type,omitempty"`
	IdentityId        string                   `protobuf:"bytes,4,opt,name=identity_id,json=identityId,proto3" json:"identity_id,omitempty"`
}

func (x *SuspendedPolicy) Reset() {
	*x = SuspendedPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspendedPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspendedPolicy) ProtoMessage() {}

func (x *SuspendedPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspendedPolicy.ProtoReflect.Descriptor instead.
func (*SuspendedPolicy) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{33}
}

func (x *SuspendedPolicy) GetPolicy() *PolicyLog {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *SuspendedPolicy) GetSuspensionRequest() *PolicySuspensionRequest {
	if x != nil {
		return x.SuspensionRequest
	}
	return nil
}

func (x *SuspendedPolicy) GetIdentityType() string {
	if x != nil {
		return x.IdentityType
	}
	return ""
}

func (x *SuspendedPolicy) GetIdentityId() string {
	if x != nil {
		return x.IdentityId
	}
	return ""
}

type SessionLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StartTime         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Duration          *durationpb.Duration   `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Network           *Network               `protobuf:"bytes,5,opt,name=network,proto3" json:"network,omitempty"`
	ConnectionType    string                 `protobuf:"bytes,6,opt,name=connection_type,json=connectionType,proto3" json:"connection_type,omitempty"`
	SuspendedPolicies []*SuspendedPolicy     `protobuf:"bytes,7,rep,name=suspended_policies,json=suspendedPolicies,proto3" json:"suspended_policies,omitempty"`
	Error             *Error                 `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
	Application       *Application           `protobuf:"bytes,9,opt,name=application,proto3" json:"application,omitempty"`
	Device            *DeviceInfo            `protobuf:"bytes,10,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *SessionLog) Reset() {
	*x = SessionLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionLog) ProtoMessage() {}

func (x *SessionLog) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionLog.ProtoReflect.Descriptor instead.
func (*SessionLog) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{34}
}

func (x *SessionLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SessionLog) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *SessionLog) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *SessionLog) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *SessionLog) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *SessionLog) GetConnectionType() string {
	if x != nil {
		return x.ConnectionType
	}
	return ""
}

func (x *SessionLog) GetSuspendedPolicies() []*SuspendedPolicy {
	if x != nil {
		return x.SuspendedPolicies
	}
	return nil
}

func (x *SessionLog) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SessionLog) GetApplication() *Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *SessionLog) GetDevice() *DeviceInfo {
	if x != nil {
		return x.Device
	}
	return nil
}

type SidecarLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Technology string `protobuf:"bytes,3,opt,name=technology,proto3" json:"technology,omitempty"`
}

func (x *SidecarLog) Reset() {
	*x = SidecarLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SidecarLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SidecarLog) ProtoMessage() {}

func (x *SidecarLog) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SidecarLog.ProtoReflect.Descriptor instead.
func (*SidecarLog) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{35}
}

func (x *SidecarLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SidecarLog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SidecarLog) GetTechnology() string {
	if x != nil {
		return x.Technology
	}
	return ""
}

type UserLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string          `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Username string          `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Formal   *UserLog_Formal `protobuf:"bytes,3,opt,name=formal,proto3" json:"formal,omitempty"`
	Native   *UserLog_Native `protobuf:"bytes,4,opt,name=native,proto3" json:"native,omitempty"`
}

func (x *UserLog) Reset() {
	*x = UserLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLog) ProtoMessage() {}

func (x *UserLog) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLog.ProtoReflect.Descriptor instead.
func (*UserLog) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{36}
}

func (x *UserLog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserLog) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserLog) GetFormal() *UserLog_Formal {
	if x != nil {
		return x.Formal
	}
	return nil
}

func (x *UserLog) GetNative() *UserLog_Native {
	if x != nil {
		return x.Native
	}
	return nil
}

type AwsEC2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId  string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	InstanceArn string `protobuf:"bytes,2,opt,name=instance_arn,json=instanceArn,proto3" json:"instance_arn,omitempty"`
}

func (x *AwsEC2) Reset() {
	*x = AwsEC2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsEC2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsEC2) ProtoMessage() {}

func (x *AwsEC2) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsEC2.ProtoReflect.Descriptor instead.
func (*AwsEC2) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{37}
}

func (x *AwsEC2) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *AwsEC2) GetInstanceArn() string {
	if x != nil {
		return x.InstanceArn
	}
	return ""
}

type AwsS3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketName string `protobuf:"bytes,1,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
}

func (x *AwsS3) Reset() {
	*x = AwsS3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsS3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsS3) ProtoMessage() {}

func (x *AwsS3) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsS3.ProtoReflect.Descriptor instead.
func (*AwsS3) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{38}
}

func (x *AwsS3) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

type AwsECS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster *AwsECS_Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Service *AwsECS_Service `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Task    *AwsECS_Task    `protobuf:"bytes,3,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *AwsECS) Reset() {
	*x = AwsECS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsECS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsECS) ProtoMessage() {}

func (x *AwsECS) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsECS.ProtoReflect.Descriptor instead.
func (*AwsECS) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{39}
}

func (x *AwsECS) GetCluster() *AwsECS_Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *AwsECS) GetService() *AwsECS_Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *AwsECS) GetTask() *AwsECS_Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type ResourceLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // oneof: aws, datastore, instance
	Id         string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Technology string                 `protobuf:"bytes,4,opt,name=technology,proto3" json:"technology,omitempty"`
	Aws        *ResourceLog_Aws       `protobuf:"bytes,5,opt,name=aws,proto3" json:"aws,omitempty"`
	Datastore  *ResourceLog_Datastore `protobuf:"bytes,6,opt,name=datastore,proto3" json:"datastore,omitempty"`
	Instance   *ResourceLog_Instance  `protobuf:"bytes,7,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *ResourceLog) Reset() {
	*x = ResourceLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLog) ProtoMessage() {}

func (x *ResourceLog) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLog.ProtoReflect.Descriptor instead.
func (*ResourceLog) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{40}
}

func (x *ResourceLog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResourceLog) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceLog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceLog) GetTechnology() string {
	if x != nil {
		return x.Technology
	}
	return ""
}

func (x *ResourceLog) GetAws() *ResourceLog_Aws {
	if x != nil {
		return x.Aws
	}
	return nil
}

func (x *ResourceLog) GetDatastore() *ResourceLog_Datastore {
	if x != nil {
		return x.Datastore
	}
	return nil
}

func (x *ResourceLog) GetInstance() *ResourceLog_Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type TimeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	Processing *durationpb.Duration   `protobuf:"bytes,3,opt,name=processing,proto3" json:"processing,omitempty"`
}

func (x *TimeInfo) Reset() {
	*x = TimeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeInfo) ProtoMessage() {}

func (x *TimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeInfo.ProtoReflect.Descriptor instead.
func (*TimeInfo) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{41}
}

func (x *TimeInfo) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *TimeInfo) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *TimeInfo) GetProcessing() *durationpb.Duration {
	if x != nil {
		return x.Processing
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []string `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{42}
}

func (x *Header) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Header) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type HttpHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Received *HttpHeaders_Headers `protobuf:"bytes,3,opt,name=received,proto3" json:"received,omitempty"`
	Sent     *HttpHeaders_Headers `protobuf:"bytes,4,opt,name=sent,proto3" json:"sent,omitempty"`
}

func (x *HttpHeaders) Reset() {
	*x = HttpHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeaders) ProtoMessage() {}

func (x *HttpHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeaders.ProtoReflect.Descriptor instead.
func (*HttpHeaders) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{43}
}

func (x *HttpHeaders) GetReceived() *HttpHeaders_Headers {
	if x != nil {
		return x.Received
	}
	return nil
}

func (x *HttpHeaders) GetSent() *HttpHeaders_Headers {
	if x != nil {
		return x.Sent
	}
	return nil
}

type HttpBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns        []string `protobuf:"bytes,1,rep,name=columns,proto3" json:"columns,omitempty"`
	ContentType    string   `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	ContentLength  string   `protobuf:"bytes,3,opt,name=content_length,json=contentLength,proto3" json:"content_length,omitempty"`
	Received       string   `protobuf:"bytes,4,opt,name=received,proto3" json:"received,omitempty"`
	Sent           string   `protobuf:"bytes,5,opt,name=sent,proto3" json:"sent,omitempty"`
	DryRunPolicies string   `protobuf:"bytes,6,opt,name=dry_run_policies,json=dryRunPolicies,proto3" json:"dry_run_policies,omitempty"`
	Encrypted      bool     `protobuf:"varint,7,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
}

func (x *HttpBody) Reset() {
	*x = HttpBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpBody) ProtoMessage() {}

func (x *HttpBody) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpBody.ProtoReflect.Descriptor instead.
func (*HttpBody) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{44}
}

func (x *HttpBody) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *HttpBody) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *HttpBody) GetContentLength() string {
	if x != nil {
		return x.ContentLength
	}
	return ""
}

func (x *HttpBody) GetReceived() string {
	if x != nil {
		return x.Received
	}
	return ""
}

func (x *HttpBody) GetSent() string {
	if x != nil {
		return x.Sent
	}
	return ""
}

func (x *HttpBody) GetDryRunPolicies() string {
	if x != nil {
		return x.DryRunPolicies
	}
	return ""
}

func (x *HttpBody) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

type HttpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     string       `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Method  string       `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Headers *HttpHeaders `protobuf:"bytes,3,opt,name=headers,proto3" json:"headers,omitempty"`
	Body    *HttpBody    `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *HttpRequest) Reset() {
	*x = HttpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequest) ProtoMessage() {}

func (x *HttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequest.ProtoReflect.Descriptor instead.
func (*HttpRequest) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{45}
}

func (x *HttpRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HttpRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpRequest) GetHeaders() *HttpHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpRequest) GetBody() *HttpBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type S3ObjectLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size         int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	LastModified string                 `protobuf:"bytes,3,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	Image        *S3ObjectLog_ImageInfo `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *S3ObjectLog) Reset() {
	*x = S3ObjectLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3ObjectLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ObjectLog) ProtoMessage() {}

func (x *S3ObjectLog) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ObjectLog.ProtoReflect.Descriptor instead.
func (*S3ObjectLog) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{46}
}

func (x *S3ObjectLog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *S3ObjectLog) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *S3ObjectLog) GetLastModified() string {
	if x != nil {
		return x.LastModified
	}
	return ""
}

func (x *S3ObjectLog) GetImage() *S3ObjectLog_ImageInfo {
	if x != nil {
		return x.Image
	}
	return nil
}

type RequestLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time        *TimeInfo                  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Application *RequestLog_Application    `protobuf:"bytes,2,opt,name=application,proto3" json:"application,omitempty"`
	Type        string                     `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"` // oneof: query, http, s3
	Query       *RequestLog_DatastoreQuery `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Http        *HttpRequest               `protobuf:"bytes,5,opt,name=http,proto3" json:"http,omitempty"`
	S3          *S3ObjectLog               `protobuf:"bytes,6,opt,name=s3,proto3" json:"s3,omitempty"`
}

func (x *RequestLog) Reset() {
	*x = RequestLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestLog) ProtoMessage() {}

func (x *RequestLog) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestLog.ProtoReflect.Descriptor instead.
func (*RequestLog) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{47}
}

func (x *RequestLog) GetTime() *TimeInfo {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RequestLog) GetApplication() *RequestLog_Application {
	if x != nil {
		return x.Application
	}
	return nil
}

func (x *RequestLog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RequestLog) GetQuery() *RequestLog_DatastoreQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *RequestLog) GetHttp() *HttpRequest {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *RequestLog) GetS3() *S3ObjectLog {
	if x != nil {
		return x.S3
	}
	return nil
}

type ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{48}
}

func (x *ErrorInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ResponseLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      *TimeInfo                  `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Error     *ErrorInfo                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Type      string                     `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"` // oneof: datastore, http, s3
	Datastore *ResponseLog_DatastoreInfo `protobuf:"bytes,4,opt,name=datastore,proto3" json:"datastore,omitempty"`
	Http      *ResponseLog_HttpResponse  `protobuf:"bytes,5,opt,name=http,proto3" json:"http,omitempty"`
	S3        *S3ObjectLog               `protobuf:"bytes,6,opt,name=s3,proto3" json:"s3,omitempty"`
}

func (x *ResponseLog) Reset() {
	*x = ResponseLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLog) ProtoMessage() {}

func (x *ResponseLog) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLog.ProtoReflect.Descriptor instead.
func (*ResponseLog) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{49}
}

func (x *ResponseLog) GetTime() *TimeInfo {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *ResponseLog) GetError() *ErrorInfo {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ResponseLog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResponseLog) GetDatastore() *ResponseLog_DatastoreInfo {
	if x != nil {
		return x.Datastore
	}
	return nil
}

func (x *ResponseLog) GetHttp() *ResponseLog_HttpResponse {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *ResponseLog) GetS3() *S3ObjectLog {
	if x != nil {
		return x.S3
	}
	return nil
}

type ListLogsV3Response_Aggregations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogsOverTime                     []*ListLogsV3Response_DateBucket `protobuf:"bytes,1,rep,name=logs_over_time,json=logsOverTime,proto3" json:"logs_over_time,omitempty"`
	SessionTypes                     []*ListLogsV3Response_Bucket     `protobuf:"bytes,2,rep,name=session_types,json=sessionTypes,proto3" json:"session_types,omitempty"`
	SessionIds                       []*ListLogsV3Response_Bucket     `protobuf:"bytes,3,rep,name=session_ids,json=sessionIds,proto3" json:"session_ids,omitempty"`
	SessionApplicationNames          []*ListLogsV3Response_Bucket     `protobuf:"bytes,35,rep,name=session_application_names,json=sessionApplicationNames,proto3" json:"session_application_names,omitempty"`
	SessionClientIpAddresses         []*ListLogsV3Response_Bucket     `protobuf:"bytes,4,rep,name=session_client_ip_addresses,json=sessionClientIpAddresses,proto3" json:"session_client_ip_addresses,omitempty"`
	SessionServerIpAddresses         []*ListLogsV3Response_Bucket     `protobuf:"bytes,5,rep,name=session_server_ip_addresses,json=sessionServerIpAddresses,proto3" json:"session_server_ip_addresses,omitempty"`
	QueryFingerprints                []*ListLogsV3Response_Bucket     `protobuf:"bytes,6,rep,name=query_fingerprints,json=queryFingerprints,proto3" json:"query_fingerprints,omitempty"`
	QueryReceived                    []*ListLogsV3Response_Bucket     `protobuf:"bytes,7,rep,name=query_received,json=queryReceived,proto3" json:"query_received,omitempty"`
	QuerySent                        []*ListLogsV3Response_Bucket     `protobuf:"bytes,8,rep,name=query_sent,json=querySent,proto3" json:"query_sent,omitempty"`
	ResourceIds                      []*ListLogsV3Response_Bucket     `protobuf:"bytes,9,rep,name=resource_ids,json=resourceIds,proto3" json:"resource_ids,omitempty"`
	ResourceNames                    []*ListLogsV3Response_Bucket     `protobuf:"bytes,10,rep,name=resource_names,json=resourceNames,proto3" json:"resource_names,omitempty"`
	ResourceTypes                    []*ListLogsV3Response_Bucket     `protobuf:"bytes,11,rep,name=resource_types,json=resourceTypes,proto3" json:"resource_types,omitempty"`
	ResourceHostnames                []*ListLogsV3Response_Bucket     `protobuf:"bytes,12,rep,name=resource_hostnames,json=resourceHostnames,proto3" json:"resource_hostnames,omitempty"`
	ResoruceTechnologies             []*ListLogsV3Response_Bucket     `protobuf:"bytes,13,rep,name=resoruce_technologies,json=resoruceTechnologies,proto3" json:"resoruce_technologies,omitempty"`
	SidecarNames                     []*ListLogsV3Response_Bucket     `protobuf:"bytes,14,rep,name=sidecar_names,json=sidecarNames,proto3" json:"sidecar_names,omitempty"`
	SidecarIds                       []*ListLogsV3Response_Bucket     `protobuf:"bytes,15,rep,name=sidecar_ids,json=sidecarIds,proto3" json:"sidecar_ids,omitempty"`
	SidecarTechnologies              []*ListLogsV3Response_Bucket     `protobuf:"bytes,16,rep,name=sidecar_technologies,json=sidecarTechnologies,proto3" json:"sidecar_technologies,omitempty"`
	UserTypes                        []*ListLogsV3Response_Bucket     `protobuf:"bytes,17,rep,name=user_types,json=userTypes,proto3" json:"user_types,omitempty"`
	UserSubTypes                     []*ListLogsV3Response_Bucket     `protobuf:"bytes,18,rep,name=user_sub_types,json=userSubTypes,proto3" json:"user_sub_types,omitempty"`
	UserEmails                       []*ListLogsV3Response_Bucket     `protobuf:"bytes,19,rep,name=user_emails,json=userEmails,proto3" json:"user_emails,omitempty"`
	UserUsernames                    []*ListLogsV3Response_Bucket     `protobuf:"bytes,20,rep,name=user_usernames,json=userUsernames,proto3" json:"user_usernames,omitempty"`
	UserIds                          []*ListLogsV3Response_Bucket     `protobuf:"bytes,21,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	EndUserTypes                     []*ListLogsV3Response_Bucket     `protobuf:"bytes,22,rep,name=end_user_types,json=endUserTypes,proto3" json:"end_user_types,omitempty"`
	EndUserNames                     []*ListLogsV3Response_Bucket     `protobuf:"bytes,23,rep,name=end_user_names,json=endUserNames,proto3" json:"end_user_names,omitempty"`
	EndUserEmails                    []*ListLogsV3Response_Bucket     `protobuf:"bytes,24,rep,name=end_user_emails,json=endUserEmails,proto3" json:"end_user_emails,omitempty"`
	TriggeredPolicyIds               []*ListLogsV3Response_Bucket     `protobuf:"bytes,25,rep,name=triggered_policy_ids,json=triggeredPolicyIds,proto3" json:"triggered_policy_ids,omitempty"`
	TriggeredPolicyNames             []*ListLogsV3Response_Bucket     `protobuf:"bytes,26,rep,name=triggered_policy_names,json=triggeredPolicyNames,proto3" json:"triggered_policy_names,omitempty"`
	TriggeredPolicyStatuses          []*ListLogsV3Response_Bucket     `protobuf:"bytes,27,rep,name=triggered_policy_statuses,json=triggeredPolicyStatuses,proto3" json:"triggered_policy_statuses,omitempty"`
	TriggeredPolicyTypes             []*ListLogsV3Response_Bucket     `protobuf:"bytes,28,rep,name=triggered_policy_types,json=triggeredPolicyTypes,proto3" json:"triggered_policy_types,omitempty"`
	ResponseDataVolumes              []*ListLogsV3Response_Bucket     `protobuf:"bytes,29,rep,name=response_data_volumes,json=responseDataVolumes,proto3" json:"response_data_volumes,omitempty"`
	ResponseReturnedColumnNames      []*ListLogsV3Response_Bucket     `protobuf:"bytes,30,rep,name=response_returned_column_names,json=responseReturnedColumnNames,proto3" json:"response_returned_column_names,omitempty"`
	ResponseReturnedColumnPaths      []*ListLogsV3Response_Bucket     `protobuf:"bytes,31,rep,name=response_returned_column_paths,json=responseReturnedColumnPaths,proto3" json:"response_returned_column_paths,omitempty"`
	ResponseReturnedColumnDataLabels []*ListLogsV3Response_Bucket     `protobuf:"bytes,32,rep,name=response_returned_column_data_labels,json=responseReturnedColumnDataLabels,proto3" json:"response_returned_column_data_labels,omitempty"`
	ResponseRowsSent                 []*ListLogsV3Response_Bucket     `protobuf:"bytes,33,rep,name=response_rows_sent,json=responseRowsSent,proto3" json:"response_rows_sent,omitempty"`
	ResponseRowsReceived             []*ListLogsV3Response_Bucket     `protobuf:"bytes,34,rep,name=response_rows_received,json=responseRowsReceived,proto3" json:"response_rows_received,omitempty"`
	DeviceSystemVersions             []*ListLogsV3Response_Bucket     `protobuf:"bytes,36,rep,name=device_system_versions,json=deviceSystemVersions,proto3" json:"device_system_versions,omitempty"`
	DeviceKernelVersions             []*ListLogsV3Response_Bucket     `protobuf:"bytes,37,rep,name=device_kernel_versions,json=deviceKernelVersions,proto3" json:"device_kernel_versions,omitempty"`
	DeviceComputerNames              []*ListLogsV3Response_Bucket     `protobuf:"bytes,38,rep,name=device_computer_names,json=deviceComputerNames,proto3" json:"device_computer_names,omitempty"`
	DeviceUserNames                  []*ListLogsV3Response_Bucket     `protobuf:"bytes,39,rep,name=device_user_names,json=deviceUserNames,proto3" json:"device_user_names,omitempty"`
	DeviceModelNames                 []*ListLogsV3Response_Bucket     `protobuf:"bytes,40,rep,name=device_model_names,json=deviceModelNames,proto3" json:"device_model_names,omitempty"`
	DeviceModelIdentifiers           []*ListLogsV3Response_Bucket     `protobuf:"bytes,41,rep,name=device_model_identifiers,json=deviceModelIdentifiers,proto3" json:"device_model_identifiers,omitempty"`
	DeviceModelNumbers               []*ListLogsV3Response_Bucket     `protobuf:"bytes,42,rep,name=device_model_numbers,json=deviceModelNumbers,proto3" json:"device_model_numbers,omitempty"`
	DeviceSerialNumbers              []*ListLogsV3Response_Bucket     `protobuf:"bytes,43,rep,name=device_serial_numbers,json=deviceSerialNumbers,proto3" json:"device_serial_numbers,omitempty"`
}

func (x *ListLogsV3Response_Aggregations) Reset() {
	*x = ListLogsV3Response_Aggregations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogsV3Response_Aggregations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogsV3Response_Aggregations) ProtoMessage() {}

func (x *ListLogsV3Response_Aggregations) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogsV3Response_Aggregations.ProtoReflect.Descriptor instead.
func (*ListLogsV3Response_Aggregations) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{22, 0}
}

func (x *ListLogsV3Response_Aggregations) GetLogsOverTime() []*ListLogsV3Response_DateBucket {
	if x != nil {
		return x.LogsOverTime
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetSessionTypes() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.SessionTypes
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetSessionIds() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.SessionIds
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetSessionApplicationNames() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.SessionApplicationNames
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetSessionClientIpAddresses() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.SessionClientIpAddresses
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetSessionServerIpAddresses() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.SessionServerIpAddresses
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetQueryFingerprints() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.QueryFingerprints
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetQueryReceived() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.QueryReceived
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetQuerySent() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.QuerySent
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetResourceIds() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.ResourceIds
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetResourceNames() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.ResourceNames
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetResourceTypes() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.ResourceTypes
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetResourceHostnames() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.ResourceHostnames
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetResoruceTechnologies() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.ResoruceTechnologies
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetSidecarNames() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.SidecarNames
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetSidecarIds() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.SidecarIds
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetSidecarTechnologies() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.SidecarTechnologies
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetUserTypes() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.UserTypes
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetUserSubTypes() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.UserSubTypes
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetUserEmails() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.UserEmails
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetUserUsernames() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.UserUsernames
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetUserIds() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetEndUserTypes() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.EndUserTypes
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetEndUserNames() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.EndUserNames
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetEndUserEmails() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.EndUserEmails
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetTriggeredPolicyIds() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.TriggeredPolicyIds
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetTriggeredPolicyNames() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.TriggeredPolicyNames
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetTriggeredPolicyStatuses() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.TriggeredPolicyStatuses
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetTriggeredPolicyTypes() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.TriggeredPolicyTypes
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetResponseDataVolumes() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.ResponseDataVolumes
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetResponseReturnedColumnNames() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.ResponseReturnedColumnNames
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetResponseReturnedColumnPaths() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.ResponseReturnedColumnPaths
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetResponseReturnedColumnDataLabels() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.ResponseReturnedColumnDataLabels
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetResponseRowsSent() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.ResponseRowsSent
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetResponseRowsReceived() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.ResponseRowsReceived
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetDeviceSystemVersions() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.DeviceSystemVersions
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetDeviceKernelVersions() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.DeviceKernelVersions
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetDeviceComputerNames() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.DeviceComputerNames
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetDeviceUserNames() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.DeviceUserNames
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetDeviceModelNames() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.DeviceModelNames
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetDeviceModelIdentifiers() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.DeviceModelIdentifiers
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetDeviceModelNumbers() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.DeviceModelNumbers
	}
	return nil
}

func (x *ListLogsV3Response_Aggregations) GetDeviceSerialNumbers() []*ListLogsV3Response_Bucket {
	if x != nil {
		return x.DeviceSerialNumbers
	}
	return nil
}

type ListLogsV3Response_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ListLogsV3Response_Bucket) Reset() {
	*x = ListLogsV3Response_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogsV3Response_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogsV3Response_Bucket) ProtoMessage() {}

func (x *ListLogsV3Response_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogsV3Response_Bucket.ProtoReflect.Descriptor instead.
func (*ListLogsV3Response_Bucket) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{22, 1}
}

func (x *ListLogsV3Response_Bucket) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ListLogsV3Response_Bucket) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type ListLogsV3Response_GroupByBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string                              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Count   int32                               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Buckets []*ListLogsV3Response_GroupByBucket `protobuf:"bytes,3,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *ListLogsV3Response_GroupByBucket) Reset() {
	*x = ListLogsV3Response_GroupByBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogsV3Response_GroupByBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogsV3Response_GroupByBucket) ProtoMessage() {}

func (x *ListLogsV3Response_GroupByBucket) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogsV3Response_GroupByBucket.ProtoReflect.Descriptor instead.
func (*ListLogsV3Response_GroupByBucket) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{22, 2}
}

func (x *ListLogsV3Response_GroupByBucket) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ListLogsV3Response_GroupByBucket) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListLogsV3Response_GroupByBucket) GetBuckets() []*ListLogsV3Response_GroupByBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type ListLogsV3Response_DateBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datetime string                              `protobuf:"bytes,1,opt,name=datetime,proto3" json:"datetime,omitempty"`
	Count    int32                               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Buckets  []*ListLogsV3Response_GroupByBucket `protobuf:"bytes,3,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *ListLogsV3Response_DateBucket) Reset() {
	*x = ListLogsV3Response_DateBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogsV3Response_DateBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogsV3Response_DateBucket) ProtoMessage() {}

func (x *ListLogsV3Response_DateBucket) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogsV3Response_DateBucket.ProtoReflect.Descriptor instead.
func (*ListLogsV3Response_DateBucket) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{22, 3}
}

func (x *ListLogsV3Response_DateBucket) GetDatetime() string {
	if x != nil {
		return x.Datetime
	}
	return ""
}

func (x *ListLogsV3Response_DateBucket) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListLogsV3Response_DateBucket) GetBuckets() []*ListLogsV3Response_GroupByBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type GetGroupByAggregationResponse_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string                                  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DocCount int32                                   `protobuf:"varint,2,opt,name=doc_count,json=docCount,proto3" json:"doc_count,omitempty"`
	Buckets  []*GetGroupByAggregationResponse_Bucket `protobuf:"bytes,3,rep,name=buckets,proto3" json:"buckets,omitempty"`
}

func (x *GetGroupByAggregationResponse_Bucket) Reset() {
	*x = GetGroupByAggregationResponse_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupByAggregationResponse_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupByAggregationResponse_Bucket) ProtoMessage() {}

func (x *GetGroupByAggregationResponse_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupByAggregationResponse_Bucket.ProtoReflect.Descriptor instead.
func (*GetGroupByAggregationResponse_Bucket) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{24, 0}
}

func (x *GetGroupByAggregationResponse_Bucket) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetGroupByAggregationResponse_Bucket) GetDocCount() int32 {
	if x != nil {
		return x.DocCount
	}
	return 0
}

func (x *GetGroupByAggregationResponse_Bucket) GetBuckets() []*GetGroupByAggregationResponse_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type StreamLog_SshData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data        string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	MessageType string `protobuf:"bytes,2,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
}

func (x *StreamLog_SshData) Reset() {
	*x = StreamLog_SshData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamLog_SshData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLog_SshData) ProtoMessage() {}

func (x *StreamLog_SshData) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLog_SshData.ProtoReflect.Descriptor instead.
func (*StreamLog_SshData) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{29, 0}
}

func (x *StreamLog_SshData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *StreamLog_SshData) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

type UserLog_Formal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User    *UserLog_Formal_UserInfo `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	EndUser *UserLog_Formal_UserInfo `protobuf:"bytes,2,opt,name=end_user,json=endUser,proto3" json:"end_user,omitempty"`
}

func (x *UserLog_Formal) Reset() {
	*x = UserLog_Formal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLog_Formal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLog_Formal) ProtoMessage() {}

func (x *UserLog_Formal) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLog_Formal.ProtoReflect.Descriptor instead.
func (*UserLog_Formal) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{36, 0}
}

func (x *UserLog_Formal) GetUser() *UserLog_Formal_UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserLog_Formal) GetEndUser() *UserLog_Formal_UserInfo {
	if x != nil {
		return x.EndUser
	}
	return nil
}

type UserLog_Native struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *UserLog_Native) Reset() {
	*x = UserLog_Native{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLog_Native) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLog_Native) ProtoMessage() {}

func (x *UserLog_Native) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLog_Native.ProtoReflect.Descriptor instead.
func (*UserLog_Native) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{36, 1}
}

func (x *UserLog_Native) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type UserLog_Formal_UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email       string   `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Type        string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Groups      []string `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
	ExternalIds []string `protobuf:"bytes,6,rep,name=external_ids,json=externalIds,proto3" json:"external_ids,omitempty"`
}

func (x *UserLog_Formal_UserInfo) Reset() {
	*x = UserLog_Formal_UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLog_Formal_UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLog_Formal_UserInfo) ProtoMessage() {}

func (x *UserLog_Formal_UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLog_Formal_UserInfo.ProtoReflect.Descriptor instead.
func (*UserLog_Formal_UserInfo) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{36, 0, 0}
}

func (x *UserLog_Formal_UserInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserLog_Formal_UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserLog_Formal_UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserLog_Formal_UserInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserLog_Formal_UserInfo) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *UserLog_Formal_UserInfo) GetExternalIds() []string {
	if x != nil {
		return x.ExternalIds
	}
	return nil
}

type AwsECS_Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arn  string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AwsECS_Cluster) Reset() {
	*x = AwsECS_Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsECS_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsECS_Cluster) ProtoMessage() {}

func (x *AwsECS_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsECS_Cluster.ProtoReflect.Descriptor instead.
func (*AwsECS_Cluster) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{39, 0}
}

func (x *AwsECS_Cluster) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AwsECS_Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AwsECS_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Arn  string `protobuf:"bytes,2,opt,name=arn,proto3" json:"arn,omitempty"`
}

func (x *AwsECS_Service) Reset() {
	*x = AwsECS_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsECS_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsECS_Service) ProtoMessage() {}

func (x *AwsECS_Service) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsECS_Service.ProtoReflect.Descriptor instead.
func (*AwsECS_Service) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{39, 1}
}

func (x *AwsECS_Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AwsECS_Service) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

type AwsECS_Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arn           string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	ContainerName string `protobuf:"bytes,3,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
}

func (x *AwsECS_Task) Reset() {
	*x = AwsECS_Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsECS_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsECS_Task) ProtoMessage() {}

func (x *AwsECS_Task) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsECS_Task.ProtoReflect.Descriptor instead.
func (*AwsECS_Task) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{39, 2}
}

func (x *AwsECS_Task) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *AwsECS_Task) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AwsECS_Task) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

type ResourceLog_Aws struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string  `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Region    string  `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Ec2       *AwsEC2 `protobuf:"bytes,3,opt,name=ec2,proto3" json:"ec2,omitempty"`
	S3        *AwsS3  `protobuf:"bytes,4,opt,name=s3,proto3" json:"s3,omitempty"`
	Ecs       *AwsECS `protobuf:"bytes,5,opt,name=ecs,proto3" json:"ecs,omitempty"`
}

func (x *ResourceLog_Aws) Reset() {
	*x = ResourceLog_Aws{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLog_Aws) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLog_Aws) ProtoMessage() {}

func (x *ResourceLog_Aws) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLog_Aws.ProtoReflect.Descriptor instead.
func (*ResourceLog_Aws) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{40, 0}
}

func (x *ResourceLog_Aws) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ResourceLog_Aws) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ResourceLog_Aws) GetEc2() *AwsEC2 {
	if x != nil {
		return x.Ec2
	}
	return nil
}

func (x *ResourceLog_Aws) GetS3() *AwsS3 {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *ResourceLog_Aws) GetEcs() *AwsECS {
	if x != nil {
		return x.Ecs
	}
	return nil
}

type ResourceLog_Datastore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Technology string                    `protobuf:"bytes,3,opt,name=technology,proto3" json:"technology,omitempty"`
	Hostname   string                    `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port       string                    `protobuf:"bytes,5,opt,name=port,proto3" json:"port,omitempty"`
	Db         *ResourceLog_Datastore_Db `protobuf:"bytes,6,opt,name=db,proto3" json:"db,omitempty"`
}

func (x *ResourceLog_Datastore) Reset() {
	*x = ResourceLog_Datastore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLog_Datastore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLog_Datastore) ProtoMessage() {}

func (x *ResourceLog_Datastore) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLog_Datastore.ProtoReflect.Descriptor instead.
func (*ResourceLog_Datastore) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{40, 1}
}

func (x *ResourceLog_Datastore) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceLog_Datastore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceLog_Datastore) GetTechnology() string {
	if x != nil {
		return x.Technology
	}
	return ""
}

func (x *ResourceLog_Datastore) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ResourceLog_Datastore) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *ResourceLog_Datastore) GetDb() *ResourceLog_Datastore_Db {
	if x != nil {
		return x.Db
	}
	return nil
}

type ResourceLog_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string                     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // oneof: http, ssh
	Http *ResourceLog_Instance_Http `protobuf:"bytes,2,opt,name=http,proto3" json:"http,omitempty"`
	Ssh  *ResourceLog_Instance_Ssh  `protobuf:"bytes,3,opt,name=ssh,proto3" json:"ssh,omitempty"`
}

func (x *ResourceLog_Instance) Reset() {
	*x = ResourceLog_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLog_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLog_Instance) ProtoMessage() {}

func (x *ResourceLog_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLog_Instance.ProtoReflect.Descriptor instead.
func (*ResourceLog_Instance) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{40, 2}
}

func (x *ResourceLog_Instance) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResourceLog_Instance) GetHttp() *ResourceLog_Instance_Http {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *ResourceLog_Instance) GetSsh() *ResourceLog_Instance_Ssh {
	if x != nil {
		return x.Ssh
	}
	return nil
}

type ResourceLog_Datastore_Db struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ResourceLog_Datastore_Db) Reset() {
	*x = ResourceLog_Datastore_Db{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLog_Datastore_Db) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLog_Datastore_Db) ProtoMessage() {}

func (x *ResourceLog_Datastore_Db) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLog_Datastore_Db.ProtoReflect.Descriptor instead.
func (*ResourceLog_Datastore_Db) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{40, 1, 0}
}

func (x *ResourceLog_Datastore_Db) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceLog_Datastore_Db) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type ResourceLog_Instance_Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ResourceLog_Instance_Http) Reset() {
	*x = ResourceLog_Instance_Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLog_Instance_Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLog_Instance_Http) ProtoMessage() {}

func (x *ResourceLog_Instance_Http) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLog_Instance_Http.ProtoReflect.Descriptor instead.
func (*ResourceLog_Instance_Http) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{40, 2, 0}
}

func (x *ResourceLog_Instance_Http) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceLog_Instance_Http) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceLog_Instance_Http) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ResourceLog_Instance_Http) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ResourceLog_Instance_Ssh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
}

func (x *ResourceLog_Instance_Ssh) Reset() {
	*x = ResourceLog_Instance_Ssh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceLog_Instance_Ssh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceLog_Instance_Ssh) ProtoMessage() {}

func (x *ResourceLog_Instance_Ssh) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceLog_Instance_Ssh.ProtoReflect.Descriptor instead.
func (*ResourceLog_Instance_Ssh) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{40, 2, 1}
}

func (x *ResourceLog_Instance_Ssh) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceLog_Instance_Ssh) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceLog_Instance_Ssh) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type HttpHeaders_Headers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encrypted  bool      `protobuf:"varint,1,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	Headers    []*Header `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	DataVolume string    `protobuf:"bytes,3,opt,name=data_volume,json=dataVolume,proto3" json:"data_volume,omitempty"`
}

func (x *HttpHeaders_Headers) Reset() {
	*x = HttpHeaders_Headers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHeaders_Headers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeaders_Headers) ProtoMessage() {}

func (x *HttpHeaders_Headers) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeaders_Headers.ProtoReflect.Descriptor instead.
func (*HttpHeaders_Headers) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{43, 0}
}

func (x *HttpHeaders_Headers) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

func (x *HttpHeaders_Headers) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpHeaders_Headers) GetDataVolume() string {
	if x != nil {
		return x.DataVolume
	}
	return ""
}

type S3ObjectLog_ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FacesCount   int32  `protobuf:"varint,1,opt,name=faces_count,json=facesCount,proto3" json:"faces_count,omitempty"`
	Height       int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PolicyAction string `protobuf:"bytes,4,opt,name=policy_action,json=policyAction,proto3" json:"policy_action,omitempty"`
	Type         string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Width        int32  `protobuf:"varint,6,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *S3ObjectLog_ImageInfo) Reset() {
	*x = S3ObjectLog_ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *S3ObjectLog_ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3ObjectLog_ImageInfo) ProtoMessage() {}

func (x *S3ObjectLog_ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3ObjectLog_ImageInfo.ProtoReflect.Descriptor instead.
func (*S3ObjectLog_ImageInfo) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{46, 0}
}

func (x *S3ObjectLog_ImageInfo) GetFacesCount() int32 {
	if x != nil {
		return x.FacesCount
	}
	return 0
}

func (x *S3ObjectLog_ImageInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *S3ObjectLog_ImageInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *S3ObjectLog_ImageInfo) GetPolicyAction() string {
	if x != nil {
		return x.PolicyAction
	}
	return ""
}

func (x *S3ObjectLog_ImageInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *S3ObjectLog_ImageInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type RequestLog_Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RequestLog_Application) Reset() {
	*x = RequestLog_Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestLog_Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestLog_Application) ProtoMessage() {}

func (x *RequestLog_Application) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestLog_Application.ProtoReflect.Descriptor instead.
func (*RequestLog_Application) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{47, 0}
}

func (x *RequestLog_Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RequestLog_Application) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RequestLog_DatastoreQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatementType  string `protobuf:"bytes,1,opt,name=statement_type,json=statementType,proto3" json:"statement_type,omitempty"`
	CommandType    string `protobuf:"bytes,6,opt,name=command_type,json=commandType,proto3" json:"command_type,omitempty"`
	Received       string `protobuf:"bytes,2,opt,name=received,proto3" json:"received,omitempty"`
	Sent           string `protobuf:"bytes,3,opt,name=sent,proto3" json:"sent,omitempty"`
	ValuesStripped bool   `protobuf:"varint,4,opt,name=values_stripped,json=valuesStripped,proto3" json:"values_stripped,omitempty"`
	Fingerprint    string `protobuf:"bytes,5,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (x *RequestLog_DatastoreQuery) Reset() {
	*x = RequestLog_DatastoreQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestLog_DatastoreQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestLog_DatastoreQuery) ProtoMessage() {}

func (x *RequestLog_DatastoreQuery) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestLog_DatastoreQuery.ProtoReflect.Descriptor instead.
func (*RequestLog_DatastoreQuery) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{47, 1}
}

func (x *RequestLog_DatastoreQuery) GetStatementType() string {
	if x != nil {
		return x.StatementType
	}
	return ""
}

func (x *RequestLog_DatastoreQuery) GetCommandType() string {
	if x != nil {
		return x.CommandType
	}
	return ""
}

func (x *RequestLog_DatastoreQuery) GetReceived() string {
	if x != nil {
		return x.Received
	}
	return ""
}

func (x *RequestLog_DatastoreQuery) GetSent() string {
	if x != nil {
		return x.Sent
	}
	return ""
}

func (x *RequestLog_DatastoreQuery) GetValuesStripped() bool {
	if x != nil {
		return x.ValuesStripped
	}
	return false
}

func (x *RequestLog_DatastoreQuery) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

type ResponseLog_HttpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32        `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Headers    *HttpHeaders `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	Body       *HttpBody    `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ResponseLog_HttpResponse) Reset() {
	*x = ResponseLog_HttpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseLog_HttpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLog_HttpResponse) ProtoMessage() {}

func (x *ResponseLog_HttpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLog_HttpResponse.ProtoReflect.Descriptor instead.
func (*ResponseLog_HttpResponse) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{49, 0}
}

func (x *ResponseLog_HttpResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ResponseLog_HttpResponse) GetHeaders() *HttpHeaders {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *ResponseLog_HttpResponse) GetBody() *HttpBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type ResponseLog_DatastoreInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataVolume          string                                  `protobuf:"bytes,1,opt,name=data_volume,json=dataVolume,proto3" json:"data_volume,omitempty"`
	ReturnedColumns     []*ResponseLog_DatastoreInfo_Column     `protobuf:"bytes,2,rep,name=returned_columns,json=returnedColumns,proto3" json:"returned_columns,omitempty"`
	ReturnedTables      []string                                `protobuf:"bytes,3,rep,name=returned_tables,json=returnedTables,proto3" json:"returned_tables,omitempty"`
	ReturnedDataDomains []*ResponseLog_DatastoreInfo_DataDomain `protobuf:"bytes,4,rep,name=returned_data_domains,json=returnedDataDomains,proto3" json:"returned_data_domains,omitempty"`
	RowsCount           *ResponseLog_DatastoreInfo_RowsCount    `protobuf:"bytes,5,opt,name=rows_count,json=rowsCount,proto3" json:"rows_count,omitempty"`
}

func (x *ResponseLog_DatastoreInfo) Reset() {
	*x = ResponseLog_DatastoreInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseLog_DatastoreInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLog_DatastoreInfo) ProtoMessage() {}

func (x *ResponseLog_DatastoreInfo) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLog_DatastoreInfo.ProtoReflect.Descriptor instead.
func (*ResponseLog_DatastoreInfo) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{49, 1}
}

func (x *ResponseLog_DatastoreInfo) GetDataVolume() string {
	if x != nil {
		return x.DataVolume
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo) GetReturnedColumns() []*ResponseLog_DatastoreInfo_Column {
	if x != nil {
		return x.ReturnedColumns
	}
	return nil
}

func (x *ResponseLog_DatastoreInfo) GetReturnedTables() []string {
	if x != nil {
		return x.ReturnedTables
	}
	return nil
}

func (x *ResponseLog_DatastoreInfo) GetReturnedDataDomains() []*ResponseLog_DatastoreInfo_DataDomain {
	if x != nil {
		return x.ReturnedDataDomains
	}
	return nil
}

func (x *ResponseLog_DatastoreInfo) GetRowsCount() *ResponseLog_DatastoreInfo_RowsCount {
	if x != nil {
		return x.RowsCount
	}
	return nil
}

type ResponseLog_DatastoreInfo_Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                                            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Alias            string                                            `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	Path             string                                            `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	TablePath        string                                            `protobuf:"bytes,4,opt,name=table_path,json=tablePath,proto3" json:"table_path,omitempty"`
	DataType         string                                            `protobuf:"bytes,5,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	DataTypeOid      uint32                                            `protobuf:"varint,6,opt,name=data_type_oid,json=dataTypeOid,proto3" json:"data_type_oid,omitempty"`
	DataLabel        string                                            `protobuf:"bytes,7,opt,name=data_label,json=dataLabel,proto3" json:"data_label,omitempty"`
	Tags             []string                                          `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	DataDomains      []string                                          `protobuf:"bytes,9,rep,name=data_domains,json=dataDomains,proto3" json:"data_domains,omitempty"`
	RowValuesCount   []*ResponseLog_DatastoreInfo_Column_RowValueCount `protobuf:"bytes,10,rep,name=row_values_count,json=rowValuesCount,proto3" json:"row_values_count,omitempty"`
	EnforcedPolicies []*PolicyLog                                      `protobuf:"bytes,11,rep,name=enforced_policies,json=enforcedPolicies,proto3" json:"enforced_policies,omitempty"`
}

func (x *ResponseLog_DatastoreInfo_Column) Reset() {
	*x = ResponseLog_DatastoreInfo_Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseLog_DatastoreInfo_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLog_DatastoreInfo_Column) ProtoMessage() {}

func (x *ResponseLog_DatastoreInfo_Column) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLog_DatastoreInfo_Column.ProtoReflect.Descriptor instead.
func (*ResponseLog_DatastoreInfo_Column) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{49, 1, 0}
}

func (x *ResponseLog_DatastoreInfo_Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo_Column) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo_Column) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo_Column) GetTablePath() string {
	if x != nil {
		return x.TablePath
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo_Column) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo_Column) GetDataTypeOid() uint32 {
	if x != nil {
		return x.DataTypeOid
	}
	return 0
}

func (x *ResponseLog_DatastoreInfo_Column) GetDataLabel() string {
	if x != nil {
		return x.DataLabel
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo_Column) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ResponseLog_DatastoreInfo_Column) GetDataDomains() []string {
	if x != nil {
		return x.DataDomains
	}
	return nil
}

func (x *ResponseLog_DatastoreInfo_Column) GetRowValuesCount() []*ResponseLog_DatastoreInfo_Column_RowValueCount {
	if x != nil {
		return x.RowValuesCount
	}
	return nil
}

func (x *ResponseLog_DatastoreInfo_Column) GetEnforcedPolicies() []*PolicyLog {
	if x != nil {
		return x.EnforcedPolicies
	}
	return nil
}

type ResponseLog_DatastoreInfo_RowsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Received string `protobuf:"bytes,1,opt,name=received,proto3" json:"received,omitempty"`
	Sent     string `protobuf:"bytes,2,opt,name=sent,proto3" json:"sent,omitempty"`
	Filtered string `protobuf:"bytes,3,opt,name=filtered,proto3" json:"filtered,omitempty"`
}

func (x *ResponseLog_DatastoreInfo_RowsCount) Reset() {
	*x = ResponseLog_DatastoreInfo_RowsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseLog_DatastoreInfo_RowsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLog_DatastoreInfo_RowsCount) ProtoMessage() {}

func (x *ResponseLog_DatastoreInfo_RowsCount) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLog_DatastoreInfo_RowsCount.ProtoReflect.Descriptor instead.
func (*ResponseLog_DatastoreInfo_RowsCount) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{49, 1, 1}
}

func (x *ResponseLog_DatastoreInfo_RowsCount) GetReceived() string {
	if x != nil {
		return x.Received
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo_RowsCount) GetSent() string {
	if x != nil {
		return x.Sent
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo_RowsCount) GetFiltered() string {
	if x != nil {
		return x.Filtered
	}
	return ""
}

type ResponseLog_DatastoreInfo_DataDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                                       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Owners        []*ResponseLog_DatastoreInfo_DataDomainOwner `protobuf:"bytes,4,rep,name=owners,proto3" json:"owners,omitempty"`
	IncludedPaths []string                                     `protobuf:"bytes,5,rep,name=included_paths,json=includedPaths,proto3" json:"included_paths,omitempty"`
	ExcludedPaths []string                                     `protobuf:"bytes,6,rep,name=excluded_paths,json=excludedPaths,proto3" json:"excluded_paths,omitempty"`
}

func (x *ResponseLog_DatastoreInfo_DataDomain) Reset() {
	*x = ResponseLog_DatastoreInfo_DataDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseLog_DatastoreInfo_DataDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLog_DatastoreInfo_DataDomain) ProtoMessage() {}

func (x *ResponseLog_DatastoreInfo_DataDomain) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLog_DatastoreInfo_DataDomain.ProtoReflect.Descriptor instead.
func (*ResponseLog_DatastoreInfo_DataDomain) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{49, 1, 2}
}

func (x *ResponseLog_DatastoreInfo_DataDomain) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo_DataDomain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo_DataDomain) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo_DataDomain) GetOwners() []*ResponseLog_DatastoreInfo_DataDomainOwner {
	if x != nil {
		return x.Owners
	}
	return nil
}

func (x *ResponseLog_DatastoreInfo_DataDomain) GetIncludedPaths() []string {
	if x != nil {
		return x.IncludedPaths
	}
	return nil
}

func (x *ResponseLog_DatastoreInfo_DataDomain) GetExcludedPaths() []string {
	if x != nil {
		return x.ExcludedPaths
	}
	return nil
}

type ResponseLog_DatastoreInfo_DataDomainOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ResponseLog_DatastoreInfo_DataDomainOwner) Reset() {
	*x = ResponseLog_DatastoreInfo_DataDomainOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseLog_DatastoreInfo_DataDomainOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLog_DatastoreInfo_DataDomainOwner) ProtoMessage() {}

func (x *ResponseLog_DatastoreInfo_DataDomainOwner) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLog_DatastoreInfo_DataDomainOwner.ProtoReflect.Descriptor instead.
func (*ResponseLog_DatastoreInfo_DataDomainOwner) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{49, 1, 3}
}

func (x *ResponseLog_DatastoreInfo_DataDomainOwner) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo_DataDomainOwner) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ResponseLog_DatastoreInfo_Column_RowValueCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count          int64  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	HashedValue    string `protobuf:"bytes,2,opt,name=hashed_value,json=hashedValue,proto3" json:"hashed_value,omitempty"`
	ClearTextValue string `protobuf:"bytes,3,opt,name=clear_text_value,json=clearTextValue,proto3" json:"clear_text_value,omitempty"`
}

func (x *ResponseLog_DatastoreInfo_Column_RowValueCount) Reset() {
	*x = ResponseLog_DatastoreInfo_Column_RowValueCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_core_v1_audit_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseLog_DatastoreInfo_Column_RowValueCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseLog_DatastoreInfo_Column_RowValueCount) ProtoMessage() {}

func (x *ResponseLog_DatastoreInfo_Column_RowValueCount) ProtoReflect() protoreflect.Message {
	mi := &file_core_v1_audit_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseLog_DatastoreInfo_Column_RowValueCount.ProtoReflect.Descriptor instead.
func (*ResponseLog_DatastoreInfo_Column_RowValueCount) Descriptor() ([]byte, []int) {
	return file_core_v1_audit_proto_rawDescGZIP(), []int{49, 1, 0, 0}
}

func (x *ResponseLog_DatastoreInfo_Column_RowValueCount) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ResponseLog_DatastoreInfo_Column_RowValueCount) GetHashedValue() string {
	if x != nil {
		return x.HashedValue
	}
	return ""
}

func (x *ResponseLog_DatastoreInfo_Column_RowValueCount) GetClearTextValue() string {
	if x != nil {
		return x.ClearTextValue
	}
	return ""
}

var File_core_v1_audit_proto protoreflect.FileDescriptor

var file_core_v1_audit_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b,
	0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x03, 0x0a, 0x0c, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x6f, 0x73, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x73, 0x4c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x64, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x64, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf8, 0x02, 0x0a, 0x0c, 0x53, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0x6f,
	0x74, 0x22, 0x72, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x31, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x22, 0xe2, 0x04, 0x0a, 0x0e, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x44, 0x62, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x62, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x3a,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xfa, 0x01, 0x0a, 0x0f, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5f, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x19, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x65, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0x78, 0x0a, 0x16, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x66, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x73, 0x61, 0x66, 0x65,
	0x22, 0xdf, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x4a, 0x0a, 0x13, 0x54, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x57,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xa8, 0x10, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x73, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x15, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x1a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x64, 0x61, 0x74, 0x61, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x65,
	0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x15, 0x65,
	0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x62, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x15, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1b, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x11, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x11, 0x72,
	0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x0f, 0x72, 0x6f, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x31, 0x0a, 0x15, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x6d, 0x69,
	0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x4d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x33, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x33, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x10, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x33, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x73, 0x68, 0x5f,
	0x61, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x73, 0x68, 0x41, 0x77,
	0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x73, 0x73, 0x68, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x73, 0x68, 0x41, 0x77, 0x73, 0x41, 0x72, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x34,
	0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x21,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x22, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xee, 0x08, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x64, 0x65, 0x63,
	0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x69,
	0x64, 0x65, 0x63, 0x61, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x69, 0x64,
	0x65, 0x63, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x54, 0x65,
	0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x13, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x32, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x45,
	0x63, 0x32, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14,
	0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x77, 0x73, 0x45,
	0x63, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x61, 0x72, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x45,
	0x63, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x72, 0x6e, 0x12, 0x2f, 0x0a, 0x14,
	0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x77, 0x73, 0x45,
	0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x72, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x77, 0x73, 0x45,
	0x63, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x6e, 0x12, 0x25, 0x0a, 0x0f,
	0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x73, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x45, 0x63, 0x73, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x10, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x63, 0x73, 0x5f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x77, 0x73, 0x45, 0x63, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4c, 0x6f,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0xba, 0x48, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x70, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x77, 0x64, 0x22, 0x43, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x33, 0x12, 0x33, 0x0a, 0x16,
	0x73, 0x33, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x33,
	0x46, 0x69, 0x72, 0x65, 0x68, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x72,
	0x6e, 0x22, 0x62, 0x0a, 0x12, 0x43, 0x73, 0x76, 0x4f, 0x72, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x61, 0x63, 0x65, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x08,
	0x53, 0x33, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x73, 0x76, 0x4f, 0x72, 0x50, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x24, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x22, 0x31, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x02, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0b, 0xba, 0x48, 0x08, 0x1a, 0x06, 0x18, 0xa0, 0x8d, 0x06, 0x20, 0x00, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x12, 0x30, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x12,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x19, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a,
	0xba, 0x48, 0x07, 0x92, 0x01, 0x04, 0x08, 0x00, 0x10, 0x03, 0x52, 0x16, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x22, 0x9d, 0x20, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56,
	0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x75, 0x6d, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e,
	0x75, 0x6d, 0x48, 0x69, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56,
	0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x89, 0x1c, 0x0a, 0x0c, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x47, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73,
	0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x5e, 0x0a,
	0x19, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x61, 0x0a,
	0x1b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x18, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x61, 0x0a, 0x1b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x18, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f,
	0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x41, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x51, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73,
	0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x72, 0x75, 0x63, 0x65,
	0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x72, 0x75, 0x63,
	0x65, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a,
	0x0d, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x0a, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x49, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x13, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75,
	0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73,
	0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56,
	0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x48,
	0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x0d, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x54,
	0x0a, 0x14, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56,
	0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x49, 0x64, 0x73, 0x12, 0x58, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x1a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x14, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x5e,
	0x0a, 0x19, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x17, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x58,
	0x0a, 0x16, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x14, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x13, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x12, 0x67, 0x0a, 0x1e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x1b, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x67, 0x0a, 0x1e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x1b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x72, 0x0a, 0x24, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x16, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x14, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x58, 0x0a, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x16,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56,
	0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4e,
	0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x50,
	0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x10,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x5c, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x29, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x54,
	0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56,
	0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x2b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x30, 0x0a, 0x06,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x7c,
	0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x83, 0x01, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x43, 0x0a,
	0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x0d, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x0a, 0xba, 0x48, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x05, 0x52, 0x0d,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xeb, 0x01,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x47, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x80, 0x01, 0x0a, 0x06, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x47, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x0e,
	0x53, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x53, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xca, 0x04, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12,
	0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x73,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x4c, 0x6f,
	0x67, 0x52, 0x07, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41,
	0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x11,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x22, 0xee, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x73, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x6f, 0x67, 0x2e, 0x53, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x03, 0x73, 0x73, 0x68, 0x1a, 0x40, 0x0a, 0x07, 0x53, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe4, 0x03, 0x0a, 0x17, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xba, 0x48, 0x05,
	0xb2, 0x01, 0x02, 0x38, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x43, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x08, 0xba, 0x48, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x01, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x22, 0x9f, 0x01, 0x0a, 0x1f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0xba, 0x48, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x01, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x67, 0x52, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x12, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x11, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xee, 0x03, 0x0a, 0x0a, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x11, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x50, 0x0a, 0x0a, 0x53,
	0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x22, 0xd5, 0x03,
	0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x2e, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x1a, 0x91, 0x02, 0x0a, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x93, 0x01, 0x0a, 0x08, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x1a,
	0x24, 0x0a, 0x06, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x06, 0x41, 0x77, 0x73, 0x45, 0x43, 0x32, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x72, 0x6e, 0x22, 0x28, 0x0a, 0x05, 0x41, 0x77, 0x73, 0x53, 0x33, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x02,
	0x0a, 0x06, 0x41, 0x77, 0x73, 0x45, 0x43, 0x53, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x43, 0x53, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x43, 0x53, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x43, 0x53, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x2f, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x2f, 0x0a, 0x07, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x1a, 0x4f, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x72, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc3, 0x07, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x41, 0x77, 0x73, 0x52, 0x03, 0x61, 0x77, 0x73, 0x12,
	0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xa2, 0x01, 0x0a, 0x03, 0x41, 0x77, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x03, 0x65, 0x63, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x77, 0x73, 0x45, 0x43, 0x32, 0x52, 0x03, 0x65, 0x63, 0x32, 0x12, 0x1e, 0x0a, 0x02, 0x73, 0x33,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x77, 0x73, 0x53, 0x33, 0x52, 0x02, 0x73, 0x33, 0x12, 0x21, 0x0a, 0x03, 0x65, 0x63,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x77, 0x73, 0x45, 0x43, 0x53, 0x52, 0x03, 0x65, 0x63, 0x73, 0x1a, 0xe0, 0x01,
	0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x31, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f,
	0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x62, 0x52, 0x02,
	0x64, 0x62, 0x1a, 0x2c, 0x0a, 0x02, 0x44, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x1a, 0xae, 0x02, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x36, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x33, 0x0a, 0x03, 0x73, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x73, 0x68, 0x52, 0x03, 0x73, 0x73, 0x68, 0x1a, 0x5a,
	0x0a, 0x04, 0x48, 0x74, 0x74, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x45, 0x0a, 0x03, 0x53, 0x73,
	0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xa5, 0x01, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x30, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x0b,
	0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x1a, 0x73, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xe6, 0x01, 0x0a,
	0x08, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0b, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x2e, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xba, 0x02, 0x0a, 0x0b, 0x53, 0x33, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0xa7, 0x01, 0x0a, 0x09, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x22, 0x9f, 0x04, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x6f, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x68, 0x74,
	0x74, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x68, 0x74, 0x74, 0x70, 0x12, 0x24, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x02, 0x73, 0x33, 0x1a, 0x31, 0x0a, 0x0b, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0xd5, 0x01,
	0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x74, 0x72, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x92, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x6f, 0x67,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x24,
	0x0a, 0x02, 0x73, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x6f, 0x67,
	0x52, 0x02, 0x73, 0x33, 0x1a, 0x86, 0x01, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0xf5, 0x09,
	0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x54, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x6f, 0x67,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x61, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x6f, 0x77, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x72, 0x6f, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x94, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x61,
	0x0a, 0x10, 0x72, 0x6f, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x2e, 0x52, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x0e, 0x72, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3f, 0x0a, 0x11, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x6f, 0x67,
	0x52, 0x10, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x1a, 0x72, 0x0a, 0x0d, 0x52, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x57, 0x0a, 0x09, 0x52, 0x6f, 0x77, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x1a,
	0xec, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x6f, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x35,
	0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x9e, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4d, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x32, 0x9f, 0x02, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x67, 0x73, 0x56, 0x33, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x67, 0x73, 0x56, 0x33, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x01, 0x12, 0x56, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x12, 0x6b, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x03, 0x90, 0x02, 0x01, 0x42, 0x40, 0x5a, 0x3e, 0x62, 0x75, 0x66, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x72, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_core_v1_audit_proto_rawDescOnce sync.Once
	file_core_v1_audit_proto_rawDescData = file_core_v1_audit_proto_rawDesc
)

func file_core_v1_audit_proto_rawDescGZIP() []byte {
	file_core_v1_audit_proto_rawDescOnce.Do(func() {
		file_core_v1_audit_proto_rawDescData = protoimpl.X.CompressGZIP(file_core_v1_audit_proto_rawDescData)
	})
	return file_core_v1_audit_proto_rawDescData
}

var file_core_v1_audit_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_core_v1_audit_proto_msgTypes = make([]protoimpl.MessageInfo, 79)
var file_core_v1_audit_proto_goTypes = []interface{}{
	(PolicyType)(0),                                        // 0: core.v1.PolicyType
	(*HardwareInfo)(nil),                                   // 1: core.v1.HardwareInfo
	(*SoftwareInfo)(nil),                                   // 2: core.v1.SoftwareInfo
	(*DeviceInfo)(nil),                                     // 3: core.v1.DeviceInfo
	(*RowLevelMetric)(nil),                                 // 4: core.v1.RowLevelMetric
	(*TriggeredPolicy)(nil),                                // 5: core.v1.TriggeredPolicy
	(*TriggeredFilterPolicy)(nil),                          // 6: core.v1.TriggeredFilterPolicy
	(*TriggeredDecryptionPolicy)(nil),                      // 7: core.v1.TriggeredDecryptionPolicy
	(*TriggeredMaskingPolicy)(nil),                         // 8: core.v1.TriggeredMaskingPolicy
	(*TriggeredBlockPolicy)(nil),                           // 9: core.v1.TriggeredBlockPolicy
	(*TiggeredAllowPolicy)(nil),                            // 10: core.v1.TiggeredAllowPolicy
	(*Error)(nil),                                          // 11: core.v1.Error
	(*LogRequest)(nil),                                     // 12: core.v1.LogRequest
	(*Session)(nil),                                        // 13: core.v1.Session
	(*FormalLog)(nil),                                      // 14: core.v1.FormalLog
	(*TenantLogsInfra)(nil),                                // 15: core.v1.TenantLogsInfra
	(*LogStorageS3)(nil),                                   // 16: core.v1.LogStorageS3
	(*CsvOrParquetColumn)(nil),                             // 17: core.v1.CsvOrParquetColumn
	(*Image)(nil),                                          // 18: core.v1.Image
	(*S3Object)(nil),                                       // 19: core.v1.S3Object
	(*GetAggregationRequest)(nil),                          // 20: core.v1.GetAggregationRequest
	(*GetAggregationResponse)(nil),                         // 21: core.v1.GetAggregationResponse
	(*ListLogsV3Request)(nil),                              // 22: core.v1.ListLogsV3Request
	(*ListLogsV3Response)(nil),                             // 23: core.v1.ListLogsV3Response
	(*GetGroupByAggregationRequest)(nil),                   // 24: core.v1.GetGroupByAggregationRequest
	(*GetGroupByAggregationResponse)(nil),                  // 25: core.v1.GetGroupByAggregationResponse
	(*SshSessionData)(nil),                                 // 26: core.v1.SshSessionData
	(*Application)(nil),                                    // 27: core.v1.Application
	(*Log)(nil),                                            // 28: core.v1.Log
	(*PolicyLog)(nil),                                      // 29: core.v1.PolicyLog
	(*StreamLog)(nil),                                      // 30: core.v1.StreamLog
	(*Network)(nil),                                        // 31: core.v1.Network
	(*PolicySuspensionRequest)(nil),                        // 32: core.v1.PolicySuspensionRequest
	(*PolicySuspensionRequestApproval)(nil),                // 33: core.v1.PolicySuspensionRequestApproval
	(*SuspendedPolicy)(nil),                                // 34: core.v1.SuspendedPolicy
	(*SessionLog)(nil),                                     // 35: core.v1.SessionLog
	(*SidecarLog)(nil),                                     // 36: core.v1.SidecarLog
	(*UserLog)(nil),                                        // 37: core.v1.UserLog
	(*AwsEC2)(nil),                                         // 38: core.v1.AwsEC2
	(*AwsS3)(nil),                                          // 39: core.v1.AwsS3
	(*AwsECS)(nil),                                         // 40: core.v1.AwsECS
	(*ResourceLog)(nil),                                    // 41: core.v1.ResourceLog
	(*TimeInfo)(nil),                                       // 42: core.v1.TimeInfo
	(*Header)(nil),                                         // 43: core.v1.Header
	(*HttpHeaders)(nil),                                    // 44: core.v1.HttpHeaders
	(*HttpBody)(nil),                                       // 45: core.v1.HttpBody
	(*HttpRequest)(nil),                                    // 46: core.v1.HttpRequest
	(*S3ObjectLog)(nil),                                    // 47: core.v1.S3ObjectLog
	(*RequestLog)(nil),                                     // 48: core.v1.RequestLog
	(*ErrorInfo)(nil),                                      // 49: core.v1.ErrorInfo
	(*ResponseLog)(nil),                                    // 50: core.v1.ResponseLog
	(*ListLogsV3Response_Aggregations)(nil),                // 51: core.v1.ListLogsV3Response.Aggregations
	(*ListLogsV3Response_Bucket)(nil),                      // 52: core.v1.ListLogsV3Response.Bucket
	(*ListLogsV3Response_GroupByBucket)(nil),               // 53: core.v1.ListLogsV3Response.GroupByBucket
	(*ListLogsV3Response_DateBucket)(nil),                  // 54: core.v1.ListLogsV3Response.DateBucket
	(*GetGroupByAggregationResponse_Bucket)(nil),           // 55: core.v1.GetGroupByAggregationResponse.Bucket
	(*StreamLog_SshData)(nil),                              // 56: core.v1.StreamLog.SshData
	(*UserLog_Formal)(nil),                                 // 57: core.v1.UserLog.Formal
	(*UserLog_Native)(nil),                                 // 58: core.v1.UserLog.Native
	(*UserLog_Formal_UserInfo)(nil),                        // 59: core.v1.UserLog.Formal.UserInfo
	(*AwsECS_Cluster)(nil),                                 // 60: core.v1.AwsECS.Cluster
	(*AwsECS_Service)(nil),                                 // 61: core.v1.AwsECS.Service
	(*AwsECS_Task)(nil),                                    // 62: core.v1.AwsECS.Task
	(*ResourceLog_Aws)(nil),                                // 63: core.v1.ResourceLog.Aws
	(*ResourceLog_Datastore)(nil),                          // 64: core.v1.ResourceLog.Datastore
	(*ResourceLog_Instance)(nil),                           // 65: core.v1.ResourceLog.Instance
	(*ResourceLog_Datastore_Db)(nil),                       // 66: core.v1.ResourceLog.Datastore.Db
	(*ResourceLog_Instance_Http)(nil),                      // 67: core.v1.ResourceLog.Instance.Http
	(*ResourceLog_Instance_Ssh)(nil),                       // 68: core.v1.ResourceLog.Instance.Ssh
	(*HttpHeaders_Headers)(nil),                            // 69: core.v1.HttpHeaders.Headers
	(*S3ObjectLog_ImageInfo)(nil),                          // 70: core.v1.S3ObjectLog.ImageInfo
	(*RequestLog_Application)(nil),                         // 71: core.v1.RequestLog.Application
	(*RequestLog_DatastoreQuery)(nil),                      // 72: core.v1.RequestLog.DatastoreQuery
	(*ResponseLog_HttpResponse)(nil),                       // 73: core.v1.ResponseLog.HttpResponse
	(*ResponseLog_DatastoreInfo)(nil),                      // 74: core.v1.ResponseLog.DatastoreInfo
	(*ResponseLog_DatastoreInfo_Column)(nil),               // 75: core.v1.ResponseLog.DatastoreInfo.Column
	(*ResponseLog_DatastoreInfo_RowsCount)(nil),            // 76: core.v1.ResponseLog.DatastoreInfo.RowsCount
	(*ResponseLog_DatastoreInfo_DataDomain)(nil),           // 77: core.v1.ResponseLog.DatastoreInfo.DataDomain
	(*ResponseLog_DatastoreInfo_DataDomainOwner)(nil),      // 78: core.v1.ResponseLog.DatastoreInfo.DataDomainOwner
	(*ResponseLog_DatastoreInfo_Column_RowValueCount)(nil), // 79: core.v1.ResponseLog.DatastoreInfo.Column.RowValueCount
	(*timestamppb.Timestamp)(nil),                          // 80: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                            // 81: google.protobuf.Duration
	(*Column)(nil),                                         // 82: core.v1.Column
	(*Domain)(nil),                                         // 83: core.v1.Domain
	(*ListMetadata)(nil),                                   // 84: core.v1.ListMetadata
}
var file_core_v1_audit_proto_depIdxs = []int32{
	2,   // 0: core.v1.DeviceInfo.software:type_name -> core.v1.SoftwareInfo
	1,   // 1: core.v1.DeviceInfo.hardware:type_name -> core.v1.HardwareInfo
	80,  // 2: core.v1.RowLevelMetric.ts:type_name -> google.protobuf.Timestamp
	80,  // 3: core.v1.RowLevelMetric.timebucket:type_name -> google.protobuf.Timestamp
	0,   // 4: core.v1.TriggeredPolicy.policy_type:type_name -> core.v1.PolicyType
	80,  // 5: core.v1.LogRequest.start_time:type_name -> google.protobuf.Timestamp
	80,  // 6: core.v1.LogRequest.end_time:type_name -> google.protobuf.Timestamp
	81,  // 7: core.v1.LogRequest.sidecar_processing_time:type_name -> google.protobuf.Duration
	80,  // 8: core.v1.LogRequest.data_store_start_time:type_name -> google.protobuf.Timestamp
	80,  // 9: core.v1.LogRequest.data_store_end_time:type_name -> google.protobuf.Timestamp
	81,  // 10: core.v1.LogRequest.data_store_processing_time:type_name -> google.protobuf.Duration
	82,  // 11: core.v1.LogRequest.returned_columns:type_name -> core.v1.Column
	5,   // 12: core.v1.LogRequest.triggered_policies:type_name -> core.v1.TriggeredPolicy
	4,   // 13: core.v1.LogRequest.row_level_metrics:type_name -> core.v1.RowLevelMetric
	19,  // 14: core.v1.LogRequest.returned_objects:type_name -> core.v1.S3Object
	83,  // 15: core.v1.LogRequest.data_domains:type_name -> core.v1.Domain
	13,  // 16: core.v1.FormalLog.session:type_name -> core.v1.Session
	12,  // 17: core.v1.FormalLog.request:type_name -> core.v1.LogRequest
	80,  // 18: core.v1.FormalLog.created_at:type_name -> google.protobuf.Timestamp
	80,  // 19: core.v1.FormalLog.timestamp:type_name -> google.protobuf.Timestamp
	17,  // 20: core.v1.S3Object.columns:type_name -> core.v1.CsvOrParquetColumn
	18,  // 21: core.v1.S3Object.image:type_name -> core.v1.Image
	28,  // 22: core.v1.ListLogsV3Response.logs:type_name -> core.v1.Log
	51,  // 23: core.v1.ListLogsV3Response.aggregations:type_name -> core.v1.ListLogsV3Response.Aggregations
	84,  // 24: core.v1.ListLogsV3Response.list_metadata:type_name -> core.v1.ListMetadata
	55,  // 25: core.v1.GetGroupByAggregationResponse.buckets:type_name -> core.v1.GetGroupByAggregationResponse.Bucket
	80,  // 26: core.v1.SshSessionData.timestamp:type_name -> google.protobuf.Timestamp
	80,  // 27: core.v1.Log.send_at:type_name -> google.protobuf.Timestamp
	80,  // 28: core.v1.Log.received_at:type_name -> google.protobuf.Timestamp
	35,  // 29: core.v1.Log.session:type_name -> core.v1.SessionLog
	36,  // 30: core.v1.Log.sidecar:type_name -> core.v1.SidecarLog
	37,  // 31: core.v1.Log.user:type_name -> core.v1.UserLog
	41,  // 32: core.v1.Log.resource:type_name -> core.v1.ResourceLog
	48,  // 33: core.v1.Log.request:type_name -> core.v1.RequestLog
	50,  // 34: core.v1.Log.response:type_name -> core.v1.ResponseLog
	30,  // 35: core.v1.Log.stream:type_name -> core.v1.StreamLog
	29,  // 36: core.v1.Log.triggered_policies:type_name -> core.v1.PolicyLog
	42,  // 37: core.v1.StreamLog.time:type_name -> core.v1.TimeInfo
	56,  // 38: core.v1.StreamLog.ssh:type_name -> core.v1.StreamLog.SshData
	80,  // 39: core.v1.PolicySuspensionRequest.duration:type_name -> google.protobuf.Timestamp
	80,  // 40: core.v1.PolicySuspensionRequest.created_at:type_name -> google.protobuf.Timestamp
	80,  // 41: core.v1.PolicySuspensionRequest.updated_at:type_name -> google.protobuf.Timestamp
	33,  // 42: core.v1.PolicySuspensionRequest.approval:type_name -> core.v1.PolicySuspensionRequestApproval
	80,  // 43: core.v1.PolicySuspensionRequestApproval.created_at:type_name -> google.protobuf.Timestamp
	29,  // 44: core.v1.SuspendedPolicy.policy:type_name -> core.v1.PolicyLog
	32,  // 45: core.v1.SuspendedPolicy.suspension_request:type_name -> core.v1.PolicySuspensionRequest
	80,  // 46: core.v1.SessionLog.start_time:type_name -> google.protobuf.Timestamp
	80,  // 47: core.v1.SessionLog.end_time:type_name -> google.protobuf.Timestamp
	81,  // 48: core.v1.SessionLog.duration:type_name -> google.protobuf.Duration
	31,  // 49: core.v1.SessionLog.network:type_name -> core.v1.Network
	34,  // 50: core.v1.SessionLog.suspended_policies:type_name -> core.v1.SuspendedPolicy
	11,  // 51: core.v1.SessionLog.error:type_name -> core.v1.Error
	27,  // 52: core.v1.SessionLog.application:type_name -> core.v1.Application
	3,   // 53: core.v1.SessionLog.device:type_name -> core.v1.DeviceInfo
	57,  // 54: core.v1.UserLog.formal:type_name -> core.v1.UserLog.Formal
	58,  // 55: core.v1.UserLog.native:type_name -> core.v1.UserLog.Native
	60,  // 56: core.v1.AwsECS.cluster:type_name -> core.v1.AwsECS.Cluster
	61,  // 57: core.v1.AwsECS.service:type_name -> core.v1.AwsECS.Service
	62,  // 58: core.v1.AwsECS.task:type_name -> core.v1.AwsECS.Task
	63,  // 59: core.v1.ResourceLog.aws:type_name -> core.v1.ResourceLog.Aws
	64,  // 60: core.v1.ResourceLog.datastore:type_name -> core.v1.ResourceLog.Datastore
	65,  // 61: core.v1.ResourceLog.instance:type_name -> core.v1.ResourceLog.Instance
	80,  // 62: core.v1.TimeInfo.start:type_name -> google.protobuf.Timestamp
	80,  // 63: core.v1.TimeInfo.end:type_name -> google.protobuf.Timestamp
	81,  // 64: core.v1.TimeInfo.processing:type_name -> google.protobuf.Duration
	69,  // 65: core.v1.HttpHeaders.received:type_name -> core.v1.HttpHeaders.Headers
	69,  // 66: core.v1.HttpHeaders.sent:type_name -> core.v1.HttpHeaders.Headers
	44,  // 67: core.v1.HttpRequest.headers:type_name -> core.v1.HttpHeaders
	45,  // 68: core.v1.HttpRequest.body:type_name -> core.v1.HttpBody
	70,  // 69: core.v1.S3ObjectLog.image:type_name -> core.v1.S3ObjectLog.ImageInfo
	42,  // 70: core.v1.RequestLog.time:type_name -> core.v1.TimeInfo
	71,  // 71: core.v1.RequestLog.application:type_name -> core.v1.RequestLog.Application
	72,  // 72: core.v1.RequestLog.query:type_name -> core.v1.RequestLog.DatastoreQuery
	46,  // 73: core.v1.RequestLog.http:type_name -> core.v1.HttpRequest
	47,  // 74: core.v1.RequestLog.s3:type_name -> core.v1.S3ObjectLog
	42,  // 75: core.v1.ResponseLog.time:type_name -> core.v1.TimeInfo
	49,  // 76: core.v1.ResponseLog.error:type_name -> core.v1.ErrorInfo
	74,  // 77: core.v1.ResponseLog.datastore:type_name -> core.v1.ResponseLog.DatastoreInfo
	73,  // 78: core.v1.ResponseLog.http:type_name -> core.v1.ResponseLog.HttpResponse
	47,  // 79: core.v1.ResponseLog.s3:type_name -> core.v1.S3ObjectLog
	54,  // 80: core.v1.ListLogsV3Response.Aggregations.logs_over_time:type_name -> core.v1.ListLogsV3Response.DateBucket
	52,  // 81: core.v1.ListLogsV3Response.Aggregations.session_types:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 82: core.v1.ListLogsV3Response.Aggregations.session_ids:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 83: core.v1.ListLogsV3Response.Aggregations.session_application_names:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 84: core.v1.ListLogsV3Response.Aggregations.session_client_ip_addresses:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 85: core.v1.ListLogsV3Response.Aggregations.session_server_ip_addresses:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 86: core.v1.ListLogsV3Response.Aggregations.query_fingerprints:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 87: core.v1.ListLogsV3Response.Aggregations.query_received:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 88: core.v1.ListLogsV3Response.Aggregations.query_sent:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 89: core.v1.ListLogsV3Response.Aggregations.resource_ids:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 90: core.v1.ListLogsV3Response.Aggregations.resource_names:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 91: core.v1.ListLogsV3Response.Aggregations.resource_types:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 92: core.v1.ListLogsV3Response.Aggregations.resource_hostnames:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 93: core.v1.ListLogsV3Response.Aggregations.resoruce_technologies:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 94: core.v1.ListLogsV3Response.Aggregations.sidecar_names:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 95: core.v1.ListLogsV3Response.Aggregations.sidecar_ids:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 96: core.v1.ListLogsV3Response.Aggregations.sidecar_technologies:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 97: core.v1.ListLogsV3Response.Aggregations.user_types:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 98: core.v1.ListLogsV3Response.Aggregations.user_sub_types:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 99: core.v1.ListLogsV3Response.Aggregations.user_emails:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 100: core.v1.ListLogsV3Response.Aggregations.user_usernames:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 101: core.v1.ListLogsV3Response.Aggregations.user_ids:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 102: core.v1.ListLogsV3Response.Aggregations.end_user_types:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 103: core.v1.ListLogsV3Response.Aggregations.end_user_names:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 104: core.v1.ListLogsV3Response.Aggregations.end_user_emails:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 105: core.v1.ListLogsV3Response.Aggregations.triggered_policy_ids:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 106: core.v1.ListLogsV3Response.Aggregations.triggered_policy_names:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 107: core.v1.ListLogsV3Response.Aggregations.triggered_policy_statuses:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 108: core.v1.ListLogsV3Response.Aggregations.triggered_policy_types:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 109: core.v1.ListLogsV3Response.Aggregations.response_data_volumes:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 110: core.v1.ListLogsV3Response.Aggregations.response_returned_column_names:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 111: core.v1.ListLogsV3Response.Aggregations.response_returned_column_paths:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 112: core.v1.ListLogsV3Response.Aggregations.response_returned_column_data_labels:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 113: core.v1.ListLogsV3Response.Aggregations.response_rows_sent:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 114: core.v1.ListLogsV3Response.Aggregations.response_rows_received:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 115: core.v1.ListLogsV3Response.Aggregations.device_system_versions:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 116: core.v1.ListLogsV3Response.Aggregations.device_kernel_versions:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 117: core.v1.ListLogsV3Response.Aggregations.device_computer_names:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 118: core.v1.ListLogsV3Response.Aggregations.device_user_names:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 119: core.v1.ListLogsV3Response.Aggregations.device_model_names:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 120: core.v1.ListLogsV3Response.Aggregations.device_model_identifiers:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 121: core.v1.ListLogsV3Response.Aggregations.device_model_numbers:type_name -> core.v1.ListLogsV3Response.Bucket
	52,  // 122: core.v1.ListLogsV3Response.Aggregations.device_serial_numbers:type_name -> core.v1.ListLogsV3Response.Bucket
	53,  // 123: core.v1.ListLogsV3Response.GroupByBucket.buckets:type_name -> core.v1.ListLogsV3Response.GroupByBucket
	53,  // 124: core.v1.ListLogsV3Response.DateBucket.buckets:type_name -> core.v1.ListLogsV3Response.GroupByBucket
	55,  // 125: core.v1.GetGroupByAggregationResponse.Bucket.buckets:type_name -> core.v1.GetGroupByAggregationResponse.Bucket
	59,  // 126: core.v1.UserLog.Formal.user:type_name -> core.v1.UserLog.Formal.UserInfo
	59,  // 127: core.v1.UserLog.Formal.end_user:type_name -> core.v1.UserLog.Formal.UserInfo
	38,  // 128: core.v1.ResourceLog.Aws.ec2:type_name -> core.v1.AwsEC2
	39,  // 129: core.v1.ResourceLog.Aws.s3:type_name -> core.v1.AwsS3
	40,  // 130: core.v1.ResourceLog.Aws.ecs:type_name -> core.v1.AwsECS
	66,  // 131: core.v1.ResourceLog.Datastore.db:type_name -> core.v1.ResourceLog.Datastore.Db
	67,  // 132: core.v1.ResourceLog.Instance.http:type_name -> core.v1.ResourceLog.Instance.Http
	68,  // 133: core.v1.ResourceLog.Instance.ssh:type_name -> core.v1.ResourceLog.Instance.Ssh
	43,  // 134: core.v1.HttpHeaders.Headers.headers:type_name -> core.v1.Header
	44,  // 135: core.v1.ResponseLog.HttpResponse.headers:type_name -> core.v1.HttpHeaders
	45,  // 136: core.v1.ResponseLog.HttpResponse.body:type_name -> core.v1.HttpBody
	75,  // 137: core.v1.ResponseLog.DatastoreInfo.returned_columns:type_name -> core.v1.ResponseLog.DatastoreInfo.Column
	77,  // 138: core.v1.ResponseLog.DatastoreInfo.returned_data_domains:type_name -> core.v1.ResponseLog.DatastoreInfo.DataDomain
	76,  // 139: core.v1.ResponseLog.DatastoreInfo.rows_count:type_name -> core.v1.ResponseLog.DatastoreInfo.RowsCount
	79,  // 140: core.v1.ResponseLog.DatastoreInfo.Column.row_values_count:type_name -> core.v1.ResponseLog.DatastoreInfo.Column.RowValueCount
	29,  // 141: core.v1.ResponseLog.DatastoreInfo.Column.enforced_policies:type_name -> core.v1.PolicyLog
	78,  // 142: core.v1.ResponseLog.DatastoreInfo.DataDomain.owners:type_name -> core.v1.ResponseLog.DatastoreInfo.DataDomainOwner
	22,  // 143: core.v1.AuditService.ListLogsV3:input_type -> core.v1.ListLogsV3Request
	20,  // 144: core.v1.AuditService.GetAggregation:input_type -> core.v1.GetAggregationRequest
	24,  // 145: core.v1.AuditService.GetGroupByAggregation:input_type -> core.v1.GetGroupByAggregationRequest
	23,  // 146: core.v1.AuditService.ListLogsV3:output_type -> core.v1.ListLogsV3Response
	21,  // 147: core.v1.AuditService.GetAggregation:output_type -> core.v1.GetAggregationResponse
	25,  // 148: core.v1.AuditService.GetGroupByAggregation:output_type -> core.v1.GetGroupByAggregationResponse
	146, // [146:149] is the sub-list for method output_type
	143, // [143:146] is the sub-list for method input_type
	143, // [143:143] is the sub-list for extension type_name
	143, // [143:143] is the sub-list for extension extendee
	0,   // [0:143] is the sub-list for field type_name
}

func init() { file_core_v1_audit_proto_init() }
func file_core_v1_audit_proto_init() {
	if File_core_v1_audit_proto != nil {
		return
	}
	file_core_v1_inventory_proto_init()
	file_core_v1_list_metadata_proto_init()
	file_core_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_core_v1_audit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowLevelMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggeredPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggeredFilterPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggeredDecryptionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggeredMaskingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggeredBlockPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TiggeredAllowPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Session); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormalLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantLogsInfra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogStorageS3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvOrParquetColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogsV3Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogsV3Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupByAggregationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupByAggregationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SshSessionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySuspensionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicySuspensionRequestApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspendedPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SidecarLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsEC2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsS3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsECS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3ObjectLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogsV3Response_Aggregations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogsV3Response_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogsV3Response_GroupByBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogsV3Response_DateBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupByAggregationResponse_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamLog_SshData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLog_Formal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLog_Native); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLog_Formal_UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsECS_Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsECS_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsECS_Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLog_Aws); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLog_Datastore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLog_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLog_Datastore_Db); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLog_Instance_Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceLog_Instance_Ssh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHeaders_Headers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*S3ObjectLog_ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestLog_Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestLog_DatastoreQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseLog_HttpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseLog_DatastoreInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseLog_DatastoreInfo_Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseLog_DatastoreInfo_RowsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseLog_DatastoreInfo_DataDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseLog_DatastoreInfo_DataDomainOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_core_v1_audit_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseLog_DatastoreInfo_Column_RowValueCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_core_v1_audit_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   79,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_core_v1_audit_proto_goTypes,
		DependencyIndexes: file_core_v1_audit_proto_depIdxs,
		EnumInfos:         file_core_v1_audit_proto_enumTypes,
		MessageInfos:      file_core_v1_audit_proto_msgTypes,
	}.Build()
	File_core_v1_audit_proto = out.File
	file_core_v1_audit_proto_rawDesc = nil
	file_core_v1_audit_proto_goTypes = nil
	file_core_v1_audit_proto_depIdxs = nil
}
