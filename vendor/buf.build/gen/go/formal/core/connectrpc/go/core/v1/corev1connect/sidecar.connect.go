// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/sidecar.proto

package corev1connect

import (
	v1 "buf.build/gen/go/formal/core/protocolbuffers/go/core/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SidecarServiceName is the fully-qualified name of the SidecarService service.
	SidecarServiceName = "core.v1.SidecarService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SidecarServiceListSidecarsProcedure is the fully-qualified name of the SidecarService's
	// ListSidecars RPC.
	SidecarServiceListSidecarsProcedure = "/core.v1.SidecarService/ListSidecars"
	// SidecarServiceGetSidecarProcedure is the fully-qualified name of the SidecarService's GetSidecar
	// RPC.
	SidecarServiceGetSidecarProcedure = "/core.v1.SidecarService/GetSidecar"
	// SidecarServiceGetSidecarApiKeyProcedure is the fully-qualified name of the SidecarService's
	// GetSidecarApiKey RPC.
	SidecarServiceGetSidecarApiKeyProcedure = "/core.v1.SidecarService/GetSidecarApiKey"
	// SidecarServiceListSidecarInstancesProcedure is the fully-qualified name of the SidecarService's
	// ListSidecarInstances RPC.
	SidecarServiceListSidecarInstancesProcedure = "/core.v1.SidecarService/ListSidecarInstances"
	// SidecarServiceCreateSidecarProcedure is the fully-qualified name of the SidecarService's
	// CreateSidecar RPC.
	SidecarServiceCreateSidecarProcedure = "/core.v1.SidecarService/CreateSidecar"
	// SidecarServiceUpdateSidecarProcedure is the fully-qualified name of the SidecarService's
	// UpdateSidecar RPC.
	SidecarServiceUpdateSidecarProcedure = "/core.v1.SidecarService/UpdateSidecar"
	// SidecarServiceDeleteSidecarProcedure is the fully-qualified name of the SidecarService's
	// DeleteSidecar RPC.
	SidecarServiceDeleteSidecarProcedure = "/core.v1.SidecarService/DeleteSidecar"
	// SidecarServiceGetSidecarResourceLinkProcedure is the fully-qualified name of the SidecarService's
	// GetSidecarResourceLink RPC.
	SidecarServiceGetSidecarResourceLinkProcedure = "/core.v1.SidecarService/GetSidecarResourceLink"
	// SidecarServiceListSidecarResourceLinksProcedure is the fully-qualified name of the
	// SidecarService's ListSidecarResourceLinks RPC.
	SidecarServiceListSidecarResourceLinksProcedure = "/core.v1.SidecarService/ListSidecarResourceLinks"
	// SidecarServiceCreateSidecarResourceLinkProcedure is the fully-qualified name of the
	// SidecarService's CreateSidecarResourceLink RPC.
	SidecarServiceCreateSidecarResourceLinkProcedure = "/core.v1.SidecarService/CreateSidecarResourceLink"
	// SidecarServiceDeleteSidecarResourceLinkProcedure is the fully-qualified name of the
	// SidecarService's DeleteSidecarResourceLink RPC.
	SidecarServiceDeleteSidecarResourceLinkProcedure = "/core.v1.SidecarService/DeleteSidecarResourceLink"
	// SidecarServiceUpdateSidecarResourceLinkProcedure is the fully-qualified name of the
	// SidecarService's UpdateSidecarResourceLink RPC.
	SidecarServiceUpdateSidecarResourceLinkProcedure = "/core.v1.SidecarService/UpdateSidecarResourceLink"
	// SidecarServiceGetSidecarOwnerProcedure is the fully-qualified name of the SidecarService's
	// GetSidecarOwner RPC.
	SidecarServiceGetSidecarOwnerProcedure = "/core.v1.SidecarService/GetSidecarOwner"
	// SidecarServiceListSidecarOwnersProcedure is the fully-qualified name of the SidecarService's
	// ListSidecarOwners RPC.
	SidecarServiceListSidecarOwnersProcedure = "/core.v1.SidecarService/ListSidecarOwners"
	// SidecarServiceCreateSidecarOwnerProcedure is the fully-qualified name of the SidecarService's
	// CreateSidecarOwner RPC.
	SidecarServiceCreateSidecarOwnerProcedure = "/core.v1.SidecarService/CreateSidecarOwner"
	// SidecarServiceDeleteSidecarOwnerProcedure is the fully-qualified name of the SidecarService's
	// DeleteSidecarOwner RPC.
	SidecarServiceDeleteSidecarOwnerProcedure = "/core.v1.SidecarService/DeleteSidecarOwner"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sidecarServiceServiceDescriptor                         = v1.File_core_v1_sidecar_proto.Services().ByName("SidecarService")
	sidecarServiceListSidecarsMethodDescriptor              = sidecarServiceServiceDescriptor.Methods().ByName("ListSidecars")
	sidecarServiceGetSidecarMethodDescriptor                = sidecarServiceServiceDescriptor.Methods().ByName("GetSidecar")
	sidecarServiceGetSidecarApiKeyMethodDescriptor          = sidecarServiceServiceDescriptor.Methods().ByName("GetSidecarApiKey")
	sidecarServiceListSidecarInstancesMethodDescriptor      = sidecarServiceServiceDescriptor.Methods().ByName("ListSidecarInstances")
	sidecarServiceCreateSidecarMethodDescriptor             = sidecarServiceServiceDescriptor.Methods().ByName("CreateSidecar")
	sidecarServiceUpdateSidecarMethodDescriptor             = sidecarServiceServiceDescriptor.Methods().ByName("UpdateSidecar")
	sidecarServiceDeleteSidecarMethodDescriptor             = sidecarServiceServiceDescriptor.Methods().ByName("DeleteSidecar")
	sidecarServiceGetSidecarResourceLinkMethodDescriptor    = sidecarServiceServiceDescriptor.Methods().ByName("GetSidecarResourceLink")
	sidecarServiceListSidecarResourceLinksMethodDescriptor  = sidecarServiceServiceDescriptor.Methods().ByName("ListSidecarResourceLinks")
	sidecarServiceCreateSidecarResourceLinkMethodDescriptor = sidecarServiceServiceDescriptor.Methods().ByName("CreateSidecarResourceLink")
	sidecarServiceDeleteSidecarResourceLinkMethodDescriptor = sidecarServiceServiceDescriptor.Methods().ByName("DeleteSidecarResourceLink")
	sidecarServiceUpdateSidecarResourceLinkMethodDescriptor = sidecarServiceServiceDescriptor.Methods().ByName("UpdateSidecarResourceLink")
	sidecarServiceGetSidecarOwnerMethodDescriptor           = sidecarServiceServiceDescriptor.Methods().ByName("GetSidecarOwner")
	sidecarServiceListSidecarOwnersMethodDescriptor         = sidecarServiceServiceDescriptor.Methods().ByName("ListSidecarOwners")
	sidecarServiceCreateSidecarOwnerMethodDescriptor        = sidecarServiceServiceDescriptor.Methods().ByName("CreateSidecarOwner")
	sidecarServiceDeleteSidecarOwnerMethodDescriptor        = sidecarServiceServiceDescriptor.Methods().ByName("DeleteSidecarOwner")
)

// SidecarServiceClient is a client for the core.v1.SidecarService service.
type SidecarServiceClient interface {
	ListSidecars(context.Context, *connect.Request[v1.ListSidecarsRequest]) (*connect.Response[v1.ListSidecarsResponse], error)
	GetSidecar(context.Context, *connect.Request[v1.GetSidecarRequest]) (*connect.Response[v1.GetSidecarResponse], error)
	GetSidecarApiKey(context.Context, *connect.Request[v1.GetSidecarApiKeyRequest]) (*connect.Response[v1.GetSidecarApiKeyResponse], error)
	ListSidecarInstances(context.Context, *connect.Request[v1.ListSidecarInstancesRequest]) (*connect.Response[v1.ListSidecarInstancesResponse], error)
	CreateSidecar(context.Context, *connect.Request[v1.CreateSidecarRequest]) (*connect.Response[v1.CreateSidecarResponse], error)
	UpdateSidecar(context.Context, *connect.Request[v1.UpdateSidecarRequest]) (*connect.Response[v1.UpdateSidecarResponse], error)
	DeleteSidecar(context.Context, *connect.Request[v1.DeleteSidecarRequest]) (*connect.Response[v1.DeleteSidecarResponse], error)
	GetSidecarResourceLink(context.Context, *connect.Request[v1.GetSidecarResourceLinkRequest]) (*connect.Response[v1.GetSidecarResourceLinkResponse], error)
	ListSidecarResourceLinks(context.Context, *connect.Request[v1.ListSidecarResourceLinksRequest]) (*connect.Response[v1.ListSidecarResourceLinksResponse], error)
	CreateSidecarResourceLink(context.Context, *connect.Request[v1.CreateSidecarResourceLinkRequest]) (*connect.Response[v1.CreateSidecarResourceLinkResponse], error)
	DeleteSidecarResourceLink(context.Context, *connect.Request[v1.DeleteSidecarResourceLinkRequest]) (*connect.Response[v1.DeleteSidecarResourceLinkResponse], error)
	UpdateSidecarResourceLink(context.Context, *connect.Request[v1.UpdateSidecarResourceLinkRequest]) (*connect.Response[v1.UpdateSidecarResourceLinkResponse], error)
	// Owners
	GetSidecarOwner(context.Context, *connect.Request[v1.GetSidecarOwnerRequest]) (*connect.Response[v1.GetSidecarOwnerResponse], error)
	ListSidecarOwners(context.Context, *connect.Request[v1.ListSidecarOwnersRequest]) (*connect.Response[v1.ListSidecarOwnersResponse], error)
	CreateSidecarOwner(context.Context, *connect.Request[v1.CreateSidecarOwnerRequest]) (*connect.Response[v1.CreateSidecarOwnerResponse], error)
	DeleteSidecarOwner(context.Context, *connect.Request[v1.DeleteSidecarOwnerRequest]) (*connect.Response[v1.DeleteSidecarOwnerResponse], error)
}

// NewSidecarServiceClient constructs a client for the core.v1.SidecarService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSidecarServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SidecarServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sidecarServiceClient{
		listSidecars: connect.NewClient[v1.ListSidecarsRequest, v1.ListSidecarsResponse](
			httpClient,
			baseURL+SidecarServiceListSidecarsProcedure,
			connect.WithSchema(sidecarServiceListSidecarsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getSidecar: connect.NewClient[v1.GetSidecarRequest, v1.GetSidecarResponse](
			httpClient,
			baseURL+SidecarServiceGetSidecarProcedure,
			connect.WithSchema(sidecarServiceGetSidecarMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getSidecarApiKey: connect.NewClient[v1.GetSidecarApiKeyRequest, v1.GetSidecarApiKeyResponse](
			httpClient,
			baseURL+SidecarServiceGetSidecarApiKeyProcedure,
			connect.WithSchema(sidecarServiceGetSidecarApiKeyMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listSidecarInstances: connect.NewClient[v1.ListSidecarInstancesRequest, v1.ListSidecarInstancesResponse](
			httpClient,
			baseURL+SidecarServiceListSidecarInstancesProcedure,
			connect.WithSchema(sidecarServiceListSidecarInstancesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createSidecar: connect.NewClient[v1.CreateSidecarRequest, v1.CreateSidecarResponse](
			httpClient,
			baseURL+SidecarServiceCreateSidecarProcedure,
			connect.WithSchema(sidecarServiceCreateSidecarMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateSidecar: connect.NewClient[v1.UpdateSidecarRequest, v1.UpdateSidecarResponse](
			httpClient,
			baseURL+SidecarServiceUpdateSidecarProcedure,
			connect.WithSchema(sidecarServiceUpdateSidecarMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSidecar: connect.NewClient[v1.DeleteSidecarRequest, v1.DeleteSidecarResponse](
			httpClient,
			baseURL+SidecarServiceDeleteSidecarProcedure,
			connect.WithSchema(sidecarServiceDeleteSidecarMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSidecarResourceLink: connect.NewClient[v1.GetSidecarResourceLinkRequest, v1.GetSidecarResourceLinkResponse](
			httpClient,
			baseURL+SidecarServiceGetSidecarResourceLinkProcedure,
			connect.WithSchema(sidecarServiceGetSidecarResourceLinkMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listSidecarResourceLinks: connect.NewClient[v1.ListSidecarResourceLinksRequest, v1.ListSidecarResourceLinksResponse](
			httpClient,
			baseURL+SidecarServiceListSidecarResourceLinksProcedure,
			connect.WithSchema(sidecarServiceListSidecarResourceLinksMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createSidecarResourceLink: connect.NewClient[v1.CreateSidecarResourceLinkRequest, v1.CreateSidecarResourceLinkResponse](
			httpClient,
			baseURL+SidecarServiceCreateSidecarResourceLinkProcedure,
			connect.WithSchema(sidecarServiceCreateSidecarResourceLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSidecarResourceLink: connect.NewClient[v1.DeleteSidecarResourceLinkRequest, v1.DeleteSidecarResourceLinkResponse](
			httpClient,
			baseURL+SidecarServiceDeleteSidecarResourceLinkProcedure,
			connect.WithSchema(sidecarServiceDeleteSidecarResourceLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateSidecarResourceLink: connect.NewClient[v1.UpdateSidecarResourceLinkRequest, v1.UpdateSidecarResourceLinkResponse](
			httpClient,
			baseURL+SidecarServiceUpdateSidecarResourceLinkProcedure,
			connect.WithSchema(sidecarServiceUpdateSidecarResourceLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSidecarOwner: connect.NewClient[v1.GetSidecarOwnerRequest, v1.GetSidecarOwnerResponse](
			httpClient,
			baseURL+SidecarServiceGetSidecarOwnerProcedure,
			connect.WithSchema(sidecarServiceGetSidecarOwnerMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listSidecarOwners: connect.NewClient[v1.ListSidecarOwnersRequest, v1.ListSidecarOwnersResponse](
			httpClient,
			baseURL+SidecarServiceListSidecarOwnersProcedure,
			connect.WithSchema(sidecarServiceListSidecarOwnersMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createSidecarOwner: connect.NewClient[v1.CreateSidecarOwnerRequest, v1.CreateSidecarOwnerResponse](
			httpClient,
			baseURL+SidecarServiceCreateSidecarOwnerProcedure,
			connect.WithSchema(sidecarServiceCreateSidecarOwnerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSidecarOwner: connect.NewClient[v1.DeleteSidecarOwnerRequest, v1.DeleteSidecarOwnerResponse](
			httpClient,
			baseURL+SidecarServiceDeleteSidecarOwnerProcedure,
			connect.WithSchema(sidecarServiceDeleteSidecarOwnerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sidecarServiceClient implements SidecarServiceClient.
type sidecarServiceClient struct {
	listSidecars              *connect.Client[v1.ListSidecarsRequest, v1.ListSidecarsResponse]
	getSidecar                *connect.Client[v1.GetSidecarRequest, v1.GetSidecarResponse]
	getSidecarApiKey          *connect.Client[v1.GetSidecarApiKeyRequest, v1.GetSidecarApiKeyResponse]
	listSidecarInstances      *connect.Client[v1.ListSidecarInstancesRequest, v1.ListSidecarInstancesResponse]
	createSidecar             *connect.Client[v1.CreateSidecarRequest, v1.CreateSidecarResponse]
	updateSidecar             *connect.Client[v1.UpdateSidecarRequest, v1.UpdateSidecarResponse]
	deleteSidecar             *connect.Client[v1.DeleteSidecarRequest, v1.DeleteSidecarResponse]
	getSidecarResourceLink    *connect.Client[v1.GetSidecarResourceLinkRequest, v1.GetSidecarResourceLinkResponse]
	listSidecarResourceLinks  *connect.Client[v1.ListSidecarResourceLinksRequest, v1.ListSidecarResourceLinksResponse]
	createSidecarResourceLink *connect.Client[v1.CreateSidecarResourceLinkRequest, v1.CreateSidecarResourceLinkResponse]
	deleteSidecarResourceLink *connect.Client[v1.DeleteSidecarResourceLinkRequest, v1.DeleteSidecarResourceLinkResponse]
	updateSidecarResourceLink *connect.Client[v1.UpdateSidecarResourceLinkRequest, v1.UpdateSidecarResourceLinkResponse]
	getSidecarOwner           *connect.Client[v1.GetSidecarOwnerRequest, v1.GetSidecarOwnerResponse]
	listSidecarOwners         *connect.Client[v1.ListSidecarOwnersRequest, v1.ListSidecarOwnersResponse]
	createSidecarOwner        *connect.Client[v1.CreateSidecarOwnerRequest, v1.CreateSidecarOwnerResponse]
	deleteSidecarOwner        *connect.Client[v1.DeleteSidecarOwnerRequest, v1.DeleteSidecarOwnerResponse]
}

// ListSidecars calls core.v1.SidecarService.ListSidecars.
func (c *sidecarServiceClient) ListSidecars(ctx context.Context, req *connect.Request[v1.ListSidecarsRequest]) (*connect.Response[v1.ListSidecarsResponse], error) {
	return c.listSidecars.CallUnary(ctx, req)
}

// GetSidecar calls core.v1.SidecarService.GetSidecar.
func (c *sidecarServiceClient) GetSidecar(ctx context.Context, req *connect.Request[v1.GetSidecarRequest]) (*connect.Response[v1.GetSidecarResponse], error) {
	return c.getSidecar.CallUnary(ctx, req)
}

// GetSidecarApiKey calls core.v1.SidecarService.GetSidecarApiKey.
func (c *sidecarServiceClient) GetSidecarApiKey(ctx context.Context, req *connect.Request[v1.GetSidecarApiKeyRequest]) (*connect.Response[v1.GetSidecarApiKeyResponse], error) {
	return c.getSidecarApiKey.CallUnary(ctx, req)
}

// ListSidecarInstances calls core.v1.SidecarService.ListSidecarInstances.
func (c *sidecarServiceClient) ListSidecarInstances(ctx context.Context, req *connect.Request[v1.ListSidecarInstancesRequest]) (*connect.Response[v1.ListSidecarInstancesResponse], error) {
	return c.listSidecarInstances.CallUnary(ctx, req)
}

// CreateSidecar calls core.v1.SidecarService.CreateSidecar.
func (c *sidecarServiceClient) CreateSidecar(ctx context.Context, req *connect.Request[v1.CreateSidecarRequest]) (*connect.Response[v1.CreateSidecarResponse], error) {
	return c.createSidecar.CallUnary(ctx, req)
}

// UpdateSidecar calls core.v1.SidecarService.UpdateSidecar.
func (c *sidecarServiceClient) UpdateSidecar(ctx context.Context, req *connect.Request[v1.UpdateSidecarRequest]) (*connect.Response[v1.UpdateSidecarResponse], error) {
	return c.updateSidecar.CallUnary(ctx, req)
}

// DeleteSidecar calls core.v1.SidecarService.DeleteSidecar.
func (c *sidecarServiceClient) DeleteSidecar(ctx context.Context, req *connect.Request[v1.DeleteSidecarRequest]) (*connect.Response[v1.DeleteSidecarResponse], error) {
	return c.deleteSidecar.CallUnary(ctx, req)
}

// GetSidecarResourceLink calls core.v1.SidecarService.GetSidecarResourceLink.
func (c *sidecarServiceClient) GetSidecarResourceLink(ctx context.Context, req *connect.Request[v1.GetSidecarResourceLinkRequest]) (*connect.Response[v1.GetSidecarResourceLinkResponse], error) {
	return c.getSidecarResourceLink.CallUnary(ctx, req)
}

// ListSidecarResourceLinks calls core.v1.SidecarService.ListSidecarResourceLinks.
func (c *sidecarServiceClient) ListSidecarResourceLinks(ctx context.Context, req *connect.Request[v1.ListSidecarResourceLinksRequest]) (*connect.Response[v1.ListSidecarResourceLinksResponse], error) {
	return c.listSidecarResourceLinks.CallUnary(ctx, req)
}

// CreateSidecarResourceLink calls core.v1.SidecarService.CreateSidecarResourceLink.
func (c *sidecarServiceClient) CreateSidecarResourceLink(ctx context.Context, req *connect.Request[v1.CreateSidecarResourceLinkRequest]) (*connect.Response[v1.CreateSidecarResourceLinkResponse], error) {
	return c.createSidecarResourceLink.CallUnary(ctx, req)
}

// DeleteSidecarResourceLink calls core.v1.SidecarService.DeleteSidecarResourceLink.
func (c *sidecarServiceClient) DeleteSidecarResourceLink(ctx context.Context, req *connect.Request[v1.DeleteSidecarResourceLinkRequest]) (*connect.Response[v1.DeleteSidecarResourceLinkResponse], error) {
	return c.deleteSidecarResourceLink.CallUnary(ctx, req)
}

// UpdateSidecarResourceLink calls core.v1.SidecarService.UpdateSidecarResourceLink.
func (c *sidecarServiceClient) UpdateSidecarResourceLink(ctx context.Context, req *connect.Request[v1.UpdateSidecarResourceLinkRequest]) (*connect.Response[v1.UpdateSidecarResourceLinkResponse], error) {
	return c.updateSidecarResourceLink.CallUnary(ctx, req)
}

// GetSidecarOwner calls core.v1.SidecarService.GetSidecarOwner.
func (c *sidecarServiceClient) GetSidecarOwner(ctx context.Context, req *connect.Request[v1.GetSidecarOwnerRequest]) (*connect.Response[v1.GetSidecarOwnerResponse], error) {
	return c.getSidecarOwner.CallUnary(ctx, req)
}

// ListSidecarOwners calls core.v1.SidecarService.ListSidecarOwners.
func (c *sidecarServiceClient) ListSidecarOwners(ctx context.Context, req *connect.Request[v1.ListSidecarOwnersRequest]) (*connect.Response[v1.ListSidecarOwnersResponse], error) {
	return c.listSidecarOwners.CallUnary(ctx, req)
}

// CreateSidecarOwner calls core.v1.SidecarService.CreateSidecarOwner.
func (c *sidecarServiceClient) CreateSidecarOwner(ctx context.Context, req *connect.Request[v1.CreateSidecarOwnerRequest]) (*connect.Response[v1.CreateSidecarOwnerResponse], error) {
	return c.createSidecarOwner.CallUnary(ctx, req)
}

// DeleteSidecarOwner calls core.v1.SidecarService.DeleteSidecarOwner.
func (c *sidecarServiceClient) DeleteSidecarOwner(ctx context.Context, req *connect.Request[v1.DeleteSidecarOwnerRequest]) (*connect.Response[v1.DeleteSidecarOwnerResponse], error) {
	return c.deleteSidecarOwner.CallUnary(ctx, req)
}

// SidecarServiceHandler is an implementation of the core.v1.SidecarService service.
type SidecarServiceHandler interface {
	ListSidecars(context.Context, *connect.Request[v1.ListSidecarsRequest]) (*connect.Response[v1.ListSidecarsResponse], error)
	GetSidecar(context.Context, *connect.Request[v1.GetSidecarRequest]) (*connect.Response[v1.GetSidecarResponse], error)
	GetSidecarApiKey(context.Context, *connect.Request[v1.GetSidecarApiKeyRequest]) (*connect.Response[v1.GetSidecarApiKeyResponse], error)
	ListSidecarInstances(context.Context, *connect.Request[v1.ListSidecarInstancesRequest]) (*connect.Response[v1.ListSidecarInstancesResponse], error)
	CreateSidecar(context.Context, *connect.Request[v1.CreateSidecarRequest]) (*connect.Response[v1.CreateSidecarResponse], error)
	UpdateSidecar(context.Context, *connect.Request[v1.UpdateSidecarRequest]) (*connect.Response[v1.UpdateSidecarResponse], error)
	DeleteSidecar(context.Context, *connect.Request[v1.DeleteSidecarRequest]) (*connect.Response[v1.DeleteSidecarResponse], error)
	GetSidecarResourceLink(context.Context, *connect.Request[v1.GetSidecarResourceLinkRequest]) (*connect.Response[v1.GetSidecarResourceLinkResponse], error)
	ListSidecarResourceLinks(context.Context, *connect.Request[v1.ListSidecarResourceLinksRequest]) (*connect.Response[v1.ListSidecarResourceLinksResponse], error)
	CreateSidecarResourceLink(context.Context, *connect.Request[v1.CreateSidecarResourceLinkRequest]) (*connect.Response[v1.CreateSidecarResourceLinkResponse], error)
	DeleteSidecarResourceLink(context.Context, *connect.Request[v1.DeleteSidecarResourceLinkRequest]) (*connect.Response[v1.DeleteSidecarResourceLinkResponse], error)
	UpdateSidecarResourceLink(context.Context, *connect.Request[v1.UpdateSidecarResourceLinkRequest]) (*connect.Response[v1.UpdateSidecarResourceLinkResponse], error)
	// Owners
	GetSidecarOwner(context.Context, *connect.Request[v1.GetSidecarOwnerRequest]) (*connect.Response[v1.GetSidecarOwnerResponse], error)
	ListSidecarOwners(context.Context, *connect.Request[v1.ListSidecarOwnersRequest]) (*connect.Response[v1.ListSidecarOwnersResponse], error)
	CreateSidecarOwner(context.Context, *connect.Request[v1.CreateSidecarOwnerRequest]) (*connect.Response[v1.CreateSidecarOwnerResponse], error)
	DeleteSidecarOwner(context.Context, *connect.Request[v1.DeleteSidecarOwnerRequest]) (*connect.Response[v1.DeleteSidecarOwnerResponse], error)
}

// NewSidecarServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSidecarServiceHandler(svc SidecarServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sidecarServiceListSidecarsHandler := connect.NewUnaryHandler(
		SidecarServiceListSidecarsProcedure,
		svc.ListSidecars,
		connect.WithSchema(sidecarServiceListSidecarsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceGetSidecarHandler := connect.NewUnaryHandler(
		SidecarServiceGetSidecarProcedure,
		svc.GetSidecar,
		connect.WithSchema(sidecarServiceGetSidecarMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceGetSidecarApiKeyHandler := connect.NewUnaryHandler(
		SidecarServiceGetSidecarApiKeyProcedure,
		svc.GetSidecarApiKey,
		connect.WithSchema(sidecarServiceGetSidecarApiKeyMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceListSidecarInstancesHandler := connect.NewUnaryHandler(
		SidecarServiceListSidecarInstancesProcedure,
		svc.ListSidecarInstances,
		connect.WithSchema(sidecarServiceListSidecarInstancesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceCreateSidecarHandler := connect.NewUnaryHandler(
		SidecarServiceCreateSidecarProcedure,
		svc.CreateSidecar,
		connect.WithSchema(sidecarServiceCreateSidecarMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceUpdateSidecarHandler := connect.NewUnaryHandler(
		SidecarServiceUpdateSidecarProcedure,
		svc.UpdateSidecar,
		connect.WithSchema(sidecarServiceUpdateSidecarMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceDeleteSidecarHandler := connect.NewUnaryHandler(
		SidecarServiceDeleteSidecarProcedure,
		svc.DeleteSidecar,
		connect.WithSchema(sidecarServiceDeleteSidecarMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceGetSidecarResourceLinkHandler := connect.NewUnaryHandler(
		SidecarServiceGetSidecarResourceLinkProcedure,
		svc.GetSidecarResourceLink,
		connect.WithSchema(sidecarServiceGetSidecarResourceLinkMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceListSidecarResourceLinksHandler := connect.NewUnaryHandler(
		SidecarServiceListSidecarResourceLinksProcedure,
		svc.ListSidecarResourceLinks,
		connect.WithSchema(sidecarServiceListSidecarResourceLinksMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceCreateSidecarResourceLinkHandler := connect.NewUnaryHandler(
		SidecarServiceCreateSidecarResourceLinkProcedure,
		svc.CreateSidecarResourceLink,
		connect.WithSchema(sidecarServiceCreateSidecarResourceLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceDeleteSidecarResourceLinkHandler := connect.NewUnaryHandler(
		SidecarServiceDeleteSidecarResourceLinkProcedure,
		svc.DeleteSidecarResourceLink,
		connect.WithSchema(sidecarServiceDeleteSidecarResourceLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceUpdateSidecarResourceLinkHandler := connect.NewUnaryHandler(
		SidecarServiceUpdateSidecarResourceLinkProcedure,
		svc.UpdateSidecarResourceLink,
		connect.WithSchema(sidecarServiceUpdateSidecarResourceLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceGetSidecarOwnerHandler := connect.NewUnaryHandler(
		SidecarServiceGetSidecarOwnerProcedure,
		svc.GetSidecarOwner,
		connect.WithSchema(sidecarServiceGetSidecarOwnerMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceListSidecarOwnersHandler := connect.NewUnaryHandler(
		SidecarServiceListSidecarOwnersProcedure,
		svc.ListSidecarOwners,
		connect.WithSchema(sidecarServiceListSidecarOwnersMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceCreateSidecarOwnerHandler := connect.NewUnaryHandler(
		SidecarServiceCreateSidecarOwnerProcedure,
		svc.CreateSidecarOwner,
		connect.WithSchema(sidecarServiceCreateSidecarOwnerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceDeleteSidecarOwnerHandler := connect.NewUnaryHandler(
		SidecarServiceDeleteSidecarOwnerProcedure,
		svc.DeleteSidecarOwner,
		connect.WithSchema(sidecarServiceDeleteSidecarOwnerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.v1.SidecarService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SidecarServiceListSidecarsProcedure:
			sidecarServiceListSidecarsHandler.ServeHTTP(w, r)
		case SidecarServiceGetSidecarProcedure:
			sidecarServiceGetSidecarHandler.ServeHTTP(w, r)
		case SidecarServiceGetSidecarApiKeyProcedure:
			sidecarServiceGetSidecarApiKeyHandler.ServeHTTP(w, r)
		case SidecarServiceListSidecarInstancesProcedure:
			sidecarServiceListSidecarInstancesHandler.ServeHTTP(w, r)
		case SidecarServiceCreateSidecarProcedure:
			sidecarServiceCreateSidecarHandler.ServeHTTP(w, r)
		case SidecarServiceUpdateSidecarProcedure:
			sidecarServiceUpdateSidecarHandler.ServeHTTP(w, r)
		case SidecarServiceDeleteSidecarProcedure:
			sidecarServiceDeleteSidecarHandler.ServeHTTP(w, r)
		case SidecarServiceGetSidecarResourceLinkProcedure:
			sidecarServiceGetSidecarResourceLinkHandler.ServeHTTP(w, r)
		case SidecarServiceListSidecarResourceLinksProcedure:
			sidecarServiceListSidecarResourceLinksHandler.ServeHTTP(w, r)
		case SidecarServiceCreateSidecarResourceLinkProcedure:
			sidecarServiceCreateSidecarResourceLinkHandler.ServeHTTP(w, r)
		case SidecarServiceDeleteSidecarResourceLinkProcedure:
			sidecarServiceDeleteSidecarResourceLinkHandler.ServeHTTP(w, r)
		case SidecarServiceUpdateSidecarResourceLinkProcedure:
			sidecarServiceUpdateSidecarResourceLinkHandler.ServeHTTP(w, r)
		case SidecarServiceGetSidecarOwnerProcedure:
			sidecarServiceGetSidecarOwnerHandler.ServeHTTP(w, r)
		case SidecarServiceListSidecarOwnersProcedure:
			sidecarServiceListSidecarOwnersHandler.ServeHTTP(w, r)
		case SidecarServiceCreateSidecarOwnerProcedure:
			sidecarServiceCreateSidecarOwnerHandler.ServeHTTP(w, r)
		case SidecarServiceDeleteSidecarOwnerProcedure:
			sidecarServiceDeleteSidecarOwnerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSidecarServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSidecarServiceHandler struct{}

func (UnimplementedSidecarServiceHandler) ListSidecars(context.Context, *connect.Request[v1.ListSidecarsRequest]) (*connect.Response[v1.ListSidecarsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.ListSidecars is not implemented"))
}

func (UnimplementedSidecarServiceHandler) GetSidecar(context.Context, *connect.Request[v1.GetSidecarRequest]) (*connect.Response[v1.GetSidecarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.GetSidecar is not implemented"))
}

func (UnimplementedSidecarServiceHandler) GetSidecarApiKey(context.Context, *connect.Request[v1.GetSidecarApiKeyRequest]) (*connect.Response[v1.GetSidecarApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.GetSidecarApiKey is not implemented"))
}

func (UnimplementedSidecarServiceHandler) ListSidecarInstances(context.Context, *connect.Request[v1.ListSidecarInstancesRequest]) (*connect.Response[v1.ListSidecarInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.ListSidecarInstances is not implemented"))
}

func (UnimplementedSidecarServiceHandler) CreateSidecar(context.Context, *connect.Request[v1.CreateSidecarRequest]) (*connect.Response[v1.CreateSidecarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.CreateSidecar is not implemented"))
}

func (UnimplementedSidecarServiceHandler) UpdateSidecar(context.Context, *connect.Request[v1.UpdateSidecarRequest]) (*connect.Response[v1.UpdateSidecarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.UpdateSidecar is not implemented"))
}

func (UnimplementedSidecarServiceHandler) DeleteSidecar(context.Context, *connect.Request[v1.DeleteSidecarRequest]) (*connect.Response[v1.DeleteSidecarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.DeleteSidecar is not implemented"))
}

func (UnimplementedSidecarServiceHandler) GetSidecarResourceLink(context.Context, *connect.Request[v1.GetSidecarResourceLinkRequest]) (*connect.Response[v1.GetSidecarResourceLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.GetSidecarResourceLink is not implemented"))
}

func (UnimplementedSidecarServiceHandler) ListSidecarResourceLinks(context.Context, *connect.Request[v1.ListSidecarResourceLinksRequest]) (*connect.Response[v1.ListSidecarResourceLinksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.ListSidecarResourceLinks is not implemented"))
}

func (UnimplementedSidecarServiceHandler) CreateSidecarResourceLink(context.Context, *connect.Request[v1.CreateSidecarResourceLinkRequest]) (*connect.Response[v1.CreateSidecarResourceLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.CreateSidecarResourceLink is not implemented"))
}

func (UnimplementedSidecarServiceHandler) DeleteSidecarResourceLink(context.Context, *connect.Request[v1.DeleteSidecarResourceLinkRequest]) (*connect.Response[v1.DeleteSidecarResourceLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.DeleteSidecarResourceLink is not implemented"))
}

func (UnimplementedSidecarServiceHandler) UpdateSidecarResourceLink(context.Context, *connect.Request[v1.UpdateSidecarResourceLinkRequest]) (*connect.Response[v1.UpdateSidecarResourceLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.UpdateSidecarResourceLink is not implemented"))
}

func (UnimplementedSidecarServiceHandler) GetSidecarOwner(context.Context, *connect.Request[v1.GetSidecarOwnerRequest]) (*connect.Response[v1.GetSidecarOwnerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.GetSidecarOwner is not implemented"))
}

func (UnimplementedSidecarServiceHandler) ListSidecarOwners(context.Context, *connect.Request[v1.ListSidecarOwnersRequest]) (*connect.Response[v1.ListSidecarOwnersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.ListSidecarOwners is not implemented"))
}

func (UnimplementedSidecarServiceHandler) CreateSidecarOwner(context.Context, *connect.Request[v1.CreateSidecarOwnerRequest]) (*connect.Response[v1.CreateSidecarOwnerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.CreateSidecarOwner is not implemented"))
}

func (UnimplementedSidecarServiceHandler) DeleteSidecarOwner(context.Context, *connect.Request[v1.DeleteSidecarOwnerRequest]) (*connect.Response[v1.DeleteSidecarOwnerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SidecarService.DeleteSidecarOwner is not implemented"))
}
