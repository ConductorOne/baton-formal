// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/policy.proto

package corev1connect

import (
	v1 "buf.build/gen/go/formal/core/protocolbuffers/go/core/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PolicyServiceName is the fully-qualified name of the PolicyService service.
	PolicyServiceName = "core.v1.PolicyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PolicyServiceListPoliciesProcedure is the fully-qualified name of the PolicyService's
	// ListPolicies RPC.
	PolicyServiceListPoliciesProcedure = "/core.v1.PolicyService/ListPolicies"
	// PolicyServiceGetPolicyProcedure is the fully-qualified name of the PolicyService's GetPolicy RPC.
	PolicyServiceGetPolicyProcedure = "/core.v1.PolicyService/GetPolicy"
	// PolicyServiceGetPolicyCodeValidityProcedure is the fully-qualified name of the PolicyService's
	// GetPolicyCodeValidity RPC.
	PolicyServiceGetPolicyCodeValidityProcedure = "/core.v1.PolicyService/GetPolicyCodeValidity"
	// PolicyServiceGetPolicySuggestionsProcedure is the fully-qualified name of the PolicyService's
	// GetPolicySuggestions RPC.
	PolicyServiceGetPolicySuggestionsProcedure = "/core.v1.PolicyService/GetPolicySuggestions"
	// PolicyServiceCreatePolicyProcedure is the fully-qualified name of the PolicyService's
	// CreatePolicy RPC.
	PolicyServiceCreatePolicyProcedure = "/core.v1.PolicyService/CreatePolicy"
	// PolicyServiceUpdatePolicyProcedure is the fully-qualified name of the PolicyService's
	// UpdatePolicy RPC.
	PolicyServiceUpdatePolicyProcedure = "/core.v1.PolicyService/UpdatePolicy"
	// PolicyServiceDeletePolicyProcedure is the fully-qualified name of the PolicyService's
	// DeletePolicy RPC.
	PolicyServiceDeletePolicyProcedure = "/core.v1.PolicyService/DeletePolicy"
	// PolicyServiceGetExternalDataLoaderProcedure is the fully-qualified name of the PolicyService's
	// GetExternalDataLoader RPC.
	PolicyServiceGetExternalDataLoaderProcedure = "/core.v1.PolicyService/GetExternalDataLoader"
	// PolicyServiceListExternalDataLoadersProcedure is the fully-qualified name of the PolicyService's
	// ListExternalDataLoaders RPC.
	PolicyServiceListExternalDataLoadersProcedure = "/core.v1.PolicyService/ListExternalDataLoaders"
	// PolicyServiceCreateExternalDataLoaderProcedure is the fully-qualified name of the PolicyService's
	// CreateExternalDataLoader RPC.
	PolicyServiceCreateExternalDataLoaderProcedure = "/core.v1.PolicyService/CreateExternalDataLoader"
	// PolicyServiceDeleteExternalDataLoaderProcedure is the fully-qualified name of the PolicyService's
	// DeleteExternalDataLoader RPC.
	PolicyServiceDeleteExternalDataLoaderProcedure = "/core.v1.PolicyService/DeleteExternalDataLoader"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	policyServiceServiceDescriptor                        = v1.File_core_v1_policy_proto.Services().ByName("PolicyService")
	policyServiceListPoliciesMethodDescriptor             = policyServiceServiceDescriptor.Methods().ByName("ListPolicies")
	policyServiceGetPolicyMethodDescriptor                = policyServiceServiceDescriptor.Methods().ByName("GetPolicy")
	policyServiceGetPolicyCodeValidityMethodDescriptor    = policyServiceServiceDescriptor.Methods().ByName("GetPolicyCodeValidity")
	policyServiceGetPolicySuggestionsMethodDescriptor     = policyServiceServiceDescriptor.Methods().ByName("GetPolicySuggestions")
	policyServiceCreatePolicyMethodDescriptor             = policyServiceServiceDescriptor.Methods().ByName("CreatePolicy")
	policyServiceUpdatePolicyMethodDescriptor             = policyServiceServiceDescriptor.Methods().ByName("UpdatePolicy")
	policyServiceDeletePolicyMethodDescriptor             = policyServiceServiceDescriptor.Methods().ByName("DeletePolicy")
	policyServiceGetExternalDataLoaderMethodDescriptor    = policyServiceServiceDescriptor.Methods().ByName("GetExternalDataLoader")
	policyServiceListExternalDataLoadersMethodDescriptor  = policyServiceServiceDescriptor.Methods().ByName("ListExternalDataLoaders")
	policyServiceCreateExternalDataLoaderMethodDescriptor = policyServiceServiceDescriptor.Methods().ByName("CreateExternalDataLoader")
	policyServiceDeleteExternalDataLoaderMethodDescriptor = policyServiceServiceDescriptor.Methods().ByName("DeleteExternalDataLoader")
)

// PolicyServiceClient is a client for the core.v1.PolicyService service.
type PolicyServiceClient interface {
	ListPolicies(context.Context, *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error)
	GetPolicy(context.Context, *connect.Request[v1.GetPolicyRequest]) (*connect.Response[v1.GetPolicyResponse], error)
	GetPolicyCodeValidity(context.Context, *connect.Request[v1.GetPolicyCodeValidityRequest]) (*connect.Response[v1.GetPolicyCodeValidityResponse], error)
	GetPolicySuggestions(context.Context, *connect.Request[v1.GetPolicySuggestionsRequest]) (*connect.Response[v1.GetPolicySuggestionsResponse], error)
	CreatePolicy(context.Context, *connect.Request[v1.CreatePolicyRequest]) (*connect.Response[v1.CreatePolicyResponse], error)
	UpdatePolicy(context.Context, *connect.Request[v1.UpdatePolicyRequest]) (*connect.Response[v1.UpdatePolicyResponse], error)
	DeletePolicy(context.Context, *connect.Request[v1.DeletePolicyRequest]) (*connect.Response[v1.DeletePolicyResponse], error)
	GetExternalDataLoader(context.Context, *connect.Request[v1.GetExternalDataLoaderRequest]) (*connect.Response[v1.GetExternalDataLoaderResponse], error)
	ListExternalDataLoaders(context.Context, *connect.Request[v1.ListExternalDataLoadersRequest]) (*connect.Response[v1.ListExternalDataLoadersResponse], error)
	CreateExternalDataLoader(context.Context, *connect.Request[v1.CreateExternalDataLoaderRequest]) (*connect.Response[v1.CreateExternalDataLoaderResponse], error)
	DeleteExternalDataLoader(context.Context, *connect.Request[v1.DeleteExternalDataLoaderRequest]) (*connect.Response[v1.DeleteExternalDataLoaderResponse], error)
}

// NewPolicyServiceClient constructs a client for the core.v1.PolicyService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPolicyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PolicyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &policyServiceClient{
		listPolicies: connect.NewClient[v1.ListPoliciesRequest, v1.ListPoliciesResponse](
			httpClient,
			baseURL+PolicyServiceListPoliciesProcedure,
			connect.WithSchema(policyServiceListPoliciesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getPolicy: connect.NewClient[v1.GetPolicyRequest, v1.GetPolicyResponse](
			httpClient,
			baseURL+PolicyServiceGetPolicyProcedure,
			connect.WithSchema(policyServiceGetPolicyMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getPolicyCodeValidity: connect.NewClient[v1.GetPolicyCodeValidityRequest, v1.GetPolicyCodeValidityResponse](
			httpClient,
			baseURL+PolicyServiceGetPolicyCodeValidityProcedure,
			connect.WithSchema(policyServiceGetPolicyCodeValidityMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getPolicySuggestions: connect.NewClient[v1.GetPolicySuggestionsRequest, v1.GetPolicySuggestionsResponse](
			httpClient,
			baseURL+PolicyServiceGetPolicySuggestionsProcedure,
			connect.WithSchema(policyServiceGetPolicySuggestionsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createPolicy: connect.NewClient[v1.CreatePolicyRequest, v1.CreatePolicyResponse](
			httpClient,
			baseURL+PolicyServiceCreatePolicyProcedure,
			connect.WithSchema(policyServiceCreatePolicyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePolicy: connect.NewClient[v1.UpdatePolicyRequest, v1.UpdatePolicyResponse](
			httpClient,
			baseURL+PolicyServiceUpdatePolicyProcedure,
			connect.WithSchema(policyServiceUpdatePolicyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePolicy: connect.NewClient[v1.DeletePolicyRequest, v1.DeletePolicyResponse](
			httpClient,
			baseURL+PolicyServiceDeletePolicyProcedure,
			connect.WithSchema(policyServiceDeletePolicyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getExternalDataLoader: connect.NewClient[v1.GetExternalDataLoaderRequest, v1.GetExternalDataLoaderResponse](
			httpClient,
			baseURL+PolicyServiceGetExternalDataLoaderProcedure,
			connect.WithSchema(policyServiceGetExternalDataLoaderMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listExternalDataLoaders: connect.NewClient[v1.ListExternalDataLoadersRequest, v1.ListExternalDataLoadersResponse](
			httpClient,
			baseURL+PolicyServiceListExternalDataLoadersProcedure,
			connect.WithSchema(policyServiceListExternalDataLoadersMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createExternalDataLoader: connect.NewClient[v1.CreateExternalDataLoaderRequest, v1.CreateExternalDataLoaderResponse](
			httpClient,
			baseURL+PolicyServiceCreateExternalDataLoaderProcedure,
			connect.WithSchema(policyServiceCreateExternalDataLoaderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteExternalDataLoader: connect.NewClient[v1.DeleteExternalDataLoaderRequest, v1.DeleteExternalDataLoaderResponse](
			httpClient,
			baseURL+PolicyServiceDeleteExternalDataLoaderProcedure,
			connect.WithSchema(policyServiceDeleteExternalDataLoaderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// policyServiceClient implements PolicyServiceClient.
type policyServiceClient struct {
	listPolicies             *connect.Client[v1.ListPoliciesRequest, v1.ListPoliciesResponse]
	getPolicy                *connect.Client[v1.GetPolicyRequest, v1.GetPolicyResponse]
	getPolicyCodeValidity    *connect.Client[v1.GetPolicyCodeValidityRequest, v1.GetPolicyCodeValidityResponse]
	getPolicySuggestions     *connect.Client[v1.GetPolicySuggestionsRequest, v1.GetPolicySuggestionsResponse]
	createPolicy             *connect.Client[v1.CreatePolicyRequest, v1.CreatePolicyResponse]
	updatePolicy             *connect.Client[v1.UpdatePolicyRequest, v1.UpdatePolicyResponse]
	deletePolicy             *connect.Client[v1.DeletePolicyRequest, v1.DeletePolicyResponse]
	getExternalDataLoader    *connect.Client[v1.GetExternalDataLoaderRequest, v1.GetExternalDataLoaderResponse]
	listExternalDataLoaders  *connect.Client[v1.ListExternalDataLoadersRequest, v1.ListExternalDataLoadersResponse]
	createExternalDataLoader *connect.Client[v1.CreateExternalDataLoaderRequest, v1.CreateExternalDataLoaderResponse]
	deleteExternalDataLoader *connect.Client[v1.DeleteExternalDataLoaderRequest, v1.DeleteExternalDataLoaderResponse]
}

// ListPolicies calls core.v1.PolicyService.ListPolicies.
func (c *policyServiceClient) ListPolicies(ctx context.Context, req *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error) {
	return c.listPolicies.CallUnary(ctx, req)
}

// GetPolicy calls core.v1.PolicyService.GetPolicy.
func (c *policyServiceClient) GetPolicy(ctx context.Context, req *connect.Request[v1.GetPolicyRequest]) (*connect.Response[v1.GetPolicyResponse], error) {
	return c.getPolicy.CallUnary(ctx, req)
}

// GetPolicyCodeValidity calls core.v1.PolicyService.GetPolicyCodeValidity.
func (c *policyServiceClient) GetPolicyCodeValidity(ctx context.Context, req *connect.Request[v1.GetPolicyCodeValidityRequest]) (*connect.Response[v1.GetPolicyCodeValidityResponse], error) {
	return c.getPolicyCodeValidity.CallUnary(ctx, req)
}

// GetPolicySuggestions calls core.v1.PolicyService.GetPolicySuggestions.
func (c *policyServiceClient) GetPolicySuggestions(ctx context.Context, req *connect.Request[v1.GetPolicySuggestionsRequest]) (*connect.Response[v1.GetPolicySuggestionsResponse], error) {
	return c.getPolicySuggestions.CallUnary(ctx, req)
}

// CreatePolicy calls core.v1.PolicyService.CreatePolicy.
func (c *policyServiceClient) CreatePolicy(ctx context.Context, req *connect.Request[v1.CreatePolicyRequest]) (*connect.Response[v1.CreatePolicyResponse], error) {
	return c.createPolicy.CallUnary(ctx, req)
}

// UpdatePolicy calls core.v1.PolicyService.UpdatePolicy.
func (c *policyServiceClient) UpdatePolicy(ctx context.Context, req *connect.Request[v1.UpdatePolicyRequest]) (*connect.Response[v1.UpdatePolicyResponse], error) {
	return c.updatePolicy.CallUnary(ctx, req)
}

// DeletePolicy calls core.v1.PolicyService.DeletePolicy.
func (c *policyServiceClient) DeletePolicy(ctx context.Context, req *connect.Request[v1.DeletePolicyRequest]) (*connect.Response[v1.DeletePolicyResponse], error) {
	return c.deletePolicy.CallUnary(ctx, req)
}

// GetExternalDataLoader calls core.v1.PolicyService.GetExternalDataLoader.
func (c *policyServiceClient) GetExternalDataLoader(ctx context.Context, req *connect.Request[v1.GetExternalDataLoaderRequest]) (*connect.Response[v1.GetExternalDataLoaderResponse], error) {
	return c.getExternalDataLoader.CallUnary(ctx, req)
}

// ListExternalDataLoaders calls core.v1.PolicyService.ListExternalDataLoaders.
func (c *policyServiceClient) ListExternalDataLoaders(ctx context.Context, req *connect.Request[v1.ListExternalDataLoadersRequest]) (*connect.Response[v1.ListExternalDataLoadersResponse], error) {
	return c.listExternalDataLoaders.CallUnary(ctx, req)
}

// CreateExternalDataLoader calls core.v1.PolicyService.CreateExternalDataLoader.
func (c *policyServiceClient) CreateExternalDataLoader(ctx context.Context, req *connect.Request[v1.CreateExternalDataLoaderRequest]) (*connect.Response[v1.CreateExternalDataLoaderResponse], error) {
	return c.createExternalDataLoader.CallUnary(ctx, req)
}

// DeleteExternalDataLoader calls core.v1.PolicyService.DeleteExternalDataLoader.
func (c *policyServiceClient) DeleteExternalDataLoader(ctx context.Context, req *connect.Request[v1.DeleteExternalDataLoaderRequest]) (*connect.Response[v1.DeleteExternalDataLoaderResponse], error) {
	return c.deleteExternalDataLoader.CallUnary(ctx, req)
}

// PolicyServiceHandler is an implementation of the core.v1.PolicyService service.
type PolicyServiceHandler interface {
	ListPolicies(context.Context, *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error)
	GetPolicy(context.Context, *connect.Request[v1.GetPolicyRequest]) (*connect.Response[v1.GetPolicyResponse], error)
	GetPolicyCodeValidity(context.Context, *connect.Request[v1.GetPolicyCodeValidityRequest]) (*connect.Response[v1.GetPolicyCodeValidityResponse], error)
	GetPolicySuggestions(context.Context, *connect.Request[v1.GetPolicySuggestionsRequest]) (*connect.Response[v1.GetPolicySuggestionsResponse], error)
	CreatePolicy(context.Context, *connect.Request[v1.CreatePolicyRequest]) (*connect.Response[v1.CreatePolicyResponse], error)
	UpdatePolicy(context.Context, *connect.Request[v1.UpdatePolicyRequest]) (*connect.Response[v1.UpdatePolicyResponse], error)
	DeletePolicy(context.Context, *connect.Request[v1.DeletePolicyRequest]) (*connect.Response[v1.DeletePolicyResponse], error)
	GetExternalDataLoader(context.Context, *connect.Request[v1.GetExternalDataLoaderRequest]) (*connect.Response[v1.GetExternalDataLoaderResponse], error)
	ListExternalDataLoaders(context.Context, *connect.Request[v1.ListExternalDataLoadersRequest]) (*connect.Response[v1.ListExternalDataLoadersResponse], error)
	CreateExternalDataLoader(context.Context, *connect.Request[v1.CreateExternalDataLoaderRequest]) (*connect.Response[v1.CreateExternalDataLoaderResponse], error)
	DeleteExternalDataLoader(context.Context, *connect.Request[v1.DeleteExternalDataLoaderRequest]) (*connect.Response[v1.DeleteExternalDataLoaderResponse], error)
}

// NewPolicyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPolicyServiceHandler(svc PolicyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	policyServiceListPoliciesHandler := connect.NewUnaryHandler(
		PolicyServiceListPoliciesProcedure,
		svc.ListPolicies,
		connect.WithSchema(policyServiceListPoliciesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	policyServiceGetPolicyHandler := connect.NewUnaryHandler(
		PolicyServiceGetPolicyProcedure,
		svc.GetPolicy,
		connect.WithSchema(policyServiceGetPolicyMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	policyServiceGetPolicyCodeValidityHandler := connect.NewUnaryHandler(
		PolicyServiceGetPolicyCodeValidityProcedure,
		svc.GetPolicyCodeValidity,
		connect.WithSchema(policyServiceGetPolicyCodeValidityMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	policyServiceGetPolicySuggestionsHandler := connect.NewUnaryHandler(
		PolicyServiceGetPolicySuggestionsProcedure,
		svc.GetPolicySuggestions,
		connect.WithSchema(policyServiceGetPolicySuggestionsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	policyServiceCreatePolicyHandler := connect.NewUnaryHandler(
		PolicyServiceCreatePolicyProcedure,
		svc.CreatePolicy,
		connect.WithSchema(policyServiceCreatePolicyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	policyServiceUpdatePolicyHandler := connect.NewUnaryHandler(
		PolicyServiceUpdatePolicyProcedure,
		svc.UpdatePolicy,
		connect.WithSchema(policyServiceUpdatePolicyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	policyServiceDeletePolicyHandler := connect.NewUnaryHandler(
		PolicyServiceDeletePolicyProcedure,
		svc.DeletePolicy,
		connect.WithSchema(policyServiceDeletePolicyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	policyServiceGetExternalDataLoaderHandler := connect.NewUnaryHandler(
		PolicyServiceGetExternalDataLoaderProcedure,
		svc.GetExternalDataLoader,
		connect.WithSchema(policyServiceGetExternalDataLoaderMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	policyServiceListExternalDataLoadersHandler := connect.NewUnaryHandler(
		PolicyServiceListExternalDataLoadersProcedure,
		svc.ListExternalDataLoaders,
		connect.WithSchema(policyServiceListExternalDataLoadersMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	policyServiceCreateExternalDataLoaderHandler := connect.NewUnaryHandler(
		PolicyServiceCreateExternalDataLoaderProcedure,
		svc.CreateExternalDataLoader,
		connect.WithSchema(policyServiceCreateExternalDataLoaderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	policyServiceDeleteExternalDataLoaderHandler := connect.NewUnaryHandler(
		PolicyServiceDeleteExternalDataLoaderProcedure,
		svc.DeleteExternalDataLoader,
		connect.WithSchema(policyServiceDeleteExternalDataLoaderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.v1.PolicyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PolicyServiceListPoliciesProcedure:
			policyServiceListPoliciesHandler.ServeHTTP(w, r)
		case PolicyServiceGetPolicyProcedure:
			policyServiceGetPolicyHandler.ServeHTTP(w, r)
		case PolicyServiceGetPolicyCodeValidityProcedure:
			policyServiceGetPolicyCodeValidityHandler.ServeHTTP(w, r)
		case PolicyServiceGetPolicySuggestionsProcedure:
			policyServiceGetPolicySuggestionsHandler.ServeHTTP(w, r)
		case PolicyServiceCreatePolicyProcedure:
			policyServiceCreatePolicyHandler.ServeHTTP(w, r)
		case PolicyServiceUpdatePolicyProcedure:
			policyServiceUpdatePolicyHandler.ServeHTTP(w, r)
		case PolicyServiceDeletePolicyProcedure:
			policyServiceDeletePolicyHandler.ServeHTTP(w, r)
		case PolicyServiceGetExternalDataLoaderProcedure:
			policyServiceGetExternalDataLoaderHandler.ServeHTTP(w, r)
		case PolicyServiceListExternalDataLoadersProcedure:
			policyServiceListExternalDataLoadersHandler.ServeHTTP(w, r)
		case PolicyServiceCreateExternalDataLoaderProcedure:
			policyServiceCreateExternalDataLoaderHandler.ServeHTTP(w, r)
		case PolicyServiceDeleteExternalDataLoaderProcedure:
			policyServiceDeleteExternalDataLoaderHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPolicyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPolicyServiceHandler struct{}

func (UnimplementedPolicyServiceHandler) ListPolicies(context.Context, *connect.Request[v1.ListPoliciesRequest]) (*connect.Response[v1.ListPoliciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.PolicyService.ListPolicies is not implemented"))
}

func (UnimplementedPolicyServiceHandler) GetPolicy(context.Context, *connect.Request[v1.GetPolicyRequest]) (*connect.Response[v1.GetPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.PolicyService.GetPolicy is not implemented"))
}

func (UnimplementedPolicyServiceHandler) GetPolicyCodeValidity(context.Context, *connect.Request[v1.GetPolicyCodeValidityRequest]) (*connect.Response[v1.GetPolicyCodeValidityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.PolicyService.GetPolicyCodeValidity is not implemented"))
}

func (UnimplementedPolicyServiceHandler) GetPolicySuggestions(context.Context, *connect.Request[v1.GetPolicySuggestionsRequest]) (*connect.Response[v1.GetPolicySuggestionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.PolicyService.GetPolicySuggestions is not implemented"))
}

func (UnimplementedPolicyServiceHandler) CreatePolicy(context.Context, *connect.Request[v1.CreatePolicyRequest]) (*connect.Response[v1.CreatePolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.PolicyService.CreatePolicy is not implemented"))
}

func (UnimplementedPolicyServiceHandler) UpdatePolicy(context.Context, *connect.Request[v1.UpdatePolicyRequest]) (*connect.Response[v1.UpdatePolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.PolicyService.UpdatePolicy is not implemented"))
}

func (UnimplementedPolicyServiceHandler) DeletePolicy(context.Context, *connect.Request[v1.DeletePolicyRequest]) (*connect.Response[v1.DeletePolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.PolicyService.DeletePolicy is not implemented"))
}

func (UnimplementedPolicyServiceHandler) GetExternalDataLoader(context.Context, *connect.Request[v1.GetExternalDataLoaderRequest]) (*connect.Response[v1.GetExternalDataLoaderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.PolicyService.GetExternalDataLoader is not implemented"))
}

func (UnimplementedPolicyServiceHandler) ListExternalDataLoaders(context.Context, *connect.Request[v1.ListExternalDataLoadersRequest]) (*connect.Response[v1.ListExternalDataLoadersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.PolicyService.ListExternalDataLoaders is not implemented"))
}

func (UnimplementedPolicyServiceHandler) CreateExternalDataLoader(context.Context, *connect.Request[v1.CreateExternalDataLoaderRequest]) (*connect.Response[v1.CreateExternalDataLoaderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.PolicyService.CreateExternalDataLoader is not implemented"))
}

func (UnimplementedPolicyServiceHandler) DeleteExternalDataLoader(context.Context, *connect.Request[v1.DeleteExternalDataLoaderRequest]) (*connect.Response[v1.DeleteExternalDataLoaderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.PolicyService.DeleteExternalDataLoader is not implemented"))
}
