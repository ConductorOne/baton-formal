// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/sessions.proto

package corev1connect

import (
	v1 "buf.build/gen/go/formal/core/protocolbuffers/go/core/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SessionServiceName is the fully-qualified name of the SessionService service.
	SessionServiceName = "core.v1.SessionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SessionServiceListSessionsProcedure is the fully-qualified name of the SessionService's
	// ListSessions RPC.
	SessionServiceListSessionsProcedure = "/core.v1.SessionService/ListSessions"
	// SessionServiceGetSessionProcedure is the fully-qualified name of the SessionService's GetSession
	// RPC.
	SessionServiceGetSessionProcedure = "/core.v1.SessionService/GetSession"
	// SessionServiceCancelSessionProcedure is the fully-qualified name of the SessionService's
	// CancelSession RPC.
	SessionServiceCancelSessionProcedure = "/core.v1.SessionService/CancelSession"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sessionServiceServiceDescriptor             = v1.File_core_v1_sessions_proto.Services().ByName("SessionService")
	sessionServiceListSessionsMethodDescriptor  = sessionServiceServiceDescriptor.Methods().ByName("ListSessions")
	sessionServiceGetSessionMethodDescriptor    = sessionServiceServiceDescriptor.Methods().ByName("GetSession")
	sessionServiceCancelSessionMethodDescriptor = sessionServiceServiceDescriptor.Methods().ByName("CancelSession")
)

// SessionServiceClient is a client for the core.v1.SessionService service.
type SessionServiceClient interface {
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error)
	CancelSession(context.Context, *connect.Request[v1.CancelSessionRequest]) (*connect.Response[v1.CancelSessionResponse], error)
}

// NewSessionServiceClient constructs a client for the core.v1.SessionService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSessionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SessionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sessionServiceClient{
		listSessions: connect.NewClient[v1.ListSessionsRequest, v1.ListSessionsResponse](
			httpClient,
			baseURL+SessionServiceListSessionsProcedure,
			connect.WithSchema(sessionServiceListSessionsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getSession: connect.NewClient[v1.GetSessionRequest, v1.GetSessionResponse](
			httpClient,
			baseURL+SessionServiceGetSessionProcedure,
			connect.WithSchema(sessionServiceGetSessionMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		cancelSession: connect.NewClient[v1.CancelSessionRequest, v1.CancelSessionResponse](
			httpClient,
			baseURL+SessionServiceCancelSessionProcedure,
			connect.WithSchema(sessionServiceCancelSessionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sessionServiceClient implements SessionServiceClient.
type sessionServiceClient struct {
	listSessions  *connect.Client[v1.ListSessionsRequest, v1.ListSessionsResponse]
	getSession    *connect.Client[v1.GetSessionRequest, v1.GetSessionResponse]
	cancelSession *connect.Client[v1.CancelSessionRequest, v1.CancelSessionResponse]
}

// ListSessions calls core.v1.SessionService.ListSessions.
func (c *sessionServiceClient) ListSessions(ctx context.Context, req *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return c.listSessions.CallUnary(ctx, req)
}

// GetSession calls core.v1.SessionService.GetSession.
func (c *sessionServiceClient) GetSession(ctx context.Context, req *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error) {
	return c.getSession.CallUnary(ctx, req)
}

// CancelSession calls core.v1.SessionService.CancelSession.
func (c *sessionServiceClient) CancelSession(ctx context.Context, req *connect.Request[v1.CancelSessionRequest]) (*connect.Response[v1.CancelSessionResponse], error) {
	return c.cancelSession.CallUnary(ctx, req)
}

// SessionServiceHandler is an implementation of the core.v1.SessionService service.
type SessionServiceHandler interface {
	ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error)
	GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error)
	CancelSession(context.Context, *connect.Request[v1.CancelSessionRequest]) (*connect.Response[v1.CancelSessionResponse], error)
}

// NewSessionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSessionServiceHandler(svc SessionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sessionServiceListSessionsHandler := connect.NewUnaryHandler(
		SessionServiceListSessionsProcedure,
		svc.ListSessions,
		connect.WithSchema(sessionServiceListSessionsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceGetSessionHandler := connect.NewUnaryHandler(
		SessionServiceGetSessionProcedure,
		svc.GetSession,
		connect.WithSchema(sessionServiceGetSessionMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	sessionServiceCancelSessionHandler := connect.NewUnaryHandler(
		SessionServiceCancelSessionProcedure,
		svc.CancelSession,
		connect.WithSchema(sessionServiceCancelSessionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.v1.SessionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SessionServiceListSessionsProcedure:
			sessionServiceListSessionsHandler.ServeHTTP(w, r)
		case SessionServiceGetSessionProcedure:
			sessionServiceGetSessionHandler.ServeHTTP(w, r)
		case SessionServiceCancelSessionProcedure:
			sessionServiceCancelSessionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSessionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSessionServiceHandler struct{}

func (UnimplementedSessionServiceHandler) ListSessions(context.Context, *connect.Request[v1.ListSessionsRequest]) (*connect.Response[v1.ListSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SessionService.ListSessions is not implemented"))
}

func (UnimplementedSessionServiceHandler) GetSession(context.Context, *connect.Request[v1.GetSessionRequest]) (*connect.Response[v1.GetSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SessionService.GetSession is not implemented"))
}

func (UnimplementedSessionServiceHandler) CancelSession(context.Context, *connect.Request[v1.CancelSessionRequest]) (*connect.Response[v1.CancelSessionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SessionService.CancelSession is not implemented"))
}
