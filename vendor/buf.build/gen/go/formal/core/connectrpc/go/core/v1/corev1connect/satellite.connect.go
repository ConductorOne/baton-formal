// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/satellite.proto

package corev1connect

import (
	v1 "buf.build/gen/go/formal/core/protocolbuffers/go/core/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SatelliteServiceName is the fully-qualified name of the SatelliteService service.
	SatelliteServiceName = "core.v1.SatelliteService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SatelliteServiceCreateSatelliteProcedure is the fully-qualified name of the SatelliteService's
	// CreateSatellite RPC.
	SatelliteServiceCreateSatelliteProcedure = "/core.v1.SatelliteService/CreateSatellite"
	// SatelliteServiceUpdateSatelliteProcedure is the fully-qualified name of the SatelliteService's
	// UpdateSatellite RPC.
	SatelliteServiceUpdateSatelliteProcedure = "/core.v1.SatelliteService/UpdateSatellite"
	// SatelliteServiceDeleteSatelliteProcedure is the fully-qualified name of the SatelliteService's
	// DeleteSatellite RPC.
	SatelliteServiceDeleteSatelliteProcedure = "/core.v1.SatelliteService/DeleteSatellite"
	// SatelliteServiceListSatellitesProcedure is the fully-qualified name of the SatelliteService's
	// ListSatellites RPC.
	SatelliteServiceListSatellitesProcedure = "/core.v1.SatelliteService/ListSatellites"
	// SatelliteServiceGetSatelliteProcedure is the fully-qualified name of the SatelliteService's
	// GetSatellite RPC.
	SatelliteServiceGetSatelliteProcedure = "/core.v1.SatelliteService/GetSatellite"
	// SatelliteServiceGetSatelliteApiKeyProcedure is the fully-qualified name of the SatelliteService's
	// GetSatelliteApiKey RPC.
	SatelliteServiceGetSatelliteApiKeyProcedure = "/core.v1.SatelliteService/GetSatelliteApiKey"
	// SatelliteServiceListSatelliteInstancesProcedure is the fully-qualified name of the
	// SatelliteService's ListSatelliteInstances RPC.
	SatelliteServiceListSatelliteInstancesProcedure = "/core.v1.SatelliteService/ListSatelliteInstances"
	// SatelliteServiceGetSatelliteOwnerProcedure is the fully-qualified name of the SatelliteService's
	// GetSatelliteOwner RPC.
	SatelliteServiceGetSatelliteOwnerProcedure = "/core.v1.SatelliteService/GetSatelliteOwner"
	// SatelliteServiceListSatelliteOwnersProcedure is the fully-qualified name of the
	// SatelliteService's ListSatelliteOwners RPC.
	SatelliteServiceListSatelliteOwnersProcedure = "/core.v1.SatelliteService/ListSatelliteOwners"
	// SatelliteServiceCreateSatelliteOwnerProcedure is the fully-qualified name of the
	// SatelliteService's CreateSatelliteOwner RPC.
	SatelliteServiceCreateSatelliteOwnerProcedure = "/core.v1.SatelliteService/CreateSatelliteOwner"
	// SatelliteServiceDeleteSatelliteOwnerProcedure is the fully-qualified name of the
	// SatelliteService's DeleteSatelliteOwner RPC.
	SatelliteServiceDeleteSatelliteOwnerProcedure = "/core.v1.SatelliteService/DeleteSatelliteOwner"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	satelliteServiceServiceDescriptor                      = v1.File_core_v1_satellite_proto.Services().ByName("SatelliteService")
	satelliteServiceCreateSatelliteMethodDescriptor        = satelliteServiceServiceDescriptor.Methods().ByName("CreateSatellite")
	satelliteServiceUpdateSatelliteMethodDescriptor        = satelliteServiceServiceDescriptor.Methods().ByName("UpdateSatellite")
	satelliteServiceDeleteSatelliteMethodDescriptor        = satelliteServiceServiceDescriptor.Methods().ByName("DeleteSatellite")
	satelliteServiceListSatellitesMethodDescriptor         = satelliteServiceServiceDescriptor.Methods().ByName("ListSatellites")
	satelliteServiceGetSatelliteMethodDescriptor           = satelliteServiceServiceDescriptor.Methods().ByName("GetSatellite")
	satelliteServiceGetSatelliteApiKeyMethodDescriptor     = satelliteServiceServiceDescriptor.Methods().ByName("GetSatelliteApiKey")
	satelliteServiceListSatelliteInstancesMethodDescriptor = satelliteServiceServiceDescriptor.Methods().ByName("ListSatelliteInstances")
	satelliteServiceGetSatelliteOwnerMethodDescriptor      = satelliteServiceServiceDescriptor.Methods().ByName("GetSatelliteOwner")
	satelliteServiceListSatelliteOwnersMethodDescriptor    = satelliteServiceServiceDescriptor.Methods().ByName("ListSatelliteOwners")
	satelliteServiceCreateSatelliteOwnerMethodDescriptor   = satelliteServiceServiceDescriptor.Methods().ByName("CreateSatelliteOwner")
	satelliteServiceDeleteSatelliteOwnerMethodDescriptor   = satelliteServiceServiceDescriptor.Methods().ByName("DeleteSatelliteOwner")
)

// SatelliteServiceClient is a client for the core.v1.SatelliteService service.
type SatelliteServiceClient interface {
	CreateSatellite(context.Context, *connect.Request[v1.CreateSatelliteRequest]) (*connect.Response[v1.CreateSatelliteResponse], error)
	UpdateSatellite(context.Context, *connect.Request[v1.UpdateSatelliteRequest]) (*connect.Response[v1.UpdateSatelliteResponse], error)
	DeleteSatellite(context.Context, *connect.Request[v1.DeleteSatelliteRequest]) (*connect.Response[v1.DeleteSatelliteResponse], error)
	ListSatellites(context.Context, *connect.Request[v1.ListSatellitesRequest]) (*connect.Response[v1.ListSatellitesResponse], error)
	GetSatellite(context.Context, *connect.Request[v1.GetSatelliteRequest]) (*connect.Response[v1.GetSatelliteResponse], error)
	GetSatelliteApiKey(context.Context, *connect.Request[v1.GetSatelliteApiKeyRequest]) (*connect.Response[v1.GetSatelliteApiKeyResponse], error)
	ListSatelliteInstances(context.Context, *connect.Request[v1.ListSatelliteInstancesRequest]) (*connect.Response[v1.ListSatelliteInstancesResponse], error)
	// Owners
	GetSatelliteOwner(context.Context, *connect.Request[v1.GetSatelliteOwnerRequest]) (*connect.Response[v1.GetSatelliteOwnerResponse], error)
	ListSatelliteOwners(context.Context, *connect.Request[v1.ListSatelliteOwnersRequest]) (*connect.Response[v1.ListSatelliteOwnersResponse], error)
	CreateSatelliteOwner(context.Context, *connect.Request[v1.CreateSatelliteOwnerRequest]) (*connect.Response[v1.CreateSatelliteOwnerResponse], error)
	DeleteSatelliteOwner(context.Context, *connect.Request[v1.DeleteSatelliteOwnerRequest]) (*connect.Response[v1.DeleteSatelliteOwnerResponse], error)
}

// NewSatelliteServiceClient constructs a client for the core.v1.SatelliteService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSatelliteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SatelliteServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &satelliteServiceClient{
		createSatellite: connect.NewClient[v1.CreateSatelliteRequest, v1.CreateSatelliteResponse](
			httpClient,
			baseURL+SatelliteServiceCreateSatelliteProcedure,
			connect.WithSchema(satelliteServiceCreateSatelliteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateSatellite: connect.NewClient[v1.UpdateSatelliteRequest, v1.UpdateSatelliteResponse](
			httpClient,
			baseURL+SatelliteServiceUpdateSatelliteProcedure,
			connect.WithSchema(satelliteServiceUpdateSatelliteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSatellite: connect.NewClient[v1.DeleteSatelliteRequest, v1.DeleteSatelliteResponse](
			httpClient,
			baseURL+SatelliteServiceDeleteSatelliteProcedure,
			connect.WithSchema(satelliteServiceDeleteSatelliteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listSatellites: connect.NewClient[v1.ListSatellitesRequest, v1.ListSatellitesResponse](
			httpClient,
			baseURL+SatelliteServiceListSatellitesProcedure,
			connect.WithSchema(satelliteServiceListSatellitesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getSatellite: connect.NewClient[v1.GetSatelliteRequest, v1.GetSatelliteResponse](
			httpClient,
			baseURL+SatelliteServiceGetSatelliteProcedure,
			connect.WithSchema(satelliteServiceGetSatelliteMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getSatelliteApiKey: connect.NewClient[v1.GetSatelliteApiKeyRequest, v1.GetSatelliteApiKeyResponse](
			httpClient,
			baseURL+SatelliteServiceGetSatelliteApiKeyProcedure,
			connect.WithSchema(satelliteServiceGetSatelliteApiKeyMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listSatelliteInstances: connect.NewClient[v1.ListSatelliteInstancesRequest, v1.ListSatelliteInstancesResponse](
			httpClient,
			baseURL+SatelliteServiceListSatelliteInstancesProcedure,
			connect.WithSchema(satelliteServiceListSatelliteInstancesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getSatelliteOwner: connect.NewClient[v1.GetSatelliteOwnerRequest, v1.GetSatelliteOwnerResponse](
			httpClient,
			baseURL+SatelliteServiceGetSatelliteOwnerProcedure,
			connect.WithSchema(satelliteServiceGetSatelliteOwnerMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listSatelliteOwners: connect.NewClient[v1.ListSatelliteOwnersRequest, v1.ListSatelliteOwnersResponse](
			httpClient,
			baseURL+SatelliteServiceListSatelliteOwnersProcedure,
			connect.WithSchema(satelliteServiceListSatelliteOwnersMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createSatelliteOwner: connect.NewClient[v1.CreateSatelliteOwnerRequest, v1.CreateSatelliteOwnerResponse](
			httpClient,
			baseURL+SatelliteServiceCreateSatelliteOwnerProcedure,
			connect.WithSchema(satelliteServiceCreateSatelliteOwnerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteSatelliteOwner: connect.NewClient[v1.DeleteSatelliteOwnerRequest, v1.DeleteSatelliteOwnerResponse](
			httpClient,
			baseURL+SatelliteServiceDeleteSatelliteOwnerProcedure,
			connect.WithSchema(satelliteServiceDeleteSatelliteOwnerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// satelliteServiceClient implements SatelliteServiceClient.
type satelliteServiceClient struct {
	createSatellite        *connect.Client[v1.CreateSatelliteRequest, v1.CreateSatelliteResponse]
	updateSatellite        *connect.Client[v1.UpdateSatelliteRequest, v1.UpdateSatelliteResponse]
	deleteSatellite        *connect.Client[v1.DeleteSatelliteRequest, v1.DeleteSatelliteResponse]
	listSatellites         *connect.Client[v1.ListSatellitesRequest, v1.ListSatellitesResponse]
	getSatellite           *connect.Client[v1.GetSatelliteRequest, v1.GetSatelliteResponse]
	getSatelliteApiKey     *connect.Client[v1.GetSatelliteApiKeyRequest, v1.GetSatelliteApiKeyResponse]
	listSatelliteInstances *connect.Client[v1.ListSatelliteInstancesRequest, v1.ListSatelliteInstancesResponse]
	getSatelliteOwner      *connect.Client[v1.GetSatelliteOwnerRequest, v1.GetSatelliteOwnerResponse]
	listSatelliteOwners    *connect.Client[v1.ListSatelliteOwnersRequest, v1.ListSatelliteOwnersResponse]
	createSatelliteOwner   *connect.Client[v1.CreateSatelliteOwnerRequest, v1.CreateSatelliteOwnerResponse]
	deleteSatelliteOwner   *connect.Client[v1.DeleteSatelliteOwnerRequest, v1.DeleteSatelliteOwnerResponse]
}

// CreateSatellite calls core.v1.SatelliteService.CreateSatellite.
func (c *satelliteServiceClient) CreateSatellite(ctx context.Context, req *connect.Request[v1.CreateSatelliteRequest]) (*connect.Response[v1.CreateSatelliteResponse], error) {
	return c.createSatellite.CallUnary(ctx, req)
}

// UpdateSatellite calls core.v1.SatelliteService.UpdateSatellite.
func (c *satelliteServiceClient) UpdateSatellite(ctx context.Context, req *connect.Request[v1.UpdateSatelliteRequest]) (*connect.Response[v1.UpdateSatelliteResponse], error) {
	return c.updateSatellite.CallUnary(ctx, req)
}

// DeleteSatellite calls core.v1.SatelliteService.DeleteSatellite.
func (c *satelliteServiceClient) DeleteSatellite(ctx context.Context, req *connect.Request[v1.DeleteSatelliteRequest]) (*connect.Response[v1.DeleteSatelliteResponse], error) {
	return c.deleteSatellite.CallUnary(ctx, req)
}

// ListSatellites calls core.v1.SatelliteService.ListSatellites.
func (c *satelliteServiceClient) ListSatellites(ctx context.Context, req *connect.Request[v1.ListSatellitesRequest]) (*connect.Response[v1.ListSatellitesResponse], error) {
	return c.listSatellites.CallUnary(ctx, req)
}

// GetSatellite calls core.v1.SatelliteService.GetSatellite.
func (c *satelliteServiceClient) GetSatellite(ctx context.Context, req *connect.Request[v1.GetSatelliteRequest]) (*connect.Response[v1.GetSatelliteResponse], error) {
	return c.getSatellite.CallUnary(ctx, req)
}

// GetSatelliteApiKey calls core.v1.SatelliteService.GetSatelliteApiKey.
func (c *satelliteServiceClient) GetSatelliteApiKey(ctx context.Context, req *connect.Request[v1.GetSatelliteApiKeyRequest]) (*connect.Response[v1.GetSatelliteApiKeyResponse], error) {
	return c.getSatelliteApiKey.CallUnary(ctx, req)
}

// ListSatelliteInstances calls core.v1.SatelliteService.ListSatelliteInstances.
func (c *satelliteServiceClient) ListSatelliteInstances(ctx context.Context, req *connect.Request[v1.ListSatelliteInstancesRequest]) (*connect.Response[v1.ListSatelliteInstancesResponse], error) {
	return c.listSatelliteInstances.CallUnary(ctx, req)
}

// GetSatelliteOwner calls core.v1.SatelliteService.GetSatelliteOwner.
func (c *satelliteServiceClient) GetSatelliteOwner(ctx context.Context, req *connect.Request[v1.GetSatelliteOwnerRequest]) (*connect.Response[v1.GetSatelliteOwnerResponse], error) {
	return c.getSatelliteOwner.CallUnary(ctx, req)
}

// ListSatelliteOwners calls core.v1.SatelliteService.ListSatelliteOwners.
func (c *satelliteServiceClient) ListSatelliteOwners(ctx context.Context, req *connect.Request[v1.ListSatelliteOwnersRequest]) (*connect.Response[v1.ListSatelliteOwnersResponse], error) {
	return c.listSatelliteOwners.CallUnary(ctx, req)
}

// CreateSatelliteOwner calls core.v1.SatelliteService.CreateSatelliteOwner.
func (c *satelliteServiceClient) CreateSatelliteOwner(ctx context.Context, req *connect.Request[v1.CreateSatelliteOwnerRequest]) (*connect.Response[v1.CreateSatelliteOwnerResponse], error) {
	return c.createSatelliteOwner.CallUnary(ctx, req)
}

// DeleteSatelliteOwner calls core.v1.SatelliteService.DeleteSatelliteOwner.
func (c *satelliteServiceClient) DeleteSatelliteOwner(ctx context.Context, req *connect.Request[v1.DeleteSatelliteOwnerRequest]) (*connect.Response[v1.DeleteSatelliteOwnerResponse], error) {
	return c.deleteSatelliteOwner.CallUnary(ctx, req)
}

// SatelliteServiceHandler is an implementation of the core.v1.SatelliteService service.
type SatelliteServiceHandler interface {
	CreateSatellite(context.Context, *connect.Request[v1.CreateSatelliteRequest]) (*connect.Response[v1.CreateSatelliteResponse], error)
	UpdateSatellite(context.Context, *connect.Request[v1.UpdateSatelliteRequest]) (*connect.Response[v1.UpdateSatelliteResponse], error)
	DeleteSatellite(context.Context, *connect.Request[v1.DeleteSatelliteRequest]) (*connect.Response[v1.DeleteSatelliteResponse], error)
	ListSatellites(context.Context, *connect.Request[v1.ListSatellitesRequest]) (*connect.Response[v1.ListSatellitesResponse], error)
	GetSatellite(context.Context, *connect.Request[v1.GetSatelliteRequest]) (*connect.Response[v1.GetSatelliteResponse], error)
	GetSatelliteApiKey(context.Context, *connect.Request[v1.GetSatelliteApiKeyRequest]) (*connect.Response[v1.GetSatelliteApiKeyResponse], error)
	ListSatelliteInstances(context.Context, *connect.Request[v1.ListSatelliteInstancesRequest]) (*connect.Response[v1.ListSatelliteInstancesResponse], error)
	// Owners
	GetSatelliteOwner(context.Context, *connect.Request[v1.GetSatelliteOwnerRequest]) (*connect.Response[v1.GetSatelliteOwnerResponse], error)
	ListSatelliteOwners(context.Context, *connect.Request[v1.ListSatelliteOwnersRequest]) (*connect.Response[v1.ListSatelliteOwnersResponse], error)
	CreateSatelliteOwner(context.Context, *connect.Request[v1.CreateSatelliteOwnerRequest]) (*connect.Response[v1.CreateSatelliteOwnerResponse], error)
	DeleteSatelliteOwner(context.Context, *connect.Request[v1.DeleteSatelliteOwnerRequest]) (*connect.Response[v1.DeleteSatelliteOwnerResponse], error)
}

// NewSatelliteServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSatelliteServiceHandler(svc SatelliteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	satelliteServiceCreateSatelliteHandler := connect.NewUnaryHandler(
		SatelliteServiceCreateSatelliteProcedure,
		svc.CreateSatellite,
		connect.WithSchema(satelliteServiceCreateSatelliteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	satelliteServiceUpdateSatelliteHandler := connect.NewUnaryHandler(
		SatelliteServiceUpdateSatelliteProcedure,
		svc.UpdateSatellite,
		connect.WithSchema(satelliteServiceUpdateSatelliteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	satelliteServiceDeleteSatelliteHandler := connect.NewUnaryHandler(
		SatelliteServiceDeleteSatelliteProcedure,
		svc.DeleteSatellite,
		connect.WithSchema(satelliteServiceDeleteSatelliteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	satelliteServiceListSatellitesHandler := connect.NewUnaryHandler(
		SatelliteServiceListSatellitesProcedure,
		svc.ListSatellites,
		connect.WithSchema(satelliteServiceListSatellitesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	satelliteServiceGetSatelliteHandler := connect.NewUnaryHandler(
		SatelliteServiceGetSatelliteProcedure,
		svc.GetSatellite,
		connect.WithSchema(satelliteServiceGetSatelliteMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	satelliteServiceGetSatelliteApiKeyHandler := connect.NewUnaryHandler(
		SatelliteServiceGetSatelliteApiKeyProcedure,
		svc.GetSatelliteApiKey,
		connect.WithSchema(satelliteServiceGetSatelliteApiKeyMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	satelliteServiceListSatelliteInstancesHandler := connect.NewUnaryHandler(
		SatelliteServiceListSatelliteInstancesProcedure,
		svc.ListSatelliteInstances,
		connect.WithSchema(satelliteServiceListSatelliteInstancesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	satelliteServiceGetSatelliteOwnerHandler := connect.NewUnaryHandler(
		SatelliteServiceGetSatelliteOwnerProcedure,
		svc.GetSatelliteOwner,
		connect.WithSchema(satelliteServiceGetSatelliteOwnerMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	satelliteServiceListSatelliteOwnersHandler := connect.NewUnaryHandler(
		SatelliteServiceListSatelliteOwnersProcedure,
		svc.ListSatelliteOwners,
		connect.WithSchema(satelliteServiceListSatelliteOwnersMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	satelliteServiceCreateSatelliteOwnerHandler := connect.NewUnaryHandler(
		SatelliteServiceCreateSatelliteOwnerProcedure,
		svc.CreateSatelliteOwner,
		connect.WithSchema(satelliteServiceCreateSatelliteOwnerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	satelliteServiceDeleteSatelliteOwnerHandler := connect.NewUnaryHandler(
		SatelliteServiceDeleteSatelliteOwnerProcedure,
		svc.DeleteSatelliteOwner,
		connect.WithSchema(satelliteServiceDeleteSatelliteOwnerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.v1.SatelliteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SatelliteServiceCreateSatelliteProcedure:
			satelliteServiceCreateSatelliteHandler.ServeHTTP(w, r)
		case SatelliteServiceUpdateSatelliteProcedure:
			satelliteServiceUpdateSatelliteHandler.ServeHTTP(w, r)
		case SatelliteServiceDeleteSatelliteProcedure:
			satelliteServiceDeleteSatelliteHandler.ServeHTTP(w, r)
		case SatelliteServiceListSatellitesProcedure:
			satelliteServiceListSatellitesHandler.ServeHTTP(w, r)
		case SatelliteServiceGetSatelliteProcedure:
			satelliteServiceGetSatelliteHandler.ServeHTTP(w, r)
		case SatelliteServiceGetSatelliteApiKeyProcedure:
			satelliteServiceGetSatelliteApiKeyHandler.ServeHTTP(w, r)
		case SatelliteServiceListSatelliteInstancesProcedure:
			satelliteServiceListSatelliteInstancesHandler.ServeHTTP(w, r)
		case SatelliteServiceGetSatelliteOwnerProcedure:
			satelliteServiceGetSatelliteOwnerHandler.ServeHTTP(w, r)
		case SatelliteServiceListSatelliteOwnersProcedure:
			satelliteServiceListSatelliteOwnersHandler.ServeHTTP(w, r)
		case SatelliteServiceCreateSatelliteOwnerProcedure:
			satelliteServiceCreateSatelliteOwnerHandler.ServeHTTP(w, r)
		case SatelliteServiceDeleteSatelliteOwnerProcedure:
			satelliteServiceDeleteSatelliteOwnerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSatelliteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSatelliteServiceHandler struct{}

func (UnimplementedSatelliteServiceHandler) CreateSatellite(context.Context, *connect.Request[v1.CreateSatelliteRequest]) (*connect.Response[v1.CreateSatelliteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SatelliteService.CreateSatellite is not implemented"))
}

func (UnimplementedSatelliteServiceHandler) UpdateSatellite(context.Context, *connect.Request[v1.UpdateSatelliteRequest]) (*connect.Response[v1.UpdateSatelliteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SatelliteService.UpdateSatellite is not implemented"))
}

func (UnimplementedSatelliteServiceHandler) DeleteSatellite(context.Context, *connect.Request[v1.DeleteSatelliteRequest]) (*connect.Response[v1.DeleteSatelliteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SatelliteService.DeleteSatellite is not implemented"))
}

func (UnimplementedSatelliteServiceHandler) ListSatellites(context.Context, *connect.Request[v1.ListSatellitesRequest]) (*connect.Response[v1.ListSatellitesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SatelliteService.ListSatellites is not implemented"))
}

func (UnimplementedSatelliteServiceHandler) GetSatellite(context.Context, *connect.Request[v1.GetSatelliteRequest]) (*connect.Response[v1.GetSatelliteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SatelliteService.GetSatellite is not implemented"))
}

func (UnimplementedSatelliteServiceHandler) GetSatelliteApiKey(context.Context, *connect.Request[v1.GetSatelliteApiKeyRequest]) (*connect.Response[v1.GetSatelliteApiKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SatelliteService.GetSatelliteApiKey is not implemented"))
}

func (UnimplementedSatelliteServiceHandler) ListSatelliteInstances(context.Context, *connect.Request[v1.ListSatelliteInstancesRequest]) (*connect.Response[v1.ListSatelliteInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SatelliteService.ListSatelliteInstances is not implemented"))
}

func (UnimplementedSatelliteServiceHandler) GetSatelliteOwner(context.Context, *connect.Request[v1.GetSatelliteOwnerRequest]) (*connect.Response[v1.GetSatelliteOwnerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SatelliteService.GetSatelliteOwner is not implemented"))
}

func (UnimplementedSatelliteServiceHandler) ListSatelliteOwners(context.Context, *connect.Request[v1.ListSatelliteOwnersRequest]) (*connect.Response[v1.ListSatelliteOwnersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SatelliteService.ListSatelliteOwners is not implemented"))
}

func (UnimplementedSatelliteServiceHandler) CreateSatelliteOwner(context.Context, *connect.Request[v1.CreateSatelliteOwnerRequest]) (*connect.Response[v1.CreateSatelliteOwnerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SatelliteService.CreateSatelliteOwner is not implemented"))
}

func (UnimplementedSatelliteServiceHandler) DeleteSatelliteOwner(context.Context, *connect.Request[v1.DeleteSatelliteOwnerRequest]) (*connect.Response[v1.DeleteSatelliteOwnerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.SatelliteService.DeleteSatelliteOwner is not implemented"))
}
