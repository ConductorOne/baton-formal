// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/integration_data_catalog.proto

package corev1connect

import (
	v1 "buf.build/gen/go/formal/core/protocolbuffers/go/core/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IntegrationDataCatalogServiceName is the fully-qualified name of the
	// IntegrationDataCatalogService service.
	IntegrationDataCatalogServiceName = "core.v1.IntegrationDataCatalogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IntegrationDataCatalogServiceCreateDataCatalogIntegrationProcedure is the fully-qualified name of
	// the IntegrationDataCatalogService's CreateDataCatalogIntegration RPC.
	IntegrationDataCatalogServiceCreateDataCatalogIntegrationProcedure = "/core.v1.IntegrationDataCatalogService/CreateDataCatalogIntegration"
	// IntegrationDataCatalogServiceGetDataCatalogIntegrationProcedure is the fully-qualified name of
	// the IntegrationDataCatalogService's GetDataCatalogIntegration RPC.
	IntegrationDataCatalogServiceGetDataCatalogIntegrationProcedure = "/core.v1.IntegrationDataCatalogService/GetDataCatalogIntegration"
	// IntegrationDataCatalogServiceUpdateDataCatalogIntegrationProcedure is the fully-qualified name of
	// the IntegrationDataCatalogService's UpdateDataCatalogIntegration RPC.
	IntegrationDataCatalogServiceUpdateDataCatalogIntegrationProcedure = "/core.v1.IntegrationDataCatalogService/UpdateDataCatalogIntegration"
	// IntegrationDataCatalogServiceRefreshWebhookTokenProcedure is the fully-qualified name of the
	// IntegrationDataCatalogService's RefreshWebhookToken RPC.
	IntegrationDataCatalogServiceRefreshWebhookTokenProcedure = "/core.v1.IntegrationDataCatalogService/RefreshWebhookToken"
	// IntegrationDataCatalogServiceDeleteDataCatalogIntegrationProcedure is the fully-qualified name of
	// the IntegrationDataCatalogService's DeleteDataCatalogIntegration RPC.
	IntegrationDataCatalogServiceDeleteDataCatalogIntegrationProcedure = "/core.v1.IntegrationDataCatalogService/DeleteDataCatalogIntegration"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	integrationDataCatalogServiceServiceDescriptor                            = v1.File_core_v1_integration_data_catalog_proto.Services().ByName("IntegrationDataCatalogService")
	integrationDataCatalogServiceCreateDataCatalogIntegrationMethodDescriptor = integrationDataCatalogServiceServiceDescriptor.Methods().ByName("CreateDataCatalogIntegration")
	integrationDataCatalogServiceGetDataCatalogIntegrationMethodDescriptor    = integrationDataCatalogServiceServiceDescriptor.Methods().ByName("GetDataCatalogIntegration")
	integrationDataCatalogServiceUpdateDataCatalogIntegrationMethodDescriptor = integrationDataCatalogServiceServiceDescriptor.Methods().ByName("UpdateDataCatalogIntegration")
	integrationDataCatalogServiceRefreshWebhookTokenMethodDescriptor          = integrationDataCatalogServiceServiceDescriptor.Methods().ByName("RefreshWebhookToken")
	integrationDataCatalogServiceDeleteDataCatalogIntegrationMethodDescriptor = integrationDataCatalogServiceServiceDescriptor.Methods().ByName("DeleteDataCatalogIntegration")
)

// IntegrationDataCatalogServiceClient is a client for the core.v1.IntegrationDataCatalogService
// service.
type IntegrationDataCatalogServiceClient interface {
	CreateDataCatalogIntegration(context.Context, *connect.Request[v1.CreateDataCatalogIntegrationRequest]) (*connect.Response[v1.CreateDataCatalogIntegrationResponse], error)
	GetDataCatalogIntegration(context.Context, *connect.Request[v1.GetDataCatalogIntegrationRequest]) (*connect.Response[v1.GetDataCatalogIntegrationResponse], error)
	UpdateDataCatalogIntegration(context.Context, *connect.Request[v1.UpdateDataCatalogIntegrationRequest]) (*connect.Response[v1.UpdateDataCatalogIntegrationResponse], error)
	RefreshWebhookToken(context.Context, *connect.Request[v1.RefreshWebhookTokenRequest]) (*connect.Response[v1.RefreshWebhookTokenResponse], error)
	DeleteDataCatalogIntegration(context.Context, *connect.Request[v1.DeleteDataCatalogIntegrationRequest]) (*connect.Response[v1.DeleteDataCatalogIntegrationResponse], error)
}

// NewIntegrationDataCatalogServiceClient constructs a client for the
// core.v1.IntegrationDataCatalogService service. By default, it uses the Connect protocol with the
// binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use the
// gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntegrationDataCatalogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IntegrationDataCatalogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &integrationDataCatalogServiceClient{
		createDataCatalogIntegration: connect.NewClient[v1.CreateDataCatalogIntegrationRequest, v1.CreateDataCatalogIntegrationResponse](
			httpClient,
			baseURL+IntegrationDataCatalogServiceCreateDataCatalogIntegrationProcedure,
			connect.WithSchema(integrationDataCatalogServiceCreateDataCatalogIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDataCatalogIntegration: connect.NewClient[v1.GetDataCatalogIntegrationRequest, v1.GetDataCatalogIntegrationResponse](
			httpClient,
			baseURL+IntegrationDataCatalogServiceGetDataCatalogIntegrationProcedure,
			connect.WithSchema(integrationDataCatalogServiceGetDataCatalogIntegrationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateDataCatalogIntegration: connect.NewClient[v1.UpdateDataCatalogIntegrationRequest, v1.UpdateDataCatalogIntegrationResponse](
			httpClient,
			baseURL+IntegrationDataCatalogServiceUpdateDataCatalogIntegrationProcedure,
			connect.WithSchema(integrationDataCatalogServiceUpdateDataCatalogIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		refreshWebhookToken: connect.NewClient[v1.RefreshWebhookTokenRequest, v1.RefreshWebhookTokenResponse](
			httpClient,
			baseURL+IntegrationDataCatalogServiceRefreshWebhookTokenProcedure,
			connect.WithSchema(integrationDataCatalogServiceRefreshWebhookTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteDataCatalogIntegration: connect.NewClient[v1.DeleteDataCatalogIntegrationRequest, v1.DeleteDataCatalogIntegrationResponse](
			httpClient,
			baseURL+IntegrationDataCatalogServiceDeleteDataCatalogIntegrationProcedure,
			connect.WithSchema(integrationDataCatalogServiceDeleteDataCatalogIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// integrationDataCatalogServiceClient implements IntegrationDataCatalogServiceClient.
type integrationDataCatalogServiceClient struct {
	createDataCatalogIntegration *connect.Client[v1.CreateDataCatalogIntegrationRequest, v1.CreateDataCatalogIntegrationResponse]
	getDataCatalogIntegration    *connect.Client[v1.GetDataCatalogIntegrationRequest, v1.GetDataCatalogIntegrationResponse]
	updateDataCatalogIntegration *connect.Client[v1.UpdateDataCatalogIntegrationRequest, v1.UpdateDataCatalogIntegrationResponse]
	refreshWebhookToken          *connect.Client[v1.RefreshWebhookTokenRequest, v1.RefreshWebhookTokenResponse]
	deleteDataCatalogIntegration *connect.Client[v1.DeleteDataCatalogIntegrationRequest, v1.DeleteDataCatalogIntegrationResponse]
}

// CreateDataCatalogIntegration calls
// core.v1.IntegrationDataCatalogService.CreateDataCatalogIntegration.
func (c *integrationDataCatalogServiceClient) CreateDataCatalogIntegration(ctx context.Context, req *connect.Request[v1.CreateDataCatalogIntegrationRequest]) (*connect.Response[v1.CreateDataCatalogIntegrationResponse], error) {
	return c.createDataCatalogIntegration.CallUnary(ctx, req)
}

// GetDataCatalogIntegration calls core.v1.IntegrationDataCatalogService.GetDataCatalogIntegration.
func (c *integrationDataCatalogServiceClient) GetDataCatalogIntegration(ctx context.Context, req *connect.Request[v1.GetDataCatalogIntegrationRequest]) (*connect.Response[v1.GetDataCatalogIntegrationResponse], error) {
	return c.getDataCatalogIntegration.CallUnary(ctx, req)
}

// UpdateDataCatalogIntegration calls
// core.v1.IntegrationDataCatalogService.UpdateDataCatalogIntegration.
func (c *integrationDataCatalogServiceClient) UpdateDataCatalogIntegration(ctx context.Context, req *connect.Request[v1.UpdateDataCatalogIntegrationRequest]) (*connect.Response[v1.UpdateDataCatalogIntegrationResponse], error) {
	return c.updateDataCatalogIntegration.CallUnary(ctx, req)
}

// RefreshWebhookToken calls core.v1.IntegrationDataCatalogService.RefreshWebhookToken.
func (c *integrationDataCatalogServiceClient) RefreshWebhookToken(ctx context.Context, req *connect.Request[v1.RefreshWebhookTokenRequest]) (*connect.Response[v1.RefreshWebhookTokenResponse], error) {
	return c.refreshWebhookToken.CallUnary(ctx, req)
}

// DeleteDataCatalogIntegration calls
// core.v1.IntegrationDataCatalogService.DeleteDataCatalogIntegration.
func (c *integrationDataCatalogServiceClient) DeleteDataCatalogIntegration(ctx context.Context, req *connect.Request[v1.DeleteDataCatalogIntegrationRequest]) (*connect.Response[v1.DeleteDataCatalogIntegrationResponse], error) {
	return c.deleteDataCatalogIntegration.CallUnary(ctx, req)
}

// IntegrationDataCatalogServiceHandler is an implementation of the
// core.v1.IntegrationDataCatalogService service.
type IntegrationDataCatalogServiceHandler interface {
	CreateDataCatalogIntegration(context.Context, *connect.Request[v1.CreateDataCatalogIntegrationRequest]) (*connect.Response[v1.CreateDataCatalogIntegrationResponse], error)
	GetDataCatalogIntegration(context.Context, *connect.Request[v1.GetDataCatalogIntegrationRequest]) (*connect.Response[v1.GetDataCatalogIntegrationResponse], error)
	UpdateDataCatalogIntegration(context.Context, *connect.Request[v1.UpdateDataCatalogIntegrationRequest]) (*connect.Response[v1.UpdateDataCatalogIntegrationResponse], error)
	RefreshWebhookToken(context.Context, *connect.Request[v1.RefreshWebhookTokenRequest]) (*connect.Response[v1.RefreshWebhookTokenResponse], error)
	DeleteDataCatalogIntegration(context.Context, *connect.Request[v1.DeleteDataCatalogIntegrationRequest]) (*connect.Response[v1.DeleteDataCatalogIntegrationResponse], error)
}

// NewIntegrationDataCatalogServiceHandler builds an HTTP handler from the service implementation.
// It returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntegrationDataCatalogServiceHandler(svc IntegrationDataCatalogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	integrationDataCatalogServiceCreateDataCatalogIntegrationHandler := connect.NewUnaryHandler(
		IntegrationDataCatalogServiceCreateDataCatalogIntegrationProcedure,
		svc.CreateDataCatalogIntegration,
		connect.WithSchema(integrationDataCatalogServiceCreateDataCatalogIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	integrationDataCatalogServiceGetDataCatalogIntegrationHandler := connect.NewUnaryHandler(
		IntegrationDataCatalogServiceGetDataCatalogIntegrationProcedure,
		svc.GetDataCatalogIntegration,
		connect.WithSchema(integrationDataCatalogServiceGetDataCatalogIntegrationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	integrationDataCatalogServiceUpdateDataCatalogIntegrationHandler := connect.NewUnaryHandler(
		IntegrationDataCatalogServiceUpdateDataCatalogIntegrationProcedure,
		svc.UpdateDataCatalogIntegration,
		connect.WithSchema(integrationDataCatalogServiceUpdateDataCatalogIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	integrationDataCatalogServiceRefreshWebhookTokenHandler := connect.NewUnaryHandler(
		IntegrationDataCatalogServiceRefreshWebhookTokenProcedure,
		svc.RefreshWebhookToken,
		connect.WithSchema(integrationDataCatalogServiceRefreshWebhookTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	integrationDataCatalogServiceDeleteDataCatalogIntegrationHandler := connect.NewUnaryHandler(
		IntegrationDataCatalogServiceDeleteDataCatalogIntegrationProcedure,
		svc.DeleteDataCatalogIntegration,
		connect.WithSchema(integrationDataCatalogServiceDeleteDataCatalogIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.v1.IntegrationDataCatalogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IntegrationDataCatalogServiceCreateDataCatalogIntegrationProcedure:
			integrationDataCatalogServiceCreateDataCatalogIntegrationHandler.ServeHTTP(w, r)
		case IntegrationDataCatalogServiceGetDataCatalogIntegrationProcedure:
			integrationDataCatalogServiceGetDataCatalogIntegrationHandler.ServeHTTP(w, r)
		case IntegrationDataCatalogServiceUpdateDataCatalogIntegrationProcedure:
			integrationDataCatalogServiceUpdateDataCatalogIntegrationHandler.ServeHTTP(w, r)
		case IntegrationDataCatalogServiceRefreshWebhookTokenProcedure:
			integrationDataCatalogServiceRefreshWebhookTokenHandler.ServeHTTP(w, r)
		case IntegrationDataCatalogServiceDeleteDataCatalogIntegrationProcedure:
			integrationDataCatalogServiceDeleteDataCatalogIntegrationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIntegrationDataCatalogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIntegrationDataCatalogServiceHandler struct{}

func (UnimplementedIntegrationDataCatalogServiceHandler) CreateDataCatalogIntegration(context.Context, *connect.Request[v1.CreateDataCatalogIntegrationRequest]) (*connect.Response[v1.CreateDataCatalogIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationDataCatalogService.CreateDataCatalogIntegration is not implemented"))
}

func (UnimplementedIntegrationDataCatalogServiceHandler) GetDataCatalogIntegration(context.Context, *connect.Request[v1.GetDataCatalogIntegrationRequest]) (*connect.Response[v1.GetDataCatalogIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationDataCatalogService.GetDataCatalogIntegration is not implemented"))
}

func (UnimplementedIntegrationDataCatalogServiceHandler) UpdateDataCatalogIntegration(context.Context, *connect.Request[v1.UpdateDataCatalogIntegrationRequest]) (*connect.Response[v1.UpdateDataCatalogIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationDataCatalogService.UpdateDataCatalogIntegration is not implemented"))
}

func (UnimplementedIntegrationDataCatalogServiceHandler) RefreshWebhookToken(context.Context, *connect.Request[v1.RefreshWebhookTokenRequest]) (*connect.Response[v1.RefreshWebhookTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationDataCatalogService.RefreshWebhookToken is not implemented"))
}

func (UnimplementedIntegrationDataCatalogServiceHandler) DeleteDataCatalogIntegration(context.Context, *connect.Request[v1.DeleteDataCatalogIntegrationRequest]) (*connect.Response[v1.DeleteDataCatalogIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationDataCatalogService.DeleteDataCatalogIntegration is not implemented"))
}
