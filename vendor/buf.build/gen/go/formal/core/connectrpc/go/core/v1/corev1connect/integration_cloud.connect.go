// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/integration_cloud.proto

package corev1connect

import (
	v1 "buf.build/gen/go/formal/core/protocolbuffers/go/core/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IntegrationCloudServiceName is the fully-qualified name of the IntegrationCloudService service.
	IntegrationCloudServiceName = "core.v1.IntegrationCloudService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IntegrationCloudServiceGetIntegrationCloudProcedure is the fully-qualified name of the
	// IntegrationCloudService's GetIntegrationCloud RPC.
	IntegrationCloudServiceGetIntegrationCloudProcedure = "/core.v1.IntegrationCloudService/GetIntegrationCloud"
	// IntegrationCloudServiceListIntegrationCloudsProcedure is the fully-qualified name of the
	// IntegrationCloudService's ListIntegrationClouds RPC.
	IntegrationCloudServiceListIntegrationCloudsProcedure = "/core.v1.IntegrationCloudService/ListIntegrationClouds"
	// IntegrationCloudServiceCreateCloudIntegrationProcedure is the fully-qualified name of the
	// IntegrationCloudService's CreateCloudIntegration RPC.
	IntegrationCloudServiceCreateCloudIntegrationProcedure = "/core.v1.IntegrationCloudService/CreateCloudIntegration"
	// IntegrationCloudServiceDeleteCloudIntegrationProcedure is the fully-qualified name of the
	// IntegrationCloudService's DeleteCloudIntegration RPC.
	IntegrationCloudServiceDeleteCloudIntegrationProcedure = "/core.v1.IntegrationCloudService/DeleteCloudIntegration"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	integrationCloudServiceServiceDescriptor                      = v1.File_core_v1_integration_cloud_proto.Services().ByName("IntegrationCloudService")
	integrationCloudServiceGetIntegrationCloudMethodDescriptor    = integrationCloudServiceServiceDescriptor.Methods().ByName("GetIntegrationCloud")
	integrationCloudServiceListIntegrationCloudsMethodDescriptor  = integrationCloudServiceServiceDescriptor.Methods().ByName("ListIntegrationClouds")
	integrationCloudServiceCreateCloudIntegrationMethodDescriptor = integrationCloudServiceServiceDescriptor.Methods().ByName("CreateCloudIntegration")
	integrationCloudServiceDeleteCloudIntegrationMethodDescriptor = integrationCloudServiceServiceDescriptor.Methods().ByName("DeleteCloudIntegration")
)

// IntegrationCloudServiceClient is a client for the core.v1.IntegrationCloudService service.
type IntegrationCloudServiceClient interface {
	GetIntegrationCloud(context.Context, *connect.Request[v1.GetIntegrationCloudRequest]) (*connect.Response[v1.GetIntegrationCloudResponse], error)
	ListIntegrationClouds(context.Context, *connect.Request[v1.ListIntegrationCloudsRequest]) (*connect.Response[v1.ListIntegrationCloudsResponse], error)
	CreateCloudIntegration(context.Context, *connect.Request[v1.CreateCloudIntegrationRequest]) (*connect.Response[v1.CreateCloudIntegrationResponse], error)
	DeleteCloudIntegration(context.Context, *connect.Request[v1.DeleteCloudIntegrationRequest]) (*connect.Response[v1.DeleteCloudIntegrationResponse], error)
}

// NewIntegrationCloudServiceClient constructs a client for the core.v1.IntegrationCloudService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntegrationCloudServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IntegrationCloudServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &integrationCloudServiceClient{
		getIntegrationCloud: connect.NewClient[v1.GetIntegrationCloudRequest, v1.GetIntegrationCloudResponse](
			httpClient,
			baseURL+IntegrationCloudServiceGetIntegrationCloudProcedure,
			connect.WithSchema(integrationCloudServiceGetIntegrationCloudMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listIntegrationClouds: connect.NewClient[v1.ListIntegrationCloudsRequest, v1.ListIntegrationCloudsResponse](
			httpClient,
			baseURL+IntegrationCloudServiceListIntegrationCloudsProcedure,
			connect.WithSchema(integrationCloudServiceListIntegrationCloudsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createCloudIntegration: connect.NewClient[v1.CreateCloudIntegrationRequest, v1.CreateCloudIntegrationResponse](
			httpClient,
			baseURL+IntegrationCloudServiceCreateCloudIntegrationProcedure,
			connect.WithSchema(integrationCloudServiceCreateCloudIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteCloudIntegration: connect.NewClient[v1.DeleteCloudIntegrationRequest, v1.DeleteCloudIntegrationResponse](
			httpClient,
			baseURL+IntegrationCloudServiceDeleteCloudIntegrationProcedure,
			connect.WithSchema(integrationCloudServiceDeleteCloudIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// integrationCloudServiceClient implements IntegrationCloudServiceClient.
type integrationCloudServiceClient struct {
	getIntegrationCloud    *connect.Client[v1.GetIntegrationCloudRequest, v1.GetIntegrationCloudResponse]
	listIntegrationClouds  *connect.Client[v1.ListIntegrationCloudsRequest, v1.ListIntegrationCloudsResponse]
	createCloudIntegration *connect.Client[v1.CreateCloudIntegrationRequest, v1.CreateCloudIntegrationResponse]
	deleteCloudIntegration *connect.Client[v1.DeleteCloudIntegrationRequest, v1.DeleteCloudIntegrationResponse]
}

// GetIntegrationCloud calls core.v1.IntegrationCloudService.GetIntegrationCloud.
func (c *integrationCloudServiceClient) GetIntegrationCloud(ctx context.Context, req *connect.Request[v1.GetIntegrationCloudRequest]) (*connect.Response[v1.GetIntegrationCloudResponse], error) {
	return c.getIntegrationCloud.CallUnary(ctx, req)
}

// ListIntegrationClouds calls core.v1.IntegrationCloudService.ListIntegrationClouds.
func (c *integrationCloudServiceClient) ListIntegrationClouds(ctx context.Context, req *connect.Request[v1.ListIntegrationCloudsRequest]) (*connect.Response[v1.ListIntegrationCloudsResponse], error) {
	return c.listIntegrationClouds.CallUnary(ctx, req)
}

// CreateCloudIntegration calls core.v1.IntegrationCloudService.CreateCloudIntegration.
func (c *integrationCloudServiceClient) CreateCloudIntegration(ctx context.Context, req *connect.Request[v1.CreateCloudIntegrationRequest]) (*connect.Response[v1.CreateCloudIntegrationResponse], error) {
	return c.createCloudIntegration.CallUnary(ctx, req)
}

// DeleteCloudIntegration calls core.v1.IntegrationCloudService.DeleteCloudIntegration.
func (c *integrationCloudServiceClient) DeleteCloudIntegration(ctx context.Context, req *connect.Request[v1.DeleteCloudIntegrationRequest]) (*connect.Response[v1.DeleteCloudIntegrationResponse], error) {
	return c.deleteCloudIntegration.CallUnary(ctx, req)
}

// IntegrationCloudServiceHandler is an implementation of the core.v1.IntegrationCloudService
// service.
type IntegrationCloudServiceHandler interface {
	GetIntegrationCloud(context.Context, *connect.Request[v1.GetIntegrationCloudRequest]) (*connect.Response[v1.GetIntegrationCloudResponse], error)
	ListIntegrationClouds(context.Context, *connect.Request[v1.ListIntegrationCloudsRequest]) (*connect.Response[v1.ListIntegrationCloudsResponse], error)
	CreateCloudIntegration(context.Context, *connect.Request[v1.CreateCloudIntegrationRequest]) (*connect.Response[v1.CreateCloudIntegrationResponse], error)
	DeleteCloudIntegration(context.Context, *connect.Request[v1.DeleteCloudIntegrationRequest]) (*connect.Response[v1.DeleteCloudIntegrationResponse], error)
}

// NewIntegrationCloudServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntegrationCloudServiceHandler(svc IntegrationCloudServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	integrationCloudServiceGetIntegrationCloudHandler := connect.NewUnaryHandler(
		IntegrationCloudServiceGetIntegrationCloudProcedure,
		svc.GetIntegrationCloud,
		connect.WithSchema(integrationCloudServiceGetIntegrationCloudMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	integrationCloudServiceListIntegrationCloudsHandler := connect.NewUnaryHandler(
		IntegrationCloudServiceListIntegrationCloudsProcedure,
		svc.ListIntegrationClouds,
		connect.WithSchema(integrationCloudServiceListIntegrationCloudsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	integrationCloudServiceCreateCloudIntegrationHandler := connect.NewUnaryHandler(
		IntegrationCloudServiceCreateCloudIntegrationProcedure,
		svc.CreateCloudIntegration,
		connect.WithSchema(integrationCloudServiceCreateCloudIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	integrationCloudServiceDeleteCloudIntegrationHandler := connect.NewUnaryHandler(
		IntegrationCloudServiceDeleteCloudIntegrationProcedure,
		svc.DeleteCloudIntegration,
		connect.WithSchema(integrationCloudServiceDeleteCloudIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.v1.IntegrationCloudService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IntegrationCloudServiceGetIntegrationCloudProcedure:
			integrationCloudServiceGetIntegrationCloudHandler.ServeHTTP(w, r)
		case IntegrationCloudServiceListIntegrationCloudsProcedure:
			integrationCloudServiceListIntegrationCloudsHandler.ServeHTTP(w, r)
		case IntegrationCloudServiceCreateCloudIntegrationProcedure:
			integrationCloudServiceCreateCloudIntegrationHandler.ServeHTTP(w, r)
		case IntegrationCloudServiceDeleteCloudIntegrationProcedure:
			integrationCloudServiceDeleteCloudIntegrationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIntegrationCloudServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIntegrationCloudServiceHandler struct{}

func (UnimplementedIntegrationCloudServiceHandler) GetIntegrationCloud(context.Context, *connect.Request[v1.GetIntegrationCloudRequest]) (*connect.Response[v1.GetIntegrationCloudResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationCloudService.GetIntegrationCloud is not implemented"))
}

func (UnimplementedIntegrationCloudServiceHandler) ListIntegrationClouds(context.Context, *connect.Request[v1.ListIntegrationCloudsRequest]) (*connect.Response[v1.ListIntegrationCloudsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationCloudService.ListIntegrationClouds is not implemented"))
}

func (UnimplementedIntegrationCloudServiceHandler) CreateCloudIntegration(context.Context, *connect.Request[v1.CreateCloudIntegrationRequest]) (*connect.Response[v1.CreateCloudIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationCloudService.CreateCloudIntegration is not implemented"))
}

func (UnimplementedIntegrationCloudServiceHandler) DeleteCloudIntegration(context.Context, *connect.Request[v1.DeleteCloudIntegrationRequest]) (*connect.Response[v1.DeleteCloudIntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationCloudService.DeleteCloudIntegration is not implemented"))
}
