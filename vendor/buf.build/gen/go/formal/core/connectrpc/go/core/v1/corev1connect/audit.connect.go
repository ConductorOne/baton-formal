// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/audit.proto

package corev1connect

import (
	v1 "buf.build/gen/go/formal/core/protocolbuffers/go/core/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuditServiceName is the fully-qualified name of the AuditService service.
	AuditServiceName = "core.v1.AuditService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuditServiceListLogsV3Procedure is the fully-qualified name of the AuditService's ListLogsV3 RPC.
	AuditServiceListLogsV3Procedure = "/core.v1.AuditService/ListLogsV3"
	// AuditServiceGetAggregationProcedure is the fully-qualified name of the AuditService's
	// GetAggregation RPC.
	AuditServiceGetAggregationProcedure = "/core.v1.AuditService/GetAggregation"
	// AuditServiceGetGroupByAggregationProcedure is the fully-qualified name of the AuditService's
	// GetGroupByAggregation RPC.
	AuditServiceGetGroupByAggregationProcedure = "/core.v1.AuditService/GetGroupByAggregation"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	auditServiceServiceDescriptor                     = v1.File_core_v1_audit_proto.Services().ByName("AuditService")
	auditServiceListLogsV3MethodDescriptor            = auditServiceServiceDescriptor.Methods().ByName("ListLogsV3")
	auditServiceGetAggregationMethodDescriptor        = auditServiceServiceDescriptor.Methods().ByName("GetAggregation")
	auditServiceGetGroupByAggregationMethodDescriptor = auditServiceServiceDescriptor.Methods().ByName("GetGroupByAggregation")
)

// AuditServiceClient is a client for the core.v1.AuditService service.
type AuditServiceClient interface {
	ListLogsV3(context.Context, *connect.Request[v1.ListLogsV3Request]) (*connect.Response[v1.ListLogsV3Response], error)
	GetAggregation(context.Context, *connect.Request[v1.GetAggregationRequest]) (*connect.Response[v1.GetAggregationResponse], error)
	GetGroupByAggregation(context.Context, *connect.Request[v1.GetGroupByAggregationRequest]) (*connect.Response[v1.GetGroupByAggregationResponse], error)
}

// NewAuditServiceClient constructs a client for the core.v1.AuditService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuditServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuditServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &auditServiceClient{
		listLogsV3: connect.NewClient[v1.ListLogsV3Request, v1.ListLogsV3Response](
			httpClient,
			baseURL+AuditServiceListLogsV3Procedure,
			connect.WithSchema(auditServiceListLogsV3MethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getAggregation: connect.NewClient[v1.GetAggregationRequest, v1.GetAggregationResponse](
			httpClient,
			baseURL+AuditServiceGetAggregationProcedure,
			connect.WithSchema(auditServiceGetAggregationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getGroupByAggregation: connect.NewClient[v1.GetGroupByAggregationRequest, v1.GetGroupByAggregationResponse](
			httpClient,
			baseURL+AuditServiceGetGroupByAggregationProcedure,
			connect.WithSchema(auditServiceGetGroupByAggregationMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// auditServiceClient implements AuditServiceClient.
type auditServiceClient struct {
	listLogsV3            *connect.Client[v1.ListLogsV3Request, v1.ListLogsV3Response]
	getAggregation        *connect.Client[v1.GetAggregationRequest, v1.GetAggregationResponse]
	getGroupByAggregation *connect.Client[v1.GetGroupByAggregationRequest, v1.GetGroupByAggregationResponse]
}

// ListLogsV3 calls core.v1.AuditService.ListLogsV3.
func (c *auditServiceClient) ListLogsV3(ctx context.Context, req *connect.Request[v1.ListLogsV3Request]) (*connect.Response[v1.ListLogsV3Response], error) {
	return c.listLogsV3.CallUnary(ctx, req)
}

// GetAggregation calls core.v1.AuditService.GetAggregation.
func (c *auditServiceClient) GetAggregation(ctx context.Context, req *connect.Request[v1.GetAggregationRequest]) (*connect.Response[v1.GetAggregationResponse], error) {
	return c.getAggregation.CallUnary(ctx, req)
}

// GetGroupByAggregation calls core.v1.AuditService.GetGroupByAggregation.
func (c *auditServiceClient) GetGroupByAggregation(ctx context.Context, req *connect.Request[v1.GetGroupByAggregationRequest]) (*connect.Response[v1.GetGroupByAggregationResponse], error) {
	return c.getGroupByAggregation.CallUnary(ctx, req)
}

// AuditServiceHandler is an implementation of the core.v1.AuditService service.
type AuditServiceHandler interface {
	ListLogsV3(context.Context, *connect.Request[v1.ListLogsV3Request]) (*connect.Response[v1.ListLogsV3Response], error)
	GetAggregation(context.Context, *connect.Request[v1.GetAggregationRequest]) (*connect.Response[v1.GetAggregationResponse], error)
	GetGroupByAggregation(context.Context, *connect.Request[v1.GetGroupByAggregationRequest]) (*connect.Response[v1.GetGroupByAggregationResponse], error)
}

// NewAuditServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuditServiceHandler(svc AuditServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	auditServiceListLogsV3Handler := connect.NewUnaryHandler(
		AuditServiceListLogsV3Procedure,
		svc.ListLogsV3,
		connect.WithSchema(auditServiceListLogsV3MethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	auditServiceGetAggregationHandler := connect.NewUnaryHandler(
		AuditServiceGetAggregationProcedure,
		svc.GetAggregation,
		connect.WithSchema(auditServiceGetAggregationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	auditServiceGetGroupByAggregationHandler := connect.NewUnaryHandler(
		AuditServiceGetGroupByAggregationProcedure,
		svc.GetGroupByAggregation,
		connect.WithSchema(auditServiceGetGroupByAggregationMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.v1.AuditService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuditServiceListLogsV3Procedure:
			auditServiceListLogsV3Handler.ServeHTTP(w, r)
		case AuditServiceGetAggregationProcedure:
			auditServiceGetAggregationHandler.ServeHTTP(w, r)
		case AuditServiceGetGroupByAggregationProcedure:
			auditServiceGetGroupByAggregationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuditServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuditServiceHandler struct{}

func (UnimplementedAuditServiceHandler) ListLogsV3(context.Context, *connect.Request[v1.ListLogsV3Request]) (*connect.Response[v1.ListLogsV3Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.AuditService.ListLogsV3 is not implemented"))
}

func (UnimplementedAuditServiceHandler) GetAggregation(context.Context, *connect.Request[v1.GetAggregationRequest]) (*connect.Response[v1.GetAggregationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.AuditService.GetAggregation is not implemented"))
}

func (UnimplementedAuditServiceHandler) GetGroupByAggregation(context.Context, *connect.Request[v1.GetGroupByAggregationRequest]) (*connect.Response[v1.GetGroupByAggregationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.AuditService.GetGroupByAggregation is not implemented"))
}
