// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/integration_mfa.proto

package corev1connect

import (
	v1 "buf.build/gen/go/formal/core/protocolbuffers/go/core/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IntegrationMfaServiceName is the fully-qualified name of the IntegrationMfaService service.
	IntegrationMfaServiceName = "core.v1.IntegrationMfaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IntegrationMfaServiceListIntegrationMfasProcedure is the fully-qualified name of the
	// IntegrationMfaService's ListIntegrationMfas RPC.
	IntegrationMfaServiceListIntegrationMfasProcedure = "/core.v1.IntegrationMfaService/ListIntegrationMfas"
	// IntegrationMfaServiceGetIntegrationMfaProcedure is the fully-qualified name of the
	// IntegrationMfaService's GetIntegrationMfa RPC.
	IntegrationMfaServiceGetIntegrationMfaProcedure = "/core.v1.IntegrationMfaService/GetIntegrationMfa"
	// IntegrationMfaServiceGetIntegrationMFASecretsProcedure is the fully-qualified name of the
	// IntegrationMfaService's GetIntegrationMFASecrets RPC.
	IntegrationMfaServiceGetIntegrationMFASecretsProcedure = "/core.v1.IntegrationMfaService/GetIntegrationMFASecrets"
	// IntegrationMfaServiceCreateIntegrationMfaProcedure is the fully-qualified name of the
	// IntegrationMfaService's CreateIntegrationMfa RPC.
	IntegrationMfaServiceCreateIntegrationMfaProcedure = "/core.v1.IntegrationMfaService/CreateIntegrationMfa"
	// IntegrationMfaServiceDeleteIntegrationMfaProcedure is the fully-qualified name of the
	// IntegrationMfaService's DeleteIntegrationMfa RPC.
	IntegrationMfaServiceDeleteIntegrationMfaProcedure = "/core.v1.IntegrationMfaService/DeleteIntegrationMfa"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	integrationMfaServiceServiceDescriptor                        = v1.File_core_v1_integration_mfa_proto.Services().ByName("IntegrationMfaService")
	integrationMfaServiceListIntegrationMfasMethodDescriptor      = integrationMfaServiceServiceDescriptor.Methods().ByName("ListIntegrationMfas")
	integrationMfaServiceGetIntegrationMfaMethodDescriptor        = integrationMfaServiceServiceDescriptor.Methods().ByName("GetIntegrationMfa")
	integrationMfaServiceGetIntegrationMFASecretsMethodDescriptor = integrationMfaServiceServiceDescriptor.Methods().ByName("GetIntegrationMFASecrets")
	integrationMfaServiceCreateIntegrationMfaMethodDescriptor     = integrationMfaServiceServiceDescriptor.Methods().ByName("CreateIntegrationMfa")
	integrationMfaServiceDeleteIntegrationMfaMethodDescriptor     = integrationMfaServiceServiceDescriptor.Methods().ByName("DeleteIntegrationMfa")
)

// IntegrationMfaServiceClient is a client for the core.v1.IntegrationMfaService service.
type IntegrationMfaServiceClient interface {
	ListIntegrationMfas(context.Context, *connect.Request[v1.ListIntegrationMfasRequest]) (*connect.Response[v1.ListIntegrationMfasResponse], error)
	GetIntegrationMfa(context.Context, *connect.Request[v1.GetIntegrationMfaRequest]) (*connect.Response[v1.GetIntegrationMfaResponse], error)
	GetIntegrationMFASecrets(context.Context, *connect.Request[v1.GetIntegrationMFASecretsRequest]) (*connect.Response[v1.GetIntegrationMFASecretsResponse], error)
	CreateIntegrationMfa(context.Context, *connect.Request[v1.CreateIntegrationMfaRequest]) (*connect.Response[v1.CreateIntegrationMfaResponse], error)
	DeleteIntegrationMfa(context.Context, *connect.Request[v1.DeleteIntegrationMfaRequest]) (*connect.Response[v1.DeleteIntegrationMfaResponse], error)
}

// NewIntegrationMfaServiceClient constructs a client for the core.v1.IntegrationMfaService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntegrationMfaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IntegrationMfaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &integrationMfaServiceClient{
		listIntegrationMfas: connect.NewClient[v1.ListIntegrationMfasRequest, v1.ListIntegrationMfasResponse](
			httpClient,
			baseURL+IntegrationMfaServiceListIntegrationMfasProcedure,
			connect.WithSchema(integrationMfaServiceListIntegrationMfasMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getIntegrationMfa: connect.NewClient[v1.GetIntegrationMfaRequest, v1.GetIntegrationMfaResponse](
			httpClient,
			baseURL+IntegrationMfaServiceGetIntegrationMfaProcedure,
			connect.WithSchema(integrationMfaServiceGetIntegrationMfaMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getIntegrationMFASecrets: connect.NewClient[v1.GetIntegrationMFASecretsRequest, v1.GetIntegrationMFASecretsResponse](
			httpClient,
			baseURL+IntegrationMfaServiceGetIntegrationMFASecretsProcedure,
			connect.WithSchema(integrationMfaServiceGetIntegrationMFASecretsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createIntegrationMfa: connect.NewClient[v1.CreateIntegrationMfaRequest, v1.CreateIntegrationMfaResponse](
			httpClient,
			baseURL+IntegrationMfaServiceCreateIntegrationMfaProcedure,
			connect.WithSchema(integrationMfaServiceCreateIntegrationMfaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteIntegrationMfa: connect.NewClient[v1.DeleteIntegrationMfaRequest, v1.DeleteIntegrationMfaResponse](
			httpClient,
			baseURL+IntegrationMfaServiceDeleteIntegrationMfaProcedure,
			connect.WithSchema(integrationMfaServiceDeleteIntegrationMfaMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// integrationMfaServiceClient implements IntegrationMfaServiceClient.
type integrationMfaServiceClient struct {
	listIntegrationMfas      *connect.Client[v1.ListIntegrationMfasRequest, v1.ListIntegrationMfasResponse]
	getIntegrationMfa        *connect.Client[v1.GetIntegrationMfaRequest, v1.GetIntegrationMfaResponse]
	getIntegrationMFASecrets *connect.Client[v1.GetIntegrationMFASecretsRequest, v1.GetIntegrationMFASecretsResponse]
	createIntegrationMfa     *connect.Client[v1.CreateIntegrationMfaRequest, v1.CreateIntegrationMfaResponse]
	deleteIntegrationMfa     *connect.Client[v1.DeleteIntegrationMfaRequest, v1.DeleteIntegrationMfaResponse]
}

// ListIntegrationMfas calls core.v1.IntegrationMfaService.ListIntegrationMfas.
func (c *integrationMfaServiceClient) ListIntegrationMfas(ctx context.Context, req *connect.Request[v1.ListIntegrationMfasRequest]) (*connect.Response[v1.ListIntegrationMfasResponse], error) {
	return c.listIntegrationMfas.CallUnary(ctx, req)
}

// GetIntegrationMfa calls core.v1.IntegrationMfaService.GetIntegrationMfa.
func (c *integrationMfaServiceClient) GetIntegrationMfa(ctx context.Context, req *connect.Request[v1.GetIntegrationMfaRequest]) (*connect.Response[v1.GetIntegrationMfaResponse], error) {
	return c.getIntegrationMfa.CallUnary(ctx, req)
}

// GetIntegrationMFASecrets calls core.v1.IntegrationMfaService.GetIntegrationMFASecrets.
func (c *integrationMfaServiceClient) GetIntegrationMFASecrets(ctx context.Context, req *connect.Request[v1.GetIntegrationMFASecretsRequest]) (*connect.Response[v1.GetIntegrationMFASecretsResponse], error) {
	return c.getIntegrationMFASecrets.CallUnary(ctx, req)
}

// CreateIntegrationMfa calls core.v1.IntegrationMfaService.CreateIntegrationMfa.
func (c *integrationMfaServiceClient) CreateIntegrationMfa(ctx context.Context, req *connect.Request[v1.CreateIntegrationMfaRequest]) (*connect.Response[v1.CreateIntegrationMfaResponse], error) {
	return c.createIntegrationMfa.CallUnary(ctx, req)
}

// DeleteIntegrationMfa calls core.v1.IntegrationMfaService.DeleteIntegrationMfa.
func (c *integrationMfaServiceClient) DeleteIntegrationMfa(ctx context.Context, req *connect.Request[v1.DeleteIntegrationMfaRequest]) (*connect.Response[v1.DeleteIntegrationMfaResponse], error) {
	return c.deleteIntegrationMfa.CallUnary(ctx, req)
}

// IntegrationMfaServiceHandler is an implementation of the core.v1.IntegrationMfaService service.
type IntegrationMfaServiceHandler interface {
	ListIntegrationMfas(context.Context, *connect.Request[v1.ListIntegrationMfasRequest]) (*connect.Response[v1.ListIntegrationMfasResponse], error)
	GetIntegrationMfa(context.Context, *connect.Request[v1.GetIntegrationMfaRequest]) (*connect.Response[v1.GetIntegrationMfaResponse], error)
	GetIntegrationMFASecrets(context.Context, *connect.Request[v1.GetIntegrationMFASecretsRequest]) (*connect.Response[v1.GetIntegrationMFASecretsResponse], error)
	CreateIntegrationMfa(context.Context, *connect.Request[v1.CreateIntegrationMfaRequest]) (*connect.Response[v1.CreateIntegrationMfaResponse], error)
	DeleteIntegrationMfa(context.Context, *connect.Request[v1.DeleteIntegrationMfaRequest]) (*connect.Response[v1.DeleteIntegrationMfaResponse], error)
}

// NewIntegrationMfaServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntegrationMfaServiceHandler(svc IntegrationMfaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	integrationMfaServiceListIntegrationMfasHandler := connect.NewUnaryHandler(
		IntegrationMfaServiceListIntegrationMfasProcedure,
		svc.ListIntegrationMfas,
		connect.WithSchema(integrationMfaServiceListIntegrationMfasMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	integrationMfaServiceGetIntegrationMfaHandler := connect.NewUnaryHandler(
		IntegrationMfaServiceGetIntegrationMfaProcedure,
		svc.GetIntegrationMfa,
		connect.WithSchema(integrationMfaServiceGetIntegrationMfaMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	integrationMfaServiceGetIntegrationMFASecretsHandler := connect.NewUnaryHandler(
		IntegrationMfaServiceGetIntegrationMFASecretsProcedure,
		svc.GetIntegrationMFASecrets,
		connect.WithSchema(integrationMfaServiceGetIntegrationMFASecretsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	integrationMfaServiceCreateIntegrationMfaHandler := connect.NewUnaryHandler(
		IntegrationMfaServiceCreateIntegrationMfaProcedure,
		svc.CreateIntegrationMfa,
		connect.WithSchema(integrationMfaServiceCreateIntegrationMfaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	integrationMfaServiceDeleteIntegrationMfaHandler := connect.NewUnaryHandler(
		IntegrationMfaServiceDeleteIntegrationMfaProcedure,
		svc.DeleteIntegrationMfa,
		connect.WithSchema(integrationMfaServiceDeleteIntegrationMfaMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.v1.IntegrationMfaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IntegrationMfaServiceListIntegrationMfasProcedure:
			integrationMfaServiceListIntegrationMfasHandler.ServeHTTP(w, r)
		case IntegrationMfaServiceGetIntegrationMfaProcedure:
			integrationMfaServiceGetIntegrationMfaHandler.ServeHTTP(w, r)
		case IntegrationMfaServiceGetIntegrationMFASecretsProcedure:
			integrationMfaServiceGetIntegrationMFASecretsHandler.ServeHTTP(w, r)
		case IntegrationMfaServiceCreateIntegrationMfaProcedure:
			integrationMfaServiceCreateIntegrationMfaHandler.ServeHTTP(w, r)
		case IntegrationMfaServiceDeleteIntegrationMfaProcedure:
			integrationMfaServiceDeleteIntegrationMfaHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIntegrationMfaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIntegrationMfaServiceHandler struct{}

func (UnimplementedIntegrationMfaServiceHandler) ListIntegrationMfas(context.Context, *connect.Request[v1.ListIntegrationMfasRequest]) (*connect.Response[v1.ListIntegrationMfasResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationMfaService.ListIntegrationMfas is not implemented"))
}

func (UnimplementedIntegrationMfaServiceHandler) GetIntegrationMfa(context.Context, *connect.Request[v1.GetIntegrationMfaRequest]) (*connect.Response[v1.GetIntegrationMfaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationMfaService.GetIntegrationMfa is not implemented"))
}

func (UnimplementedIntegrationMfaServiceHandler) GetIntegrationMFASecrets(context.Context, *connect.Request[v1.GetIntegrationMFASecretsRequest]) (*connect.Response[v1.GetIntegrationMFASecretsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationMfaService.GetIntegrationMFASecrets is not implemented"))
}

func (UnimplementedIntegrationMfaServiceHandler) CreateIntegrationMfa(context.Context, *connect.Request[v1.CreateIntegrationMfaRequest]) (*connect.Response[v1.CreateIntegrationMfaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationMfaService.CreateIntegrationMfa is not implemented"))
}

func (UnimplementedIntegrationMfaServiceHandler) DeleteIntegrationMfa(context.Context, *connect.Request[v1.DeleteIntegrationMfaRequest]) (*connect.Response[v1.DeleteIntegrationMfaResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationMfaService.DeleteIntegrationMfa is not implemented"))
}
