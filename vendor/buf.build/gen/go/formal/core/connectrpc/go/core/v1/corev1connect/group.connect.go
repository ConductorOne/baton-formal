// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/group.proto

package corev1connect

import (
	v1 "buf.build/gen/go/formal/core/protocolbuffers/go/core/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GroupServiceName is the fully-qualified name of the GroupService service.
	GroupServiceName = "core.v1.GroupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GroupServiceCreateGroupProcedure is the fully-qualified name of the GroupService's CreateGroup
	// RPC.
	GroupServiceCreateGroupProcedure = "/core.v1.GroupService/CreateGroup"
	// GroupServiceListGroupsProcedure is the fully-qualified name of the GroupService's ListGroups RPC.
	GroupServiceListGroupsProcedure = "/core.v1.GroupService/ListGroups"
	// GroupServiceGetGroupProcedure is the fully-qualified name of the GroupService's GetGroup RPC.
	GroupServiceGetGroupProcedure = "/core.v1.GroupService/GetGroup"
	// GroupServiceUpdateGroupProcedure is the fully-qualified name of the GroupService's UpdateGroup
	// RPC.
	GroupServiceUpdateGroupProcedure = "/core.v1.GroupService/UpdateGroup"
	// GroupServiceDeleteGroupProcedure is the fully-qualified name of the GroupService's DeleteGroup
	// RPC.
	GroupServiceDeleteGroupProcedure = "/core.v1.GroupService/DeleteGroup"
	// GroupServiceListUserGroupLinksProcedure is the fully-qualified name of the GroupService's
	// ListUserGroupLinks RPC.
	GroupServiceListUserGroupLinksProcedure = "/core.v1.GroupService/ListUserGroupLinks"
	// GroupServiceCreateUserGroupLinkProcedure is the fully-qualified name of the GroupService's
	// CreateUserGroupLink RPC.
	GroupServiceCreateUserGroupLinkProcedure = "/core.v1.GroupService/CreateUserGroupLink"
	// GroupServiceDeleteUserGroupLinkProcedure is the fully-qualified name of the GroupService's
	// DeleteUserGroupLink RPC.
	GroupServiceDeleteUserGroupLinkProcedure = "/core.v1.GroupService/DeleteUserGroupLink"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	groupServiceServiceDescriptor                   = v1.File_core_v1_group_proto.Services().ByName("GroupService")
	groupServiceCreateGroupMethodDescriptor         = groupServiceServiceDescriptor.Methods().ByName("CreateGroup")
	groupServiceListGroupsMethodDescriptor          = groupServiceServiceDescriptor.Methods().ByName("ListGroups")
	groupServiceGetGroupMethodDescriptor            = groupServiceServiceDescriptor.Methods().ByName("GetGroup")
	groupServiceUpdateGroupMethodDescriptor         = groupServiceServiceDescriptor.Methods().ByName("UpdateGroup")
	groupServiceDeleteGroupMethodDescriptor         = groupServiceServiceDescriptor.Methods().ByName("DeleteGroup")
	groupServiceListUserGroupLinksMethodDescriptor  = groupServiceServiceDescriptor.Methods().ByName("ListUserGroupLinks")
	groupServiceCreateUserGroupLinkMethodDescriptor = groupServiceServiceDescriptor.Methods().ByName("CreateUserGroupLink")
	groupServiceDeleteUserGroupLinkMethodDescriptor = groupServiceServiceDescriptor.Methods().ByName("DeleteUserGroupLink")
)

// GroupServiceClient is a client for the core.v1.GroupService service.
type GroupServiceClient interface {
	CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error)
	ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error)
	GetGroup(context.Context, *connect.Request[v1.GetGroupRequest]) (*connect.Response[v1.GetGroupResponse], error)
	UpdateGroup(context.Context, *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.UpdateGroupResponse], error)
	DeleteGroup(context.Context, *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[v1.DeleteGroupResponse], error)
	ListUserGroupLinks(context.Context, *connect.Request[v1.ListUserGroupLinksRequest]) (*connect.Response[v1.ListUserGroupLinksResponse], error)
	CreateUserGroupLink(context.Context, *connect.Request[v1.CreateUserGroupLinkRequest]) (*connect.Response[v1.CreateUserGroupLinkResponse], error)
	DeleteUserGroupLink(context.Context, *connect.Request[v1.DeleteUserGroupLinkRequest]) (*connect.Response[v1.DeleteUserGroupLinkResponse], error)
}

// NewGroupServiceClient constructs a client for the core.v1.GroupService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGroupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GroupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &groupServiceClient{
		createGroup: connect.NewClient[v1.CreateGroupRequest, v1.CreateGroupResponse](
			httpClient,
			baseURL+GroupServiceCreateGroupProcedure,
			connect.WithSchema(groupServiceCreateGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listGroups: connect.NewClient[v1.ListGroupsRequest, v1.ListGroupsResponse](
			httpClient,
			baseURL+GroupServiceListGroupsProcedure,
			connect.WithSchema(groupServiceListGroupsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getGroup: connect.NewClient[v1.GetGroupRequest, v1.GetGroupResponse](
			httpClient,
			baseURL+GroupServiceGetGroupProcedure,
			connect.WithSchema(groupServiceGetGroupMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateGroup: connect.NewClient[v1.UpdateGroupRequest, v1.UpdateGroupResponse](
			httpClient,
			baseURL+GroupServiceUpdateGroupProcedure,
			connect.WithSchema(groupServiceUpdateGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteGroup: connect.NewClient[v1.DeleteGroupRequest, v1.DeleteGroupResponse](
			httpClient,
			baseURL+GroupServiceDeleteGroupProcedure,
			connect.WithSchema(groupServiceDeleteGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listUserGroupLinks: connect.NewClient[v1.ListUserGroupLinksRequest, v1.ListUserGroupLinksResponse](
			httpClient,
			baseURL+GroupServiceListUserGroupLinksProcedure,
			connect.WithSchema(groupServiceListUserGroupLinksMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createUserGroupLink: connect.NewClient[v1.CreateUserGroupLinkRequest, v1.CreateUserGroupLinkResponse](
			httpClient,
			baseURL+GroupServiceCreateUserGroupLinkProcedure,
			connect.WithSchema(groupServiceCreateUserGroupLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteUserGroupLink: connect.NewClient[v1.DeleteUserGroupLinkRequest, v1.DeleteUserGroupLinkResponse](
			httpClient,
			baseURL+GroupServiceDeleteUserGroupLinkProcedure,
			connect.WithSchema(groupServiceDeleteUserGroupLinkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// groupServiceClient implements GroupServiceClient.
type groupServiceClient struct {
	createGroup         *connect.Client[v1.CreateGroupRequest, v1.CreateGroupResponse]
	listGroups          *connect.Client[v1.ListGroupsRequest, v1.ListGroupsResponse]
	getGroup            *connect.Client[v1.GetGroupRequest, v1.GetGroupResponse]
	updateGroup         *connect.Client[v1.UpdateGroupRequest, v1.UpdateGroupResponse]
	deleteGroup         *connect.Client[v1.DeleteGroupRequest, v1.DeleteGroupResponse]
	listUserGroupLinks  *connect.Client[v1.ListUserGroupLinksRequest, v1.ListUserGroupLinksResponse]
	createUserGroupLink *connect.Client[v1.CreateUserGroupLinkRequest, v1.CreateUserGroupLinkResponse]
	deleteUserGroupLink *connect.Client[v1.DeleteUserGroupLinkRequest, v1.DeleteUserGroupLinkResponse]
}

// CreateGroup calls core.v1.GroupService.CreateGroup.
func (c *groupServiceClient) CreateGroup(ctx context.Context, req *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// ListGroups calls core.v1.GroupService.ListGroups.
func (c *groupServiceClient) ListGroups(ctx context.Context, req *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error) {
	return c.listGroups.CallUnary(ctx, req)
}

// GetGroup calls core.v1.GroupService.GetGroup.
func (c *groupServiceClient) GetGroup(ctx context.Context, req *connect.Request[v1.GetGroupRequest]) (*connect.Response[v1.GetGroupResponse], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// UpdateGroup calls core.v1.GroupService.UpdateGroup.
func (c *groupServiceClient) UpdateGroup(ctx context.Context, req *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.UpdateGroupResponse], error) {
	return c.updateGroup.CallUnary(ctx, req)
}

// DeleteGroup calls core.v1.GroupService.DeleteGroup.
func (c *groupServiceClient) DeleteGroup(ctx context.Context, req *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[v1.DeleteGroupResponse], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// ListUserGroupLinks calls core.v1.GroupService.ListUserGroupLinks.
func (c *groupServiceClient) ListUserGroupLinks(ctx context.Context, req *connect.Request[v1.ListUserGroupLinksRequest]) (*connect.Response[v1.ListUserGroupLinksResponse], error) {
	return c.listUserGroupLinks.CallUnary(ctx, req)
}

// CreateUserGroupLink calls core.v1.GroupService.CreateUserGroupLink.
func (c *groupServiceClient) CreateUserGroupLink(ctx context.Context, req *connect.Request[v1.CreateUserGroupLinkRequest]) (*connect.Response[v1.CreateUserGroupLinkResponse], error) {
	return c.createUserGroupLink.CallUnary(ctx, req)
}

// DeleteUserGroupLink calls core.v1.GroupService.DeleteUserGroupLink.
func (c *groupServiceClient) DeleteUserGroupLink(ctx context.Context, req *connect.Request[v1.DeleteUserGroupLinkRequest]) (*connect.Response[v1.DeleteUserGroupLinkResponse], error) {
	return c.deleteUserGroupLink.CallUnary(ctx, req)
}

// GroupServiceHandler is an implementation of the core.v1.GroupService service.
type GroupServiceHandler interface {
	CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error)
	ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error)
	GetGroup(context.Context, *connect.Request[v1.GetGroupRequest]) (*connect.Response[v1.GetGroupResponse], error)
	UpdateGroup(context.Context, *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.UpdateGroupResponse], error)
	DeleteGroup(context.Context, *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[v1.DeleteGroupResponse], error)
	ListUserGroupLinks(context.Context, *connect.Request[v1.ListUserGroupLinksRequest]) (*connect.Response[v1.ListUserGroupLinksResponse], error)
	CreateUserGroupLink(context.Context, *connect.Request[v1.CreateUserGroupLinkRequest]) (*connect.Response[v1.CreateUserGroupLinkResponse], error)
	DeleteUserGroupLink(context.Context, *connect.Request[v1.DeleteUserGroupLinkRequest]) (*connect.Response[v1.DeleteUserGroupLinkResponse], error)
}

// NewGroupServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGroupServiceHandler(svc GroupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	groupServiceCreateGroupHandler := connect.NewUnaryHandler(
		GroupServiceCreateGroupProcedure,
		svc.CreateGroup,
		connect.WithSchema(groupServiceCreateGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	groupServiceListGroupsHandler := connect.NewUnaryHandler(
		GroupServiceListGroupsProcedure,
		svc.ListGroups,
		connect.WithSchema(groupServiceListGroupsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	groupServiceGetGroupHandler := connect.NewUnaryHandler(
		GroupServiceGetGroupProcedure,
		svc.GetGroup,
		connect.WithSchema(groupServiceGetGroupMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	groupServiceUpdateGroupHandler := connect.NewUnaryHandler(
		GroupServiceUpdateGroupProcedure,
		svc.UpdateGroup,
		connect.WithSchema(groupServiceUpdateGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	groupServiceDeleteGroupHandler := connect.NewUnaryHandler(
		GroupServiceDeleteGroupProcedure,
		svc.DeleteGroup,
		connect.WithSchema(groupServiceDeleteGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	groupServiceListUserGroupLinksHandler := connect.NewUnaryHandler(
		GroupServiceListUserGroupLinksProcedure,
		svc.ListUserGroupLinks,
		connect.WithSchema(groupServiceListUserGroupLinksMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	groupServiceCreateUserGroupLinkHandler := connect.NewUnaryHandler(
		GroupServiceCreateUserGroupLinkProcedure,
		svc.CreateUserGroupLink,
		connect.WithSchema(groupServiceCreateUserGroupLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	groupServiceDeleteUserGroupLinkHandler := connect.NewUnaryHandler(
		GroupServiceDeleteUserGroupLinkProcedure,
		svc.DeleteUserGroupLink,
		connect.WithSchema(groupServiceDeleteUserGroupLinkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.v1.GroupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GroupServiceCreateGroupProcedure:
			groupServiceCreateGroupHandler.ServeHTTP(w, r)
		case GroupServiceListGroupsProcedure:
			groupServiceListGroupsHandler.ServeHTTP(w, r)
		case GroupServiceGetGroupProcedure:
			groupServiceGetGroupHandler.ServeHTTP(w, r)
		case GroupServiceUpdateGroupProcedure:
			groupServiceUpdateGroupHandler.ServeHTTP(w, r)
		case GroupServiceDeleteGroupProcedure:
			groupServiceDeleteGroupHandler.ServeHTTP(w, r)
		case GroupServiceListUserGroupLinksProcedure:
			groupServiceListUserGroupLinksHandler.ServeHTTP(w, r)
		case GroupServiceCreateUserGroupLinkProcedure:
			groupServiceCreateUserGroupLinkHandler.ServeHTTP(w, r)
		case GroupServiceDeleteUserGroupLinkProcedure:
			groupServiceDeleteUserGroupLinkHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGroupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGroupServiceHandler struct{}

func (UnimplementedGroupServiceHandler) CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.CreateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.GroupService.CreateGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.GroupService.ListGroups is not implemented"))
}

func (UnimplementedGroupServiceHandler) GetGroup(context.Context, *connect.Request[v1.GetGroupRequest]) (*connect.Response[v1.GetGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.GroupService.GetGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) UpdateGroup(context.Context, *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.UpdateGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.GroupService.UpdateGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) DeleteGroup(context.Context, *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[v1.DeleteGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.GroupService.DeleteGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) ListUserGroupLinks(context.Context, *connect.Request[v1.ListUserGroupLinksRequest]) (*connect.Response[v1.ListUserGroupLinksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.GroupService.ListUserGroupLinks is not implemented"))
}

func (UnimplementedGroupServiceHandler) CreateUserGroupLink(context.Context, *connect.Request[v1.CreateUserGroupLinkRequest]) (*connect.Response[v1.CreateUserGroupLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.GroupService.CreateUserGroupLink is not implemented"))
}

func (UnimplementedGroupServiceHandler) DeleteUserGroupLink(context.Context, *connect.Request[v1.DeleteUserGroupLinkRequest]) (*connect.Response[v1.DeleteUserGroupLinkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.GroupService.DeleteUserGroupLink is not implemented"))
}
