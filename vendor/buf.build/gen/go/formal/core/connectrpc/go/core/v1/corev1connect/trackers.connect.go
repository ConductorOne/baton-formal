// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/trackers.proto

package corev1connect

import (
	v1 "buf.build/gen/go/formal/core/protocolbuffers/go/core/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RowLevelTrackerServiceName is the fully-qualified name of the RowLevelTrackerService service.
	RowLevelTrackerServiceName = "core.v1.RowLevelTrackerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RowLevelTrackerServiceGetRowLevelTrackerProcedure is the fully-qualified name of the
	// RowLevelTrackerService's GetRowLevelTracker RPC.
	RowLevelTrackerServiceGetRowLevelTrackerProcedure = "/core.v1.RowLevelTrackerService/GetRowLevelTracker"
	// RowLevelTrackerServiceCreateRowLevelTrackerProcedure is the fully-qualified name of the
	// RowLevelTrackerService's CreateRowLevelTracker RPC.
	RowLevelTrackerServiceCreateRowLevelTrackerProcedure = "/core.v1.RowLevelTrackerService/CreateRowLevelTracker"
	// RowLevelTrackerServiceListRowLevelTrackersProcedure is the fully-qualified name of the
	// RowLevelTrackerService's ListRowLevelTrackers RPC.
	RowLevelTrackerServiceListRowLevelTrackersProcedure = "/core.v1.RowLevelTrackerService/ListRowLevelTrackers"
	// RowLevelTrackerServiceDeleteRowLevelTrackerProcedure is the fully-qualified name of the
	// RowLevelTrackerService's DeleteRowLevelTracker RPC.
	RowLevelTrackerServiceDeleteRowLevelTrackerProcedure = "/core.v1.RowLevelTrackerService/DeleteRowLevelTracker"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	rowLevelTrackerServiceServiceDescriptor                     = v1.File_core_v1_trackers_proto.Services().ByName("RowLevelTrackerService")
	rowLevelTrackerServiceGetRowLevelTrackerMethodDescriptor    = rowLevelTrackerServiceServiceDescriptor.Methods().ByName("GetRowLevelTracker")
	rowLevelTrackerServiceCreateRowLevelTrackerMethodDescriptor = rowLevelTrackerServiceServiceDescriptor.Methods().ByName("CreateRowLevelTracker")
	rowLevelTrackerServiceListRowLevelTrackersMethodDescriptor  = rowLevelTrackerServiceServiceDescriptor.Methods().ByName("ListRowLevelTrackers")
	rowLevelTrackerServiceDeleteRowLevelTrackerMethodDescriptor = rowLevelTrackerServiceServiceDescriptor.Methods().ByName("DeleteRowLevelTracker")
)

// RowLevelTrackerServiceClient is a client for the core.v1.RowLevelTrackerService service.
type RowLevelTrackerServiceClient interface {
	GetRowLevelTracker(context.Context, *connect.Request[v1.GetRowLevelTrackerRequest]) (*connect.Response[v1.GetRowLevelTrackerResponse], error)
	CreateRowLevelTracker(context.Context, *connect.Request[v1.CreateRowLevelTrackerRequest]) (*connect.Response[v1.CreateRowLevelTrackerResponse], error)
	ListRowLevelTrackers(context.Context, *connect.Request[v1.ListRowLevelTrackersRequest]) (*connect.Response[v1.ListRowLevelTrackersResponse], error)
	DeleteRowLevelTracker(context.Context, *connect.Request[v1.DeleteRowLevelTrackerRequest]) (*connect.Response[v1.DeleteRowLevelTrackerResponse], error)
}

// NewRowLevelTrackerServiceClient constructs a client for the core.v1.RowLevelTrackerService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRowLevelTrackerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RowLevelTrackerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &rowLevelTrackerServiceClient{
		getRowLevelTracker: connect.NewClient[v1.GetRowLevelTrackerRequest, v1.GetRowLevelTrackerResponse](
			httpClient,
			baseURL+RowLevelTrackerServiceGetRowLevelTrackerProcedure,
			connect.WithSchema(rowLevelTrackerServiceGetRowLevelTrackerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRowLevelTracker: connect.NewClient[v1.CreateRowLevelTrackerRequest, v1.CreateRowLevelTrackerResponse](
			httpClient,
			baseURL+RowLevelTrackerServiceCreateRowLevelTrackerProcedure,
			connect.WithSchema(rowLevelTrackerServiceCreateRowLevelTrackerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listRowLevelTrackers: connect.NewClient[v1.ListRowLevelTrackersRequest, v1.ListRowLevelTrackersResponse](
			httpClient,
			baseURL+RowLevelTrackerServiceListRowLevelTrackersProcedure,
			connect.WithSchema(rowLevelTrackerServiceListRowLevelTrackersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRowLevelTracker: connect.NewClient[v1.DeleteRowLevelTrackerRequest, v1.DeleteRowLevelTrackerResponse](
			httpClient,
			baseURL+RowLevelTrackerServiceDeleteRowLevelTrackerProcedure,
			connect.WithSchema(rowLevelTrackerServiceDeleteRowLevelTrackerMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// rowLevelTrackerServiceClient implements RowLevelTrackerServiceClient.
type rowLevelTrackerServiceClient struct {
	getRowLevelTracker    *connect.Client[v1.GetRowLevelTrackerRequest, v1.GetRowLevelTrackerResponse]
	createRowLevelTracker *connect.Client[v1.CreateRowLevelTrackerRequest, v1.CreateRowLevelTrackerResponse]
	listRowLevelTrackers  *connect.Client[v1.ListRowLevelTrackersRequest, v1.ListRowLevelTrackersResponse]
	deleteRowLevelTracker *connect.Client[v1.DeleteRowLevelTrackerRequest, v1.DeleteRowLevelTrackerResponse]
}

// GetRowLevelTracker calls core.v1.RowLevelTrackerService.GetRowLevelTracker.
func (c *rowLevelTrackerServiceClient) GetRowLevelTracker(ctx context.Context, req *connect.Request[v1.GetRowLevelTrackerRequest]) (*connect.Response[v1.GetRowLevelTrackerResponse], error) {
	return c.getRowLevelTracker.CallUnary(ctx, req)
}

// CreateRowLevelTracker calls core.v1.RowLevelTrackerService.CreateRowLevelTracker.
func (c *rowLevelTrackerServiceClient) CreateRowLevelTracker(ctx context.Context, req *connect.Request[v1.CreateRowLevelTrackerRequest]) (*connect.Response[v1.CreateRowLevelTrackerResponse], error) {
	return c.createRowLevelTracker.CallUnary(ctx, req)
}

// ListRowLevelTrackers calls core.v1.RowLevelTrackerService.ListRowLevelTrackers.
func (c *rowLevelTrackerServiceClient) ListRowLevelTrackers(ctx context.Context, req *connect.Request[v1.ListRowLevelTrackersRequest]) (*connect.Response[v1.ListRowLevelTrackersResponse], error) {
	return c.listRowLevelTrackers.CallUnary(ctx, req)
}

// DeleteRowLevelTracker calls core.v1.RowLevelTrackerService.DeleteRowLevelTracker.
func (c *rowLevelTrackerServiceClient) DeleteRowLevelTracker(ctx context.Context, req *connect.Request[v1.DeleteRowLevelTrackerRequest]) (*connect.Response[v1.DeleteRowLevelTrackerResponse], error) {
	return c.deleteRowLevelTracker.CallUnary(ctx, req)
}

// RowLevelTrackerServiceHandler is an implementation of the core.v1.RowLevelTrackerService service.
type RowLevelTrackerServiceHandler interface {
	GetRowLevelTracker(context.Context, *connect.Request[v1.GetRowLevelTrackerRequest]) (*connect.Response[v1.GetRowLevelTrackerResponse], error)
	CreateRowLevelTracker(context.Context, *connect.Request[v1.CreateRowLevelTrackerRequest]) (*connect.Response[v1.CreateRowLevelTrackerResponse], error)
	ListRowLevelTrackers(context.Context, *connect.Request[v1.ListRowLevelTrackersRequest]) (*connect.Response[v1.ListRowLevelTrackersResponse], error)
	DeleteRowLevelTracker(context.Context, *connect.Request[v1.DeleteRowLevelTrackerRequest]) (*connect.Response[v1.DeleteRowLevelTrackerResponse], error)
}

// NewRowLevelTrackerServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRowLevelTrackerServiceHandler(svc RowLevelTrackerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	rowLevelTrackerServiceGetRowLevelTrackerHandler := connect.NewUnaryHandler(
		RowLevelTrackerServiceGetRowLevelTrackerProcedure,
		svc.GetRowLevelTracker,
		connect.WithSchema(rowLevelTrackerServiceGetRowLevelTrackerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	rowLevelTrackerServiceCreateRowLevelTrackerHandler := connect.NewUnaryHandler(
		RowLevelTrackerServiceCreateRowLevelTrackerProcedure,
		svc.CreateRowLevelTracker,
		connect.WithSchema(rowLevelTrackerServiceCreateRowLevelTrackerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	rowLevelTrackerServiceListRowLevelTrackersHandler := connect.NewUnaryHandler(
		RowLevelTrackerServiceListRowLevelTrackersProcedure,
		svc.ListRowLevelTrackers,
		connect.WithSchema(rowLevelTrackerServiceListRowLevelTrackersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	rowLevelTrackerServiceDeleteRowLevelTrackerHandler := connect.NewUnaryHandler(
		RowLevelTrackerServiceDeleteRowLevelTrackerProcedure,
		svc.DeleteRowLevelTracker,
		connect.WithSchema(rowLevelTrackerServiceDeleteRowLevelTrackerMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.v1.RowLevelTrackerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RowLevelTrackerServiceGetRowLevelTrackerProcedure:
			rowLevelTrackerServiceGetRowLevelTrackerHandler.ServeHTTP(w, r)
		case RowLevelTrackerServiceCreateRowLevelTrackerProcedure:
			rowLevelTrackerServiceCreateRowLevelTrackerHandler.ServeHTTP(w, r)
		case RowLevelTrackerServiceListRowLevelTrackersProcedure:
			rowLevelTrackerServiceListRowLevelTrackersHandler.ServeHTTP(w, r)
		case RowLevelTrackerServiceDeleteRowLevelTrackerProcedure:
			rowLevelTrackerServiceDeleteRowLevelTrackerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRowLevelTrackerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRowLevelTrackerServiceHandler struct{}

func (UnimplementedRowLevelTrackerServiceHandler) GetRowLevelTracker(context.Context, *connect.Request[v1.GetRowLevelTrackerRequest]) (*connect.Response[v1.GetRowLevelTrackerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.RowLevelTrackerService.GetRowLevelTracker is not implemented"))
}

func (UnimplementedRowLevelTrackerServiceHandler) CreateRowLevelTracker(context.Context, *connect.Request[v1.CreateRowLevelTrackerRequest]) (*connect.Response[v1.CreateRowLevelTrackerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.RowLevelTrackerService.CreateRowLevelTracker is not implemented"))
}

func (UnimplementedRowLevelTrackerServiceHandler) ListRowLevelTrackers(context.Context, *connect.Request[v1.ListRowLevelTrackersRequest]) (*connect.Response[v1.ListRowLevelTrackersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.RowLevelTrackerService.ListRowLevelTrackers is not implemented"))
}

func (UnimplementedRowLevelTrackerServiceHandler) DeleteRowLevelTracker(context.Context, *connect.Request[v1.DeleteRowLevelTrackerRequest]) (*connect.Response[v1.DeleteRowLevelTrackerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.RowLevelTrackerService.DeleteRowLevelTracker is not implemented"))
}
