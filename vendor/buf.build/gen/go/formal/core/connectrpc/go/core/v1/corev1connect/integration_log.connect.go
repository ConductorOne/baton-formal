// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/integration_log.proto

package corev1connect

import (
	v1 "buf.build/gen/go/formal/core/protocolbuffers/go/core/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// IntegrationsLogServiceName is the fully-qualified name of the IntegrationsLogService service.
	IntegrationsLogServiceName = "core.v1.IntegrationsLogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IntegrationsLogServiceListIntegrationLogsProcedure is the fully-qualified name of the
	// IntegrationsLogService's ListIntegrationLogs RPC.
	IntegrationsLogServiceListIntegrationLogsProcedure = "/core.v1.IntegrationsLogService/ListIntegrationLogs"
	// IntegrationsLogServiceGetIntegrationLogProcedure is the fully-qualified name of the
	// IntegrationsLogService's GetIntegrationLog RPC.
	IntegrationsLogServiceGetIntegrationLogProcedure = "/core.v1.IntegrationsLogService/GetIntegrationLog"
	// IntegrationsLogServiceCreateIntegrationLogProcedure is the fully-qualified name of the
	// IntegrationsLogService's CreateIntegrationLog RPC.
	IntegrationsLogServiceCreateIntegrationLogProcedure = "/core.v1.IntegrationsLogService/CreateIntegrationLog"
	// IntegrationsLogServiceDeleteIntegrationLogProcedure is the fully-qualified name of the
	// IntegrationsLogService's DeleteIntegrationLog RPC.
	IntegrationsLogServiceDeleteIntegrationLogProcedure = "/core.v1.IntegrationsLogService/DeleteIntegrationLog"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	integrationsLogServiceServiceDescriptor                    = v1.File_core_v1_integration_log_proto.Services().ByName("IntegrationsLogService")
	integrationsLogServiceListIntegrationLogsMethodDescriptor  = integrationsLogServiceServiceDescriptor.Methods().ByName("ListIntegrationLogs")
	integrationsLogServiceGetIntegrationLogMethodDescriptor    = integrationsLogServiceServiceDescriptor.Methods().ByName("GetIntegrationLog")
	integrationsLogServiceCreateIntegrationLogMethodDescriptor = integrationsLogServiceServiceDescriptor.Methods().ByName("CreateIntegrationLog")
	integrationsLogServiceDeleteIntegrationLogMethodDescriptor = integrationsLogServiceServiceDescriptor.Methods().ByName("DeleteIntegrationLog")
)

// IntegrationsLogServiceClient is a client for the core.v1.IntegrationsLogService service.
type IntegrationsLogServiceClient interface {
	ListIntegrationLogs(context.Context, *connect.Request[v1.ListIntegrationLogsRequest]) (*connect.Response[v1.ListIntegrationLogsResponse], error)
	GetIntegrationLog(context.Context, *connect.Request[v1.GetIntegrationLogRequest]) (*connect.Response[v1.GetIntegrationLogResponse], error)
	CreateIntegrationLog(context.Context, *connect.Request[v1.CreateIntegrationLogRequest]) (*connect.Response[v1.CreateIntegrationLogResponse], error)
	DeleteIntegrationLog(context.Context, *connect.Request[v1.DeleteIntegrationLogRequest]) (*connect.Response[v1.DeleteIntegrationLogResponse], error)
}

// NewIntegrationsLogServiceClient constructs a client for the core.v1.IntegrationsLogService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIntegrationsLogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) IntegrationsLogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &integrationsLogServiceClient{
		listIntegrationLogs: connect.NewClient[v1.ListIntegrationLogsRequest, v1.ListIntegrationLogsResponse](
			httpClient,
			baseURL+IntegrationsLogServiceListIntegrationLogsProcedure,
			connect.WithSchema(integrationsLogServiceListIntegrationLogsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getIntegrationLog: connect.NewClient[v1.GetIntegrationLogRequest, v1.GetIntegrationLogResponse](
			httpClient,
			baseURL+IntegrationsLogServiceGetIntegrationLogProcedure,
			connect.WithSchema(integrationsLogServiceGetIntegrationLogMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createIntegrationLog: connect.NewClient[v1.CreateIntegrationLogRequest, v1.CreateIntegrationLogResponse](
			httpClient,
			baseURL+IntegrationsLogServiceCreateIntegrationLogProcedure,
			connect.WithSchema(integrationsLogServiceCreateIntegrationLogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteIntegrationLog: connect.NewClient[v1.DeleteIntegrationLogRequest, v1.DeleteIntegrationLogResponse](
			httpClient,
			baseURL+IntegrationsLogServiceDeleteIntegrationLogProcedure,
			connect.WithSchema(integrationsLogServiceDeleteIntegrationLogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// integrationsLogServiceClient implements IntegrationsLogServiceClient.
type integrationsLogServiceClient struct {
	listIntegrationLogs  *connect.Client[v1.ListIntegrationLogsRequest, v1.ListIntegrationLogsResponse]
	getIntegrationLog    *connect.Client[v1.GetIntegrationLogRequest, v1.GetIntegrationLogResponse]
	createIntegrationLog *connect.Client[v1.CreateIntegrationLogRequest, v1.CreateIntegrationLogResponse]
	deleteIntegrationLog *connect.Client[v1.DeleteIntegrationLogRequest, v1.DeleteIntegrationLogResponse]
}

// ListIntegrationLogs calls core.v1.IntegrationsLogService.ListIntegrationLogs.
func (c *integrationsLogServiceClient) ListIntegrationLogs(ctx context.Context, req *connect.Request[v1.ListIntegrationLogsRequest]) (*connect.Response[v1.ListIntegrationLogsResponse], error) {
	return c.listIntegrationLogs.CallUnary(ctx, req)
}

// GetIntegrationLog calls core.v1.IntegrationsLogService.GetIntegrationLog.
func (c *integrationsLogServiceClient) GetIntegrationLog(ctx context.Context, req *connect.Request[v1.GetIntegrationLogRequest]) (*connect.Response[v1.GetIntegrationLogResponse], error) {
	return c.getIntegrationLog.CallUnary(ctx, req)
}

// CreateIntegrationLog calls core.v1.IntegrationsLogService.CreateIntegrationLog.
func (c *integrationsLogServiceClient) CreateIntegrationLog(ctx context.Context, req *connect.Request[v1.CreateIntegrationLogRequest]) (*connect.Response[v1.CreateIntegrationLogResponse], error) {
	return c.createIntegrationLog.CallUnary(ctx, req)
}

// DeleteIntegrationLog calls core.v1.IntegrationsLogService.DeleteIntegrationLog.
func (c *integrationsLogServiceClient) DeleteIntegrationLog(ctx context.Context, req *connect.Request[v1.DeleteIntegrationLogRequest]) (*connect.Response[v1.DeleteIntegrationLogResponse], error) {
	return c.deleteIntegrationLog.CallUnary(ctx, req)
}

// IntegrationsLogServiceHandler is an implementation of the core.v1.IntegrationsLogService service.
type IntegrationsLogServiceHandler interface {
	ListIntegrationLogs(context.Context, *connect.Request[v1.ListIntegrationLogsRequest]) (*connect.Response[v1.ListIntegrationLogsResponse], error)
	GetIntegrationLog(context.Context, *connect.Request[v1.GetIntegrationLogRequest]) (*connect.Response[v1.GetIntegrationLogResponse], error)
	CreateIntegrationLog(context.Context, *connect.Request[v1.CreateIntegrationLogRequest]) (*connect.Response[v1.CreateIntegrationLogResponse], error)
	DeleteIntegrationLog(context.Context, *connect.Request[v1.DeleteIntegrationLogRequest]) (*connect.Response[v1.DeleteIntegrationLogResponse], error)
}

// NewIntegrationsLogServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIntegrationsLogServiceHandler(svc IntegrationsLogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	integrationsLogServiceListIntegrationLogsHandler := connect.NewUnaryHandler(
		IntegrationsLogServiceListIntegrationLogsProcedure,
		svc.ListIntegrationLogs,
		connect.WithSchema(integrationsLogServiceListIntegrationLogsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	integrationsLogServiceGetIntegrationLogHandler := connect.NewUnaryHandler(
		IntegrationsLogServiceGetIntegrationLogProcedure,
		svc.GetIntegrationLog,
		connect.WithSchema(integrationsLogServiceGetIntegrationLogMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	integrationsLogServiceCreateIntegrationLogHandler := connect.NewUnaryHandler(
		IntegrationsLogServiceCreateIntegrationLogProcedure,
		svc.CreateIntegrationLog,
		connect.WithSchema(integrationsLogServiceCreateIntegrationLogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	integrationsLogServiceDeleteIntegrationLogHandler := connect.NewUnaryHandler(
		IntegrationsLogServiceDeleteIntegrationLogProcedure,
		svc.DeleteIntegrationLog,
		connect.WithSchema(integrationsLogServiceDeleteIntegrationLogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/core.v1.IntegrationsLogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IntegrationsLogServiceListIntegrationLogsProcedure:
			integrationsLogServiceListIntegrationLogsHandler.ServeHTTP(w, r)
		case IntegrationsLogServiceGetIntegrationLogProcedure:
			integrationsLogServiceGetIntegrationLogHandler.ServeHTTP(w, r)
		case IntegrationsLogServiceCreateIntegrationLogProcedure:
			integrationsLogServiceCreateIntegrationLogHandler.ServeHTTP(w, r)
		case IntegrationsLogServiceDeleteIntegrationLogProcedure:
			integrationsLogServiceDeleteIntegrationLogHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIntegrationsLogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIntegrationsLogServiceHandler struct{}

func (UnimplementedIntegrationsLogServiceHandler) ListIntegrationLogs(context.Context, *connect.Request[v1.ListIntegrationLogsRequest]) (*connect.Response[v1.ListIntegrationLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationsLogService.ListIntegrationLogs is not implemented"))
}

func (UnimplementedIntegrationsLogServiceHandler) GetIntegrationLog(context.Context, *connect.Request[v1.GetIntegrationLogRequest]) (*connect.Response[v1.GetIntegrationLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationsLogService.GetIntegrationLog is not implemented"))
}

func (UnimplementedIntegrationsLogServiceHandler) CreateIntegrationLog(context.Context, *connect.Request[v1.CreateIntegrationLogRequest]) (*connect.Response[v1.CreateIntegrationLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationsLogService.CreateIntegrationLog is not implemented"))
}

func (UnimplementedIntegrationsLogServiceHandler) DeleteIntegrationLog(context.Context, *connect.Request[v1.DeleteIntegrationLogRequest]) (*connect.Response[v1.DeleteIntegrationLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("core.v1.IntegrationsLogService.DeleteIntegrationLog is not implemented"))
}
